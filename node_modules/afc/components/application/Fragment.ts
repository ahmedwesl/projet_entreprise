/**
 * Created by jean.rennes on 06/12/2019.
 */
 ///<reference path="Activity.ts" />

namespace AFC.Application {
    export interface ILayoutInflater {
        inflate(resource: string, root: gui.IView): gui.IView;
    }

    export interface IFragmentHostCallback {
        onGetLayoutInflater(): ILayoutInflater;
    }

    const _activity = Symbol(),
        _tag = Symbol(),
        _childFragmentManager = Symbol(),
        _fragmentManager = Symbol(),
        _parentFragment = Symbol(),
        _status = Symbol(),
        _instances = Symbol(),
        _state = Symbol(),
        _viewState = Symbol(),
        _arguments = Symbol(),
        _view = Symbol(),
        _host = Symbol(),
        _performSaveInstanceState = Symbol(),
        _performDestroyView = Symbol(),
        _performDestroy = Symbol(),
        _ctor = Symbol(),
        _instance = Symbol();

    export type IBundleValue = any;//null|number|string|boolean|{[key: string]: IBundleValue}|IBundleValue[];

    const enum FragmentStatus {
        initializing,
        created,
        attached
    }

    export class Bundle {
        /** @internal */        
        private [_state]: {
            [key: string]: IBundleValue;
        } = {};

        public getKeys(): ReadonlyArray<string> {
            return Object.keys(this[_state]);
        }

        public getValue<T extends IBundleValue = IBundleValue>(key: string | symbol): T {
            return <T>this[_state][<any>key];
        }

        public putValue<T extends IBundleValue = IBundleValue>(key: string | symbol, value: T) {
            value === void 0 ? delete this[_state][<any>key] : this[_state][<any>key] = value;
        }

        public getBundle(key: string | symbol): Bundle {
            let bundle = new Bundle();
            bundle[_state] = this.getValue<{[key: string]: IBundleValue}>(key);
            return bundle;
        }

        public putBundle(key: string | symbol, value: Bundle): void {
            this.putValue(key, value && value[_state]);
        }

        public isEmpty(): boolean {
            return !(this.getKeys().length || Object.getOwnPropertySymbols(this[_state]).length);
        }
    }

    class FragmentState {
        /** @internal */        
        private [_tag]: string;
        /** @internal */        
        private [_arguments]: Bundle;
        /** @internal */        
        private [_ctor]: Tools.Constructor<Fragment>;
        /** @internal */        
        private [_instance]: Fragment;

        /** @internal */        
        public [_state]: Bundle;

        constructor() {}

        public initFrom(fragment: Fragment): this {
            this[_tag] = fragment[_tag];
            this[_arguments] = fragment.getArguments();
            return this;
        }

        public instantiate(activity: Activity, parent: Fragment): Fragment {
            let fragment = this[_instance];

            if (!fragment) {
                fragment = this[_instance] = new this[_ctor]();
                fragment[_tag] = this[_tag];
                fragment.setArguments(this[_arguments]);
            }
            return fragment;
        }            
    }

    export class Fragment {
        /** @internal */
        private [_tag]: string;
        /** @internal */
        private [_activity]: Activity;
        /** @internal */
        private [_fragmentManager]: FragmentManager;
        /** @internal */
        private [_childFragmentManager]: FragmentManager;
        /** @internal */
        private [_status]: FragmentStatus = FragmentStatus.initializing;
        /** @internal */
        private [_state]: Bundle;
        /** @internal */
        private [_viewState]: Bundle;
        /** @internal */
        private [_arguments]: Bundle;
        /** @internal */
        private [_view]: gui.IView;
        /** @internal */
        private [_host]: IFragmentHostCallback;
        protected containerId: string;

        public static SavedState = FragmentState;

        /** @internal */        
        public static FragmentManager = class {
            private [_activity]: Activity;
            private [_parentFragment]: Fragment;
            //private [_clsFactory]: FragmentFactory;
            private [_instances]: {[key: string]: Fragment};
            private [_host]: IFragmentHostCallback;

            public saveFragmentViewState(fragment: Fragment): void {
                let view = fragment.getView();
                
                if (view) {
                    let savedInstanceState = fragment[_viewState] || new Bundle();
                    
                    gui.onSaveInstanceState(fragment[_activity], view, savedInstanceState);
                    savedInstanceState.isEmpty() || (fragment[_viewState] = savedInstanceState);
                }
            }            

            public static detachView(fragment: Fragment, noDestroy?: boolean): void {
                if (fragment[_status] === FragmentStatus.attached) {
                    let view = fragment.getView(),
                        fragmentManager = fragment.getFragmentManager(),
                        tag = fragment[_tag];
                    
                    tag && (fragment[_state] = fragmentManager._saveFragmentBasicState(fragment));
                    fragment[_performDestroyView]();
                    view && view.parentNode.removeChild(view);
                    noDestroy || tag || fragment[_performDestroy]();          // immediate destruction if no tag
                    delete fragment[_tag];
                    delete fragment[_view];
                    delete fragment.containerId;
                }
            }

            public static destroyFragment(fragment: Fragment): void {
                let fragmentManager = fragment.getFragmentManager(), tag;
                
                if (fragmentManager) {
                    tag = fragment[_tag];
                    FragmentManager.detachView(fragment);
                    fragment[_performDestroy]();
                    if (tag) {
                        delete fragmentManager[_instances][tag];
                    }
                }
            }

            constructor(activity: Activity, host: IFragmentHostCallback, parentFragment?: Fragment) {
                this[_activity] = activity;
                //this[_clsFactory] = new FragmentFactory();
                this[_instances] = {};
                this[_parentFragment] = parentFragment;
                this[_host] = host;
            }

            public findFragmentByTag(tag: string): Fragment {
                return this[_instances][tag];
            }
            
            protected _saveFragmentBasicState(fragment: Fragment): Bundle {
                let savedInstanceState: Bundle = new Bundle();
                
                fragment[_performSaveInstanceState](savedInstanceState);
                this.saveFragmentViewState(fragment);
                if (fragment[_viewState]) {
                    savedInstanceState.putBundle('VIEW_STATE_TAG', fragment[_viewState]);
                }
                return savedInstanceState.isEmpty() ? null : savedInstanceState;
            }

            public saveAllState(): FragmentManagerState {
                return Object.values(this[_instances]).map(fragment => {
                    let fragmentState = (new Fragment.SavedState()).initFrom(fragment);
                        fragmentState[_state] = this._saveFragmentBasicState(fragment);
                        return fragmentState;
                });
            }

            public restoreAllState(state: FragmentManagerState): void {
                state.forEach(fragmentState => {
                    let fragment: Fragment = fragmentState.instantiate(this[_activity], this[_parentFragment]);
                    fragment[_viewState] = fragmentState[_state].getBundle('VIEW_STATE_TAG');
                    fragment[_state] = fragmentState[_state];
                    this[_instances][fragment[_tag]] = fragment;
                });
            }

            public dispatchCreate(): void {
                Object.values(this[_instances]).forEach(fragment => {
                    fragment.onCreate();
                });
            }

            public attachView(container: gui.IView, fragment: Fragment, tag?: string): gui.IView {
                let savedInstanceState = fragment[_state],
                    view,
                    inflater,
                    visibility;

                delete fragment[_state];
                if (tag && (this[_instances][tag] !== fragment)) {
                    this[_instances][tag] && FragmentManager.detachView(fragment);
                    fragment[_tag] && FragmentManager.detachView(fragment);
                    this[_instances][tag] = fragment;
                }
                fragment[_tag] = tag;
                if (fragment[_status] === FragmentStatus.initializing) {
                    fragment[_host] = this[_host];
                    fragment[_fragmentManager] = this;
                    container && (fragment.containerId = container.id);
                    fragment.onAttach(fragment[_activity] = this[_activity]);
                    this[_parentFragment] && this[_parentFragment].onAttachFragment(fragment);
                    fragment.onCreate(savedInstanceState);
                }
                fragment[_status] = FragmentStatus.attached;
                inflater = fragment.getLayoutInflater(savedInstanceState);
                view = fragment[_view] = fragment.onCreateView(inflater, container, savedInstanceState);
                if (view) {
                    gui.onRestoreViewState(this[_activity], view, fragment.getChildFragmentManager(), fragment[_viewState]);
                    fragment.onViewStateRestored(savedInstanceState);
                    visibility = view.style.visibility;
                    view.style.visibility = 'hidden';
                    if (container) {
                        container.appendChild(view);
                    }
                }
                fragment.onActivityCreated(savedInstanceState);
                if (view) {
                    view.style.visibility = visibility;
                }
                return view;
            }

            public dispatchDestroyView(): void {
                Object.values(this[_instances]).forEach(fragment => {
                    fragment[_performDestroyView]();
                });
            }
                        
            public dispatchDestroy(): void {
                Object.values(this[_instances]).forEach(fragment => {
                    fragment[_performDestroy]();
                });
                this[_instances] = {};
            }
        };

        /** @internal */        
        private [_performSaveInstanceState](savedInstanceState: Bundle): void {
            this.onSaveInstanceState(savedInstanceState);
            if (this[_childFragmentManager]) {
                 let state: FragmentManagerState = this[_childFragmentManager].saveAllState();
                 if (state.length) {
                     savedInstanceState.putValue("FRAGMENTS_TAG", state);
                 }
            }
        }

        /** @internal */        
        private [_performDestroyView](): void {
            if (this[_status] === FragmentStatus.attached) {
                if (this[_childFragmentManager]) {
                    this[_childFragmentManager].dispatchDestroyView();
                }
                this.onDestroyView();
                delete this[_view];
                this[_status] = FragmentStatus.created;
            }
        }
        
        /** @internal */        
        private [_performDestroy](): void {
            if (this[_status] === FragmentStatus.created) {
                if (this[_childFragmentManager]) {
                    this[_childFragmentManager].dispatchDestroy();
                    delete this[_childFragmentManager];
                }
                this.onDestroy();
                this[_status] = FragmentStatus.initializing;
            } else if (this[_status] === FragmentStatus.attached) {
                console.log('Cannot destroy an attached fragment');
            }
        }
        
        public getTag(): string {
            return this[_tag];
        }
        
        public getActivity<T extends Activity>(): T {
            return <T>this[_activity];
        }

        public getView<T extends gui.IView>(): T {
            return <T>this[_view];
        }

        public addEventListener(view: gui.IView, query: string, event: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {
            let children = view.querySelectorAll(query);
            children.forEach(child => child.addEventListener(event, listener, options));
        }
        
        public getArguments(): Bundle {
            return this[_arguments];
        }

        public setArguments(bundle: Bundle): void {
            this[_arguments] = bundle;
        }

        public onAttach(context: Context): void {
        }
        
        public onAttachFragment(childFragment: Fragment): void {
            
        }

        public onCreate(savedInstanceState?: Bundle): void {
            // restoreChildFragmentState
            if (savedInstanceState) {
                let state = savedInstanceState.getValue<FragmentManagerState>("FRAGMENTS_TAG");
                if (state) {
                    let childFragmentManager = this.getChildFragmentManager();
                    childFragmentManager.restoreAllState(state);
                    childFragmentManager.dispatchCreate();
                }
            }
        }

        public onCreateView(inflater: ILayoutInflater, container: Readonly<gui.IView>, savedInstanceState?: Bundle): Readonly<gui.IView> {
            return;
        }

        public onActivityCreated(savedInstanceState?: Bundle): void {
        }

        public onViewStateRestored(savedInstanceState?: Bundle): void {
        }

        public onSaveInstanceState(savedInstanceState: Bundle): void {
        }

        public onDestroyView(): void {
            
        }
        
        public onDestroy(): void {

        }

        public getChildFragmentManager(): FragmentManager {
            return this[_childFragmentManager] || (this[_childFragmentManager] = new Fragment.FragmentManager(this[_activity], this[_host], this));
        }
        
        public getFragmentManager(): FragmentManager {
            return this[_fragmentManager];
        }
                
        public getParentFragment(): Fragment {
            return this[_fragmentManager][_parentFragment];
        }
        
        public getLayoutInflater(savedInstanceState: Bundle): ILayoutInflater {
            return this[_host].onGetLayoutInflater();
        }
    }

    export type FragmentManager = InstanceType<typeof Fragment.FragmentManager>;
    export const FragmentManager: {
        new(activity: Activity, host: IFragmentHostCallback, parentFragment?: Fragment): FragmentManager;
        detachView(fragment: Fragment, noDestroy?: boolean): void;
        destroyFragment(fragment: Fragment): void;
    } = Fragment.FragmentManager;
    export type FragmentManagerState = ReadonlyArray<FragmentState>;
}