/**
 * Created by jean.rennes on 18/09/2020.
 */
 ///<reference path="Activity.ts" />
 ///<reference path="../adapters/globals/WaitAdapter.ts" />

namespace AFC.Application {
    const _identity = Symbol(),
        _restModel = Symbol();
    const _waitAdapter: AFC.Globals.WaitAdapter = new AFC.Globals.WaitAdapter({});

    export function ShowWaitBar(restModel?: Rest.RestModel, tid?: string) {
        _waitAdapter.push(restModel, tid);
    }

    export function HideWaitBar(restModel?: Rest.RestModel, tid?: string) {
        _waitAdapter.pop(restModel, tid);
    }

    export interface RestActivityOptions {
        url: string;
    }
            
    export class RestActivity extends Activity {
        /** @internal */
        private [_identity]: Rest.IIdentity;
        /** @internal */
        private [_restModel]: Rest.RestModel;
        
        protected _onCreate(icicle?: Bundle): void {
            let intent = this.getIntent(),
                identity: Rest.IIdentity,
                serviceUrl: string,
                restModel: Rest.RestModel;
                
            if (intent) {
                serviceUrl = intent.getValue('serviceUrl');
                identity = intent.getValue('identity');
            }

            if (identity && !identity.isAuthenticated) {
                identity.authorizationPolicy.restart(true);
            }

            restModel = this[_restModel] = new Rest.RestModel(this[_identity] = identity, serviceUrl);
            restModel.on(AFC.Tools.EventType.NetworkBegin, (event: Tools.IEvent<Rest.RestModel, Rest.IAjaxRequest[]>) => event.data.forEach(request => ShowWaitBar(restModel, request.progressId)));
            restModel.on(AFC.Tools.EventType.NetworkComplete, (event: Tools.IEvent<Rest.RestModel, Rest.NetworkStatus[]>) => event.data.forEach(eventData => HideWaitBar(restModel, eventData.request.progressId)));
        }

        public getRestModel(): Rest.RestModel {
            return this[_restModel];
        }
        
        public getAuthorizationPolicy(): Rest.IAuthorizationPolicy {
            return this.getIdentity()?.authorizationPolicy;
        }
        
        public getIdentity(): Rest.IIdentity {
            return this[_identity];
        }
    }
}

