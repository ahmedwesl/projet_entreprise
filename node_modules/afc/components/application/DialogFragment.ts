/**
 * Created by jean.rennes on 21/02/2020.
 */
///<reference path="Fragment.ts" /> 

namespace AFC.Application {
    const _showsDialog = Symbol(),
        _dialog = Symbol();
    
    export class DialogFragment extends Fragment {
        /** @internal */
        private [_showsDialog]: boolean = true;
        /** @internal */
        private [_dialog]: Controls.Dialog;
        
        public onCreate(savedInstanceState?: Bundle): void {
            super.onCreate(savedInstanceState);
            this[_showsDialog] = !this.containerId;
        }
        
        public getLayoutInflater(savedInstanceState: Bundle): ILayoutInflater {
            if (this[_showsDialog]) {
                this[_dialog] = this.onCreateDialog(savedInstanceState);
                return this.getActivity().getLayoutInflater();
            }
            return super.getLayoutInflater(savedInstanceState);
        }
        
        public onCreateDialog(savedInstanceState: Bundle): Controls.Dialog {
            return new Controls.Dialog(this.getActivity());
        }
        
        public onSaveInstanceState(outState: Bundle): void {
            let dialog,
                dialogState;
                
            super.onSaveInstanceState(outState);
            if ((dialog = this[_dialog]) !== null) {
                dialogState = dialog.onSaveInstanceState();
                if (dialogState != null) {
                    outState.putBundle('SAVED_DIALOG_STATE_TAG', dialogState);
                }
            }
        }
        
        public onActivityCreated(savedInstanceState: Bundle): void {
            super.onActivityCreated(savedInstanceState);
            if (!this[_showsDialog]) {
                return;
            }
            let view = this.getView(),
                dialog = this[_dialog];
                
            dialog.setOnDismissListener(this);
            if (view != null) {
                dialog.setContentView(view);
            }
            dialog.setOwnerActivity(this.getActivity());
            /*dialog.setCancelable(mCancelable);
            dialog.setOnCancelListener(this);
            dialog.setOnDismissListener(this);*/
            if (savedInstanceState != null) {
                let dialogState: Bundle = savedInstanceState.getBundle('SAVED_DIALOG_STATE_TAG');
                if (dialogState != null) {
                    dialog.onRestoreInstanceState(dialogState);
                }
            }
        }
        
        public onDestroyView(): void {
            if (this[_dialog] != null) {
                this[_dialog].dismiss();
                this[_dialog] = null;
            }
            super.onDestroyView();
        }
        
        public show(fragmentManager: FragmentManager, tag?: string): void {
            fragmentManager.attachView(null, this, tag);
            this[_dialog] && this[_dialog].show();
        }
        
        public dismiss(): void {
            if (this[_dialog] != null) {
                this[_dialog].dismiss();
                this[_dialog] = null;
            }
            FragmentManager.detachView(this);
        }
        
        public onViewStateRestored(savedInstanceState?: Bundle): void {
            super.onViewStateRestored(savedInstanceState);
            if (this[_dialog] != null) {
                this[_dialog].show();
            }
        }
        
        public onDismiss(dialog: Controls.Dialog): void {
            // dialog has been dismissed
            this[_dialog] = null;
            this.dismiss();
        }
        //void onCancel (DialogInterface dialog)
    }
}