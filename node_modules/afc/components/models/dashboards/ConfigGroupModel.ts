///<reference path="../../AFC.ts" />
///<reference path="../../models/data/Data.ts" />

namespace AFC.Dashboards {

    const KEYWORD_MODE_COLLAPSED = "collapsed";
    export interface IITemData { [key: string]: any };
    export interface IITemConfig { dataItem: IITemData, dataItemIndex: number };

    export class ConfigGroupModel extends Tools.EventSink implements AFC.Data.IDataSource {
        protected _curSel: number = null;
        protected _list: any[] = [];
        protected _defaultList: any[] = [];
        protected _mode: string = KEYWORD_MODE_COLLAPSED;
        protected _sortedList: any[] = [];
        protected _fnCompare?: (a: any, b: any) => number = null;
        public _maxListSize = 10;

        public maxItem: number;

        constructor(handlers: any, curSelDefault?: number, maxListSize?: number, maxItem?: number) {
            super();

            this._curSel = curSelDefault ?? null;
            this._maxListSize = maxListSize ?? this._maxListSize;
            this._fnCompare = handlers.fnCompare ?? this._fnCompare;
            this.formatItem = handlers.fnFormatItem ?? this.formatItem;
        }

        public addItem(item: any) {
            const model = this;

            if (void 0 === this._list.find(e => 0 === model._compareItems(e, item))) {
                this._list.push(item);
                this._sortList();
            }
        }

        public get maxListSize() {
            return this._maxListSize;
        }

        public set maxListSize(maxListSize: number) {
            let index = this._curSel ?? 0;
            let item = this.item(index, true);

            this._maxListSize = maxListSize;
            this._list = this._list.slice(0, this._maxListSize);
            this.select(item.dataItem);
            this._sortList();
        }

        public get length(): number {
            return this._mode === KEYWORD_MODE_COLLAPSED && this.maxItem !== void 0 ? 
                Math.min(this.maxItem, this._sortedList.length) : this._sortedList.length;
        }

        public set mode(collapse: string) {
            this._mode = collapse ?? "";
        }

        public get mode() {
            return this._mode;
        }

        public get list(): any[] {
            return this._list;
        }

        public set selection(index: number) {
            this._curSel = index;
        }

        public get selection() {
            return this._curSel;
        }

        public get fnCompare() {
            return this._fnCompare;
        }

        public set fnCompare(fnCompare: (a: any, b: any) => number) {
            this._fnCompare = fnCompare;
        }

        /**
         * Construct data from default list and storage, then sort
         * @returns ConfigGroupModel self for chaining
         */
        protected _buildData(): ConfigGroupModel {
            const model = this;

            if (model._list.length === 0) {
                model._list = model.getDefaultList();
            }

            model._sortList();

            return model;
        }

        /**
         * Select item from group
         * @param item
         * @returns ConfigGroupModel self for chaining
         */
        public select(item: IITemData): ConfigGroupModel {
            const model = this;
            let index: number;

            if (item) {
                index = this._list.findIndex(e => model._fnCompare(e, item) === 0);

                if (index > 0) {
                    var tmp = model._list[index];
                    model._list.splice(index, 1);
                    model._list.unshift(tmp);
                } else if (index === -1) {
                    model._list.unshift(item);
                    model._list = model._list.slice(0, model.maxListSize);
                    model._sortList();
                    this.fireEvent(Tools.EventType.Dirty);
                }

                model._curSel = model._selectItem(item);
            }

            return model;
        }

        /**
         * Format item for display, eg. override for Config list
         * @param item
         * @returns
         */
        public formatItem(item: any): any {
            return item;
        }

        /**
         * Return item value in sortedList or list, according to given index
         * @param itemIndex
         * @param rawIndex
         * @returns
         */
        public item(itemIndex: number, rawIndex?: boolean): IITemConfig {
            var item;

            if (rawIndex || this.mode !== KEYWORD_MODE_COLLAPSED) {
                if (itemIndex >= 0 && itemIndex < this._sortedList.length) {
                    item = this._sortedList[ itemIndex ];
                }
            } else {
               item = this._list[ itemIndex ];
               itemIndex = this._selectItem(item);
            }

            return { dataItem: this.formatItem(item), dataItemIndex: itemIndex };
        }

        private _selectItem(item: any): number {
            const model = this;

            return model._list.findIndex(
                (__e, __i) => {
                    return model._compareItems(item, model.item(__i, true).dataItem) === 0;
                });
        }

        private _compareItems(a: any, b: any): number {
            if (this._fnCompare) {
                return this._fnCompare(a, b);
            }

            if (a < b) { return -1; }
            if (a > b) { return 1; }

            return 0;
        }

        private _sortList(): ConfigGroupModel {
            this._sortedList = this.copyList(this._list);
            this._sortedList.sort(this._compareItems.bind(this));

            return this;
        }

        public copyList(list: any) {
            return JSON.parse(JSON.stringify(list));
        }

        public setDefaultList(data: Array<any>): ConfigGroupModel {
            this._defaultList = data;
            this.setList(this._defaultList);

            return this;
        }

        public getDefaultList(): Array<any> {
            return this._defaultList;
        }

        public setList(data: Array<any>): ConfigGroupModel {
            this._list = data;
            this._buildData();

            return this;
        }
    }

};