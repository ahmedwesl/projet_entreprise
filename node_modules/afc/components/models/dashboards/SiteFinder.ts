/**
 * Created by jean.rennes on 16/10/2015.
 */
///<reference path="Global.ts" />
///<reference path="Dashboard.ts" />
///<reference path="../data/Global.ts" />
/*
namespace AFC.Dashboards {
    interface ISiteFinderDescriptor {
        startRowIndex: number;
        maximumRows: number;
        columns: {
            name: string;
            type: string;
        }[];
        values: any[][];
    }

    interface ISiteFinderData {
        columns: AFC.Data.IDBColumn[];
        values?: any[][];
        totalRows?: number;
    }


    export class SiteFinderModel extends Tools.EventSink {
        private _zone: IZone;
        private _useContext: boolean;
        private _pattern: string;
        private _columns: string[];

        private _sequences: number[];
        private _siteData: ISiteFinderData;

        private _clear():void {
            delete this._siteData;
            delete this._sequences;
            this.fireEvent(Tools.EventType.Dirty);
        }

        private _onZoneDirty():void {
            this._clear();
        }

        public set zone(value: IZone) {
            if (this._zone !== value) {
                if (this._zone) this._zone.off(Tools.EventType.Dirty, this._onZoneDirty, this);
                if (this._zone = value) this._zone.on(Tools.EventType.Dirty, this._onZoneDirty, this);
                this._clear();
            }
        }

        public get zone(): IZone {
            return this._zone;
        }

        public set pattern(value:string) {
            if (this._pattern !== value) {
                this._pattern = value;
                this._clear();
            }
        }

        public get pattern():string {
            return this._pattern || '';
        }

        public set useContext(value:boolean) {
            if (this._useContext !== value) {
                this._useContext = value;
                this._clear();
            }
        }

        public get useContext():boolean {
            return !!this._useContext;
        }


        public set columnNames(value:string[]) {
            if (this._columns !== value) {
                this._columns = value;
                this._clear();
            }
        }

        protected _onAlways(sequence:number, jqXHR: JQueryXHR, textStatus: string): void {
            let sequences:number[] = this._sequences;
            let i: number;

            if (sequences && ((i = sequences.indexOf(sequence)) != -1))
            {
                let descriptor: ISiteFinderDescriptor = jqXHR.responseJSON;

                sequences.splice(i, 1);
                if (descriptor) {
                    let siteData: ISiteFinderData = this._siteData || (this._siteData = {columns: Data.mapDataColumns(descriptor)});
                    let values: any[][] = siteData.values || (siteData.values = []);
                    let iStart:number = descriptor.startRowIndex || 0;
                    let item:any[];
                    let input:any[][] = descriptor.values;

                    i = 0;
                    for (item of input) {
                        values[iStart + i++] = item;
                    }
                    if (i < (descriptor.maximumRows || 0)) {
                        siteData.totalRows = iStart + i;
                    }
                }
                if (!sequences.length)
                {
                    delete this._sequences;
                    this.fireEvent(Tools.EventType.UserEvent);
                }
            }
        }

        private queryValues(start: number, count: number):any[][] {
            let siteData: ISiteFinderData = this._siteData;
            let values: any[][];
            let ret:any[][];

            if (siteData && (values = siteData.values)) {
                let item:any[];

                ret = [];
                for (let i: number = 0; (i < count); ++i) {
                    item = values[start + i];
                    if (item === void 0) {
                        return (siteData.totalRows === void 0) || ((start + i) < siteData.totalRows) ? void 0 : ret;
                    }
                    else
                        ret.push(item);
                }
            }
            return ret;
        }

        private _request(columns: string[], start: number = 0, count: number = 0): void {
            let h = (request: Rest.IAjaxRequest)=> {
                let options: Rest.IAjaxOptions = request.options;
                let data: {
                    columns: ReadonlyArray<string>,
                    searchText: string,
                    startRowIndex: number,
                    maximumRows: number
                } = request.options.data;

                options.always = this._onAlways.bind(this);
                data.columns = columns;
                this._pattern && (data.searchText = this._pattern);
                (start!==void 0) && (data.startRowIndex = start);
                (count!==void 0) && (data.maximumRows = count);
                return request.call(`/sites/find`);
            };
            let sequence: number = this._useContext ?
                this._zone.createRequestAsync(h, this._request):
                h(this._zone.createRequestSync());
            (this._sequences || (this._sequences = [])).push(sequence);
        }

        public requestValues(start: number, count: number, callback:(columns: Data.IDBColumn[], values:any[][], start: number, count: number)=>void, context?:any):void {
            let values:any[][] = this.queryValues(start, count);
            let h:(event:Tools.IEvent)=>void;

            if (values) {
                h = (/*event: Tools.IEvent*)=>{
                    callback.call(context, this._siteData.columns, values, start, count);
                }
                (!this._sequences || (this._sequences.length === 0))&&this.fireEvent(Tools.EventType.UserEvent);
            }
            else if (this._zone) {
                h = (/*event: Tools.IEvent*)=>{
                    callback.call(context, this._siteData.columns, this.queryValues(start, count), start, count);
                }

                if (this._columns && this._columns.length)
                    this._request(this._columns, start, count);
                else if (this._zone) {
                    let h2 = (sites: ISitesData)=>this._request(sites.columns.map(column=>column.name), start, count);;
                    this._zone.requestSites(h2, this);
                }
            }
            h&&this.once(Tools.EventType.UserEvent, h, callback, context);
        }
    }
}*/