/**
 * Created by jean.rennes on 02/10/2015.
 */
///<reference path="../../views/Global.ts" />

namespace AFC.Dashboards {
    export const enum DataQualifier {
        none = 0,
        code = 1,
        name = 2,
        bookmark = 3,
        partition = 4,	
        proximity = 5,
        cannibalizationPct1 = 0x10006,
        cannibalizationPct100 = 0x20006,
        cannibalizationCount = 0x40006,
        cannibalizationReverse = 0x80006,
        scoringValue = 0x10007,
        scoringRank = 0x20007,
        targetingCumulative = 0x10008,
        targetingPercentage = 0x20008,
        targetingRank = 0x40008,
        targetingpartition = 0x80008
    }

    export type IDashboardProperty = readonly [string, string, any];

    export interface IGeographicalLevel {
        id: string;
        name: string;
        version?: string;
    }

    export interface IGeographicalLevels {
        detailed: IGeographicalLevel;
        aggregated: IGeographicalLevel;
    }

    export interface ISitesTable {
        codecolumn: string;
        namecolumn: string;
        table: string;
    }

    export interface IZoneBaseDescriptor<T extends ZoneType = ZoneType> {
        readonly id: string;
        readonly name: string;
        readonly type: T;
    }

    export interface ISubsetDescriptor extends IZoneBaseDescriptor<ZoneType.subset | ZoneType.subsetUnion | ZoneType.outOfZone> {
        readonly value: string;
    }
    
    export const enum ZoneReaffectStorage {
        none,
        incremental,
        complete,
        editable
    }
    
    export interface IZonePartition {
        readonly id: string;
        readonly name: string;
        readonly districtingTable: string;
        readonly districtingMode: ZoneReaffectStorage;
        readonly subsets: ReadonlyArray<ISubsetDescriptor>;
    }
    
    export interface IZoneDescriptor<T extends ZoneType.radius | ZoneType.unknown | ZoneType.isodistance | ZoneType.isochrone | ZoneType.predefined | ZoneType.administrative | ZoneType.selection | ZoneType.dynamicMarket | ZoneType.surrounding | ZoneType.bulkMail = ZoneType.radius | ZoneType.unknown | ZoneType.isodistance | ZoneType.isochrone | ZoneType.predefined | ZoneType.administrative | ZoneType.selection | ZoneType.dynamicMarket | ZoneType.surrounding | ZoneType.bulkMail> extends IZoneBaseDescriptor<T> {
        readonly dashboard: IDashboardDescriptor;
        readonly properties: ReadonlyArray<IDashboardProperty>;
        readonly geographicalLevels: Readonly<IGeographicalLevels>;
        readonly cluster: string;
        readonly dataNodes: ReadonlyArray<IDataNode>;
        readonly hasCannibalization: boolean;
        readonly sites: {
            columns: ReadonlyArray<Data.IDBColumn>;
        };
    }

    export interface IRadiusAreaDescriptor extends IZoneDescriptor<ZoneType.radius> {
        readonly sitesTable: Readonly<ISitesTable>;
        readonly bounds: ReadonlyArray<number>;
        readonly outOfZoneExtraBound: number;
        readonly unit: TradeArea.LengthUnit;
        readonly useCentroid: boolean;
        readonly forceSurroundingToZero: boolean;
        readonly partition: IZonePartition;
    }

    export interface ITravelTimeAreaDescriptor<T extends ZoneType.isodistance | ZoneType.isochrone = ZoneType.isodistance | ZoneType.isochrone> extends IZoneDescriptor<T> {
        readonly sitesTable: Readonly<ISitesTable>;
        readonly bounds: ReadonlyArray<number>;
        readonly outOfZoneExtraBound: number;
        readonly modeOfTransport: TradeArea.ModeOfTransport;
        readonly anchorThreshold: number;
        readonly mode: TradeArea.TravelMode;
        readonly tollFreeOnly: boolean;
        readonly reverseMode: boolean;
        readonly forceSurroundingToZero: boolean;
        readonly perSiteConfiguration?: string;
        readonly partition: IZonePartition;
    }

    export interface IIsodistanceAreaDescriptor extends ITravelTimeAreaDescriptor<ZoneType.isodistance> {
        readonly unit: TradeArea.LengthUnit;
    }

    export interface IIsochroneAreaDescriptor extends ITravelTimeAreaDescriptor<ZoneType.isochrone> {
        readonly unit: TradeArea.TimeUnit;
    }

    export interface IPredefinedAreaDescriptor extends IZoneDescriptor<ZoneType.predefined> {
        readonly sitesTable: Readonly<ISitesTable>;
        readonly areaTable: string;
        readonly siteCodeColumn: string;
        readonly geographicalCodeColumn: string;
        readonly partitionColumn: string;
        readonly partition: IZonePartition;
    }

    export interface IAdministrativeAreaDescriptor extends IZoneDescriptor<ZoneType.administrative> {
    }

    export interface ISurroundingAreaDescriptor extends IZoneDescriptor<ZoneType.surrounding> {
        readonly sitesTable: Readonly<ISitesTable>;
    }
    
    export interface IBulkMailAreaScore {
        weight: number;
        name: string;
        id: string;
    }
    
    export interface IBulkMailAreaTarget {
        limit: {
            percent: boolean,
            value?: number,
            column?: string
        };
    }
    
    export interface IBulkMailAreaDescriptor extends IZoneDescriptor<ZoneType.bulkMail> {
        readonly sitesTable: Readonly<ISitesTable>;
        readonly partition: IZonePartition;
        readonly scores: ReadonlyArray<IBulkMailAreaScore>;
        readonly target: IBulkMailAreaTarget;
    }

    export interface IZoneConfiguration<T extends ZoneType.radius | ZoneType.isodistance | ZoneType.isochrone | ZoneType.predefined | ZoneType.surrounding | ZoneType.bulkMail = ZoneType.radius | ZoneType.isodistance | ZoneType.isochrone | ZoneType.predefined | ZoneType.surrounding | ZoneType.bulkMail> {
        type?: T;
        properties?: {[key: string]: any};
        geographicalLevels?: {
            detailed?: string;
            aggregated?: string;
        };
        perSiteConfiguration?: string;
    }

    export interface IRadiusAreaConfiguration extends IZoneConfiguration<ZoneType.radius> {
        sitesTable?: ISitesTable;
        bounds?: ReadonlyArray<number>;
        outOfZoneExtraBound?: number;
        unit?: TradeArea.LengthUnit;
        useCentroid?: boolean;
        forceSurroundingToZero?: boolean;
    }

    export interface ITravelTimeAreaConfiguration<T extends ZoneType.isodistance | ZoneType.isochrone = ZoneType.isodistance | ZoneType.isochrone> extends IZoneConfiguration<T> {
        sitesTable?: ISitesTable;
        bounds?: ReadonlyArray<number>;
        outOfZoneExtraBound?: number;
        modeOfTransport?: TradeArea.ModeOfTransport;
        anchorThreshold?: number;
        mode?: TradeArea.TravelMode;
        tollFreeOnly?: boolean;
        reverseMode?: boolean;
        forceSurroundingToZero?: boolean;
        perSiteConfiguration?: string;
    }

    export interface IIsodistanceAreaConfiguration extends ITravelTimeAreaConfiguration<ZoneType.isodistance> {
        unit?: TradeArea.LengthUnit;
    }

    export interface IIsochroneAreaConfiguration extends ITravelTimeAreaConfiguration<ZoneType.isochrone> {
        unit?: TradeArea.TimeUnit;
    }

    export interface IPredefinedAreaConfiguration extends IZoneConfiguration<ZoneType.predefined> {
        sitesTable?: ISitesTable;
        areaTable?: string | Data.IEmbeddedCreation;
        siteCodeColumn?: string;
        geographicalCodeColumn?: string;
        partitionColumn?: string;
    }

    export interface ISurroundingAreaConfiguration extends IZoneConfiguration<ZoneType.surrounding> {
        sitesTable?: ISitesTable;
    }

    export interface IBulkMailAreaConfiguration extends IZoneConfiguration<ZoneType.bulkMail> {
        sitesTable?: ISitesTable;
        scores?: IBulkMailAreaScore[];
        target?: IBulkMailAreaTarget;
    }

    export interface IViewDescriptor {
        readonly id: string;
        readonly name: string;
        readonly type: ViewType;
        readonly properties: ReadonlyArray<IDashboardProperty>;
        readonly dashboard: IDashboardDescriptor;
    }
    
    export interface IDataNode {
        id: string;
        qualifier?: DataQualifier;
        name?: string;
        children?: IDataNode[];
    }
    
    export interface IZoneBaseData {
        readonly id: string;
        readonly name: string;
        readonly type: string;
    }

    export interface IZoneSubsetData extends IZoneBaseData {
        readonly value: any;
    }

    export interface IZoneData extends IZoneBaseData {
        readonly cluster: string;
        readonly properties: ReadonlyArray<IDashboardProperty>;
        readonly geographicalLevels?: Readonly<IGeographicalLevels>;
        readonly sites: {
            readonly columns: ReadonlyArray<{
                name: string;
                type: string;
            }>;
            readonly current: number | string;
        };
        readonly dataNodes: IDataNode[];
        readonly noCannibalization: boolean;
    }

    export interface ISitesData {
        readonly current: any;
        readonly columns: ReadonlyArray<{
            readonly name: string;
            readonly alias: string;
            readonly type: string;
            readonly size: number;
        }>;
    }
    
    export interface IZoneRedistrictData {
        readonly value: {readonly [key: string]: ReadonlyArray<any>};
        readonly zone: string;
        readonly site?: string|number;
    }    
    
    export interface IContextZone {
        id: string;
        type?: string;
        geographicalLevels?: {
            detailed?: string;
            aggregated?: string;
        };
        properties?: {[key: string]: any};
        perSiteConfiguration?: string;
        areaTable?: string | Data.IEmbeddedCreation;
    }

    export interface IContextRadius extends IContextZone {
        sitesTable?: ISitesTable;
        bounds?: ReadonlyArray<number>;
        outOfZoneExtraBound?: number;
        unit?: string;
        useCentroid?: boolean;
        forceSurroundingToZero?: boolean;
    }

    export interface IContextTravelTime extends IContextZone {
        sitesTable?: ISitesTable;
        bounds?: ReadonlyArray<number>;
        outOfZoneExtraBound?: number;
        modeOfTransport?: string;
        anchorThreshold?: number;
        mode?: string;
        tollFreeOnly?: boolean;
        reverseMode?: boolean;
        forceSurroundingToZero?: boolean;
        perSiteConfiguration?: string;
        unit?: string;
    }

    export interface IContextPredefinedArea extends IContextZone {
        sitesTable?: ISitesTable;
        areaTable?: string | Data.IEmbeddedCreation;
        siteCodeColumn?: string;
        geographicalCodeColumn?: string;
        partitionColumn?: string;
    }

    export interface IContextSurroundingArea extends IContextZone {
        sitesTable?: ISitesTable;
    }

    export interface IContextBulkMailArea extends IContextZone {
        sitesTable?: ISitesTable;
        scores?: IBulkMailAreaScore[];
        target?: IBulkMailAreaTarget;
    }

    export interface IContextView {
        id: string;
    }
    
    export interface IContextSpreadsheet extends IContextView {
        content: Globals.IContextSheet;
    }
    
    export interface IDashboardContext extends Rest.ICreationContext {
        zones?: IContextZone[];
        views?: IContextView[];
        reports?: IContextReport[];
    }
    
    export interface IDashboardContextDataBase {
        sites?: {
            zone: string;
            site: any;
        }[];
        districting?: IZoneRedistrictData[];
        context?: IDashboardContext;
    }
    
    export type IDashboardContextData = Rest.IRequestBody & IDashboardContextDataBase;
    
    export interface IGlobalDashboardContextData extends IDashboardContextDataBase, Rest.ICreationContext {
        id?: string;
        reports?: Array<string>;
    }
    
    export type IMultiDashboardContextData = Rest.IRequestBody<Rest.ICreationContext & {dashboardCreations: {[key: string]: IGlobalDashboardContextData};}>;
    
    export interface IViewModel extends Readonly<Controls.IListItem>, Globals.ILabelProvider, Globals.ILegendModel {
        readonly properties: ReadonlyArray<IDashboardProperty>;
        readonly dashboard: IDashboard;
        setId(value?: string): void;
        dashboardModel: DashboardModel;
        getType(): Promise<ViewType>;
    }

    export interface IMapModel extends IViewModel {
        getMapTemplate(): Promise<string>;
        getDescriptors(): Promise<ReadonlyArray<IMapLayerDescriptor>>;
        getLayerCount(): Promise<number>;
        getLayer(indice: number): Promise<Globals.IMapLayerStaticModel>;
        getBbox(): Promise<Tools.Geometry.Rectangle>;
    }

    export interface IGridModelEventData {
        
    }

    export interface IGridModel extends IViewModel {
        getGridApp(): Promise<Globals.IGridApp>;
        getForeignDataModel(): Data.IDataModel;
    }

    export interface IReportContentData {
        readonly tokens: {
            [key: string]: string;
        }
    }

    export interface IChartModel extends IViewModel {
        readonly drawable: boolean;
        getImage(width: number, height: number): Promise<string|void>;
        getChartData(): Promise<Globals.IChartModel|void>;
    }
    
    export interface IReportModel extends IViewModel {
        getImage(width: number, height: number, page?: number): Promise<string|void>;
        getReportMetadata(): Promise<Globals.IReportMetadata|void>;
        getReportData(): Promise<IReportContentData|void>;
    }
    
    export const enum RendererType {
        unknown,
        preview,
        infoPreview,
        legend
    }

    enum RendererTypeLookup {
        unknown = RendererType.unknown,
        preview = RendererType.preview,
        infoPreview = RendererType.infoPreview,
        legend = RendererType.legend
    }

    export function rendererType(value: RendererType): string;
    export function rendererType(value: string): RendererType;
    export function rendererType(value: RendererType|string): RendererType|string {
        return (<any>RendererTypeLookup)[value];
    }

    export interface IDashboardViewReportObject extends Globals.IReportObject {
        readonly type: Globals.ReportObjectType.dashboardView;
        readonly viewId: string;
        readonly rendererType: RendererType;
    }
    
    export interface IDashboardViewLegendReportObject extends IDashboardViewReportObject {
        readonly horizontal: boolean;
    }
    

    export type ISpreadSheetModel = IGridModel&Data.IDataContainerProvider;
}