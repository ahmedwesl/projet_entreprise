/**
 * Created by jean.rennes on 04/04/2016.
 */
///<reference path="Global.ts" />
///<reference path="../rest/RestModel.ts" />

namespace AFC.Data {
    export interface IUpdateCommand {
        table: string;
        events: IModificationEvents;
        session?: string;
    }

    export interface IUpdateCommandResult {
        result: number;
        events: IModificationEvents;
        invalidate: AFC.Rest.IDataUpdate[],
        /* interactive mode */
        status: {
            errors: {
                code: number,
                text: string
            }[],
            warnings: {
                code: number,
                text: string
            }[], 
            messages: {
                code: number,
                text: string
            }[]
        }
        /* end interactive mode */
    }
    
    export class Updates extends Rest.DataCreator {
        protected _restModel: Rest.RestModel;

        constructor(restModel: Rest.RestModel) {
            super(restModel);
            this._restModel = restModel;
        }
        
        public run(commands: IUpdateCommand[], callback: (queries: IUpdateCommandResult[])=> any, force?: boolean): number {
            let request = this._restModel.createAjaxRequest<{
                commands: IUpdateCommand[];
                context: Rest.ICreationContext;
                force: boolean;
            }>('/databases/update', false, {builder: this, modifierOptions: {noReplacements: true}});
            let options = request.options;
            let data = options.data;

            options.always = (sequence: number, jqXHR: JQueryXHR, textStatus: string)=> {
                callback(jqXHR.responseJSON);
            };
            data.commands = commands;
            force && (data.force = force);
            return request.call();
        }
    }
}