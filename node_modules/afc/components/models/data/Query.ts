/**
 * Created by jean.rennes on 04/04/2016.
 */
///<reference path="../rest/RequestBuilder.ts" />

namespace AFC.Data {
    export interface IQueryCommand {
        commandText: string;
        maximumRows?: number;
        parameters?: { [key: string]: number | boolean | string | GeoJSON.GeometryObject};
    }

    export class Queries extends Rest.RequestBuilder<Rest.IRequestBody<Rest.IDataUpdateContext>> {
        public readonly restModel: Rest.RestModel;

        constructor(restModel: Rest.RestModel, base: Rest.IContextModifier = restModel) {
            super(base);
            this.restModel = restModel;
        }

        public async createAjaxRequest(commands: IQueryCommand[], format: Rest.RestFormat = Rest.RestFormat.json): Promise<Rest.IAjaxRequest> {
            await this.load();
            let request = this.restModel.createAjaxRequest<{
                commands: IQueryCommand[];
                context: Rest.IDataUpdateContext;
            }>(`/databases/query`, false, {builder: this});
            let options = request.options;
            let data = options.data;

            format && (options.format = format);
            data.commands = commands;
            options.converter = (text: string) => {
                let value: Parameters<typeof Data.updateTableData>[0][] = JSON.parse(text);
                return value ? value.map(item => Data.updateTableData(item)) : [];
            };
            return request;
        }
 
        /** @deprecated : use getDataTable instead */
        public requestData(commands: IQueryCommand[], callback: (queries: IDataTable[]) => any, context?: any, format?: Rest.RestFormat): void {
            this.getDataTable(commands, format).then(queries => callback.call(context, queries));
        }
        
        public getDataTable(commands: IQueryCommand[], format?: Rest.RestFormat): Promise<IDataTable[]> {
            return new Promise(async (resolve: (queries: IDataTable[]) => void) => {
                let request: Rest.IAjaxRequest = await this.createAjaxRequest(commands.map((command: IQueryCommand)=> {
                    let local: IQueryCommand;

                    if (command.hasOwnProperty('maximumRows')) {
                        local = command;
                    } else {
                        local = {
                            commandText: command.commandText,
                            maximumRows: 10000
                        };
                        command.parameters && (local.parameters = command.parameters);
                    }
                    return local;
                }));
                request.options.always = (sequence: number, jqXHR: JQueryXHR, textStatus: string) => {
                    resolve(jqXHR.responseJSON);
                };
                request.call();
            });            
        }
    }
}