/**
 * Created by jean.rennes on 11/02/2019.
 */
///<reference path="../../helpers/Tools.ts" />
///<reference path="DataSource.ts" />

namespace AFC.Data {
    export function compareValue(v0: any, v1: any): number {
        return ((v0<v1) && -1) || ((v0>v1) && 1) || 0;
    }
    
    function _compareValueWithRow(column: number, row: ReadonlyArray<any>, key: [any]): number {
        return compareValue(row[column], key[0]);
    }
    
    function _compareValuesWithRow(columns: ReadonlyArray<number>, row: ReadonlyArray<any>, key: ReadonlyArray<any>): number {
        let ret: number = 0;

        for (let i: number = 0, iLength: number = columns.length; !ret&&(i < iLength); ++i) {
            ret = compareValue(row[columns[i]], key[i]);
        }
        return ret;
    }

    function _compareRowValue(column: number, row0: ReadonlyArray<any>, row1: ReadonlyArray<any>): number {
        return compareValue(row0[column], row1[column]);
    }

    export function compareRows(columns: ReadonlyArray<number>, row0: ReadonlyArray<any>, row1: ReadonlyArray<any>): number {
        let ret: number = 0;

        for (let i: number = 0, iLength: number = columns.length, column: number; !ret&&(i < iLength); ++i) {
            ret = compareValue(row0[column = columns[i]], row1[column]);
        }
        return ret;
    }
        
    export class RowComparator {
        public readonly getKeyFromRow: (row: ReadonlyArray<any>)=> ReadonlyArray<any>;
        public readonly compareKey: (row: ReadonlyArray<any>, key: ReadonlyArray<any>) => number;
        public readonly compareRow: (row0: ReadonlyArray<any>, row1: ReadonlyArray<any>) => number;

        constructor(columns: ReadonlyArray<number>) {
            if (columns.length > 1) {
                this.compareKey =  _compareValuesWithRow.bind(null, columns);
                this.compareRow =  compareRows.bind(null, columns);
            } else {
                this.compareKey =  _compareValueWithRow.bind(null, columns[0]);
                this.compareRow = _compareRowValue.bind(null, columns[0]);
            }
            this.getKeyFromRow = (row: ReadonlyArray<any>): ReadonlyArray<any> => columns.map((i: number) => row[i]);
        }
    }
    
    export class Index extends RowComparator {
        public readonly values: ReadonlyArray<any>[];

        constructor(columns: ReadonlyArray<number>, rows: ReadonlyArray<ReadonlyArray<any>>) {
            super(columns);
            (this.values = rows.slice(0)).sort(compareRows.bind(null, columns));
        }
    }
    
    export class UniqueIndex extends Index {
        public clone(): UniqueIndex {
            let clone: Mutable<UniqueIndex> = Object.create(this.constructor.prototype);
            clone.values = this.values.slice(0);
            clone.compareKey = this.compareKey;
            clone.compareRow = this.compareRow;
            clone.getKeyFromRow = this.getKeyFromRow;
            return clone;
        }
        
        public find(key: ReadonlyArray<any>): number {
            let i: number = Tools.lower_bound(this.values, key, this.compareKey);
            return (i >= this.values.length) || this.compareKey(this.values[i], key) ? -1 : i;
        }
        
        public lowerKeyBound(value: any): number {
            return Tools.lower_bound(this.values, value, this.compareKey);
        }
        
        public indexOf(row: ReadonlyArray<any>): number {
            let i: number = Tools.lower_bound(this.values, row, this.compareRow);
            return (i >= this.values.length) || this.compareRow(this.values[i], row) ? -1 : i;
        }
        
        public lowerBound(row: ReadonlyArray<any>): number {
            return Tools.lower_bound(this.values, row, this.compareRow);
        }
        
        public insert(indice: number, row: ReadonlyArray<any>): void {
            this.values.splice(indice, 0, row);
        }

        public modify(indice: number, row: ReadonlyArray<any>): void {
            this.values[indice] = row;
        }
        
        public delete_(indice: number): void {
            this.values.splice(indice, 1);
        }
    }
}