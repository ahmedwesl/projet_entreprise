/**
 * Created by jean.rennes on 29/09/2015.
 */
///<reference path="DataCreation.ts" />

namespace AFC.Rest {
    const _modifiers = Symbol();

    export interface IDataUpdate {
        readonly reference: string;
        readonly replacement: any;
    } 
    
    class DataUpdates {
        public readonly index: {[key: string]: any} = {};
        
        public push(id: string, replacement: any): void {
            this.index[id] = replacement;
        }
        
        public toJSON(): any {
            return Object.entries(this.index).map(([key, entry]) => ({id: key, replacement: entry}));
        }
    } 
    
    export interface IDataUpdateContext extends ICreationContext {
        dataUpdates?: DataUpdates;
    }
        
    export class RequestBuilder<T extends IRequestBody<IDataUpdateContext> = IRequestBody<IDataUpdateContext>> extends DataCreator implements IContextModifier<T>  {
        /** @internal */        
        private [_modifiers]: IContextModifier<T>[];

        public get modifiers(): IContextModifier<T>[] {
            return this[_modifiers];
        }

        public pushModifier<M extends IContextModifier<T> = IContextModifier<T>>(modifier: M): M {
            (this[_modifiers] || (this[_modifiers] = [])).some(item => item === modifier) || this[_modifiers].push(modifier);
            return modifier;
        }

        public popModifier(modifier: IContextModifier<T>): void {
            this[_modifiers] && (this[_modifiers] = this[_modifiers].filter(item => item !== modifier));
        }

        public async load(options?: IContextModifierOptions): Promise<void[]> {
            await super.load(options);
            return this[_modifiers] && Promise.all(this[_modifiers].map(modifier => modifier.load && modifier.load(options)));
        }

        public override updateBody(body: T, options?: IContextModifierOptions): T {
            super.updateBody(body);
            if (!options?.noReplacements) {
                this[_modifiers]?.forEach((modifier: IContextModifier) => modifier.updateBody(body, options));
            }
            return body;
        }

        public clone(): RequestBuilder<T> {
            let clone = <RequestBuilder<T>>super.clone();
            this[_modifiers] && (clone[_modifiers] = this[_modifiers].slice(0));
            return clone;
        }
        
        public release(): void {
            this[_modifiers]?.forEach((modifier: IContextModifier) => modifier.release && modifier.release());
            delete this[_modifiers];
        }
    }
    
    function _updateBody<T extends IRequestBody<IDataUpdateContext> = IRequestBody>(body: T, reference: string, replacement: any) {
        if (replacement) {
            ((body.context || (body.context = {})).dataUpdates || (body.context.dataUpdates = new DataUpdates)).push(reference, replacement);
        }
    }
    
    export class ContextSubstitute<T extends IRequestBody<IDataUpdateContext> = IRequestBody> implements IContextModifier<T>, IDataUpdate {
        public readonly reference: string;
        public replacement: string;
        
        constructor(reference: string, replacement?: string) {
            this.reference = reference;
            this.replacement = replacement;
        }
        
        public updateBody(body: T): any {
            _updateBody(body, this.reference, this.replacement);
        }
    }
        
    export class ResourceSubstitute<T extends IRequestBody = IRequestBody> implements IContextModifier<T>, IDataUpdate  {
        protected _resource: DataResource<DataCreator>;
        protected _replacement: string;
        public readonly reference: string;
        public readonly dataCreator: DataCreator;
        
         constructor(dataCreator: DataCreator, reference: string) {
            this.reference = reference;
            this.dataCreator = dataCreator;
        }
        
        public get replacement(): string {
            return this._resource?.id || this._replacement;
        }
        
        public set replacement(value: string) {
            this.release();
            this._replacement = value;
        }
        
        public create(creation: AFC.Data.IDataCreation): void {
            delete this._replacement;
            if (!this._resource) {
                this._resource = new DataResource<RequestBuilder<T>>();
            }
            this._resource.create(this.dataCreator, creation);
        }

        public updateBody(body: T): any {
            _updateBody(body, this.reference, this.replacement);
        }
        
        public release(): void {
            this._resource && this._resource.release();
        }        
    }    
}