///<reference path="../../AFC.ts" />
///<reference path="../rest/RestModel.ts" />
///<reference path="./BMEntity.ts" />
///<reference path="./BMStore.ts" />
///<reference path="./BMZone.ts" />
///<reference path="./BMCampaign.ts" />

namespace AFC {
    export namespace BulkMail {

        export interface ICampaignSocialRestData extends ICampaignRestData {
            cost?:              {
                budget: number
            },
            routeStatus:        BMCampaignRouteStatus,
            routeStatusDetail?: string;
        }
        
        export class BMCampaignSocial extends BMCampaign {
            private _routeStatus:       BMCampaignRouteStatus = BMCampaignRouteStatus.sleeping;
            private _routeStatusDetail: string;
            public budget:              number;

            constructor(item?: ICampaignSocialRestData, isNew?: boolean) {
                super(item, isNew);

                if (item) {
                    this._routeStatus       = item.routeStatus;
                    this._routeStatusDetail = item.routeStatusDetail;
                    this.budget             = item.cost?.budget || 0;
                }
            }

            public get routeStatusDetail() { return this._routeStatusDetail; }
            public get routeStatus() { return this._routeStatus; }
            public set routeStatus(routeStatus: BMCampaignRouteStatus) { this._routeStatus = routeStatus; }
            
            public override hasErrorSegments(): boolean {
                return false;
            }

            public override copyZonesFromCampaign(basedOnCodeCampaign: string): void {
                const basedOnCampaign = <BMCampaignSocial>(BMEntityCacheData.getInstance().campaign(basedOnCodeCampaign));

                super.copyZonesFromCampaign(basedOnCodeCampaign);
                if (basedOnCampaign)
                    this.budget = basedOnCampaign.budget;
            }

            protected override _updateFromPublish(item: ICampaignRestData) {
                let socialItem = <ICampaignSocialRestData>item;

                this.routeStatus = socialItem.routeStatus; 
            }

            public setStoresInfo(values: Array<any>, session: string) : Promise<boolean> {
                return new Promise((resolve, refect) => {
                    this.getStoreList().then(_ => {
                        let request: Rest.IAjaxRequest  = BMEntityCacheData.getInstance().restModel.createAjaxRequest(`${ BMCampaign.getUriCampaign(this) }/stores`,);
                        request.options.data = { 
                                                action: { 
                                                    type:       "update",
                                                    session:    session,
                                                    values:     values,
                                                    channel:    'social', 
                                                } 
                                            };
                        request.options.byPassError = true;
                        request.options.method      = "POST";
                        request.options.always = ((sequence: number, jqXHR: JQueryXHR, textStatus: string) => {
                            if (jqXHR.status == 200)
                                resolve(true);
                            else
                                resolve(false);
                        });
                        request.call();
                    });
                });
            }

            public override canPublish() {
                return this.isValid() && this.status === BMCampaignStatus.validated;
            }
            
            public validate(): Promise<boolean> {
                const campaign      = this;
                const cachedData    = BMEntityCacheData.getInstance();

                return campaign.isValid() ? new Promise((resolve, reject) => {
                        let request: Rest.IAjaxRequest = cachedData.restModel.createAjaxRequest(BMCampaign.getUriCampaign(campaign));
                        request.options.data        = { action: { type: "validate" } };
                        request.options.byPassError = true;
                        request.options.always      = ((sequence: number, jqXHR: JQueryXHR, textStatus: string) => {
                            if (jqXHR.status === 200) {
                                campaign.status = (<ICampaignUpdateData>jqXHR.responseJSON).status;
                                campaign.fireEvent(Tools.EventType.Dirty);
                                resolve(this.status == BMCampaignStatus.validated)
                            } else
                                resolve(false);
                        }).bind(this);
                        request.call();
                    })
                    : Promise.resolve(false);
            }
        }
    }
};