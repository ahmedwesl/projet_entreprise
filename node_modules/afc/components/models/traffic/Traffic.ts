/**
 * Created by jean.rennes on 22/04/2016.
 */
///<reference path="../../AFC.ts" />
///<reference path="../rest/RestModel.ts" />
///<reference path="../data/data.ts" />

namespace AFC.Traffic {
    "use strict";
    
    var _path: string = '/traffic';
    
    export const enum EventType {
        statistics = Tools.EventType.UserEvent + 1,
        packages = Tools.EventType.UserEvent + 2
    }

    export const enum TrafficStatus {
        none,
        pending,
        ready
    }
    
    interface ITrafficStatisticsRequest {
        context: {
        };
        provider?: string;
        lon: number;
        lat: number;
        useCredit: boolean;
        package?: string;
        geographicLevel?: string;
        geographicSource?: string;
        serverKind?: string;
    }
    
    interface ITrafficData {
        name: string;
        description: string;
        value: number;
    }
    interface ITrafficUnitArea {
        code: string;
	pct: number;
        count: number;
    }
    
    interface ITrafficLocation {
        lon: number;
        lat: number;
    }
    
    interface ITrafficSection {
        id: string;
        endpoint1: ITrafficLocation;
        endpoint2: ITrafficLocation;
        version: string;
    }
        
    interface ITrafficStatisticsResponse {
        section: ITrafficSection;
        status: string;
        provider: string;
        package: string;
        newVersionAvailable?: boolean;
        error?: string;
        geographicLevel?: string;
        geographicSource?: string;
        dataSource?: string;
        data: Array<ITrafficData>;
        livingArea: Array<ITrafficUnitArea>;
        workingArea: Array<ITrafficUnitArea>;
    }

    
    export interface ITrafficStatistics {
        id: string,
        status: TrafficStatus,
        newerAvailable: boolean,
        needBuy: boolean,
        readonly workingArea?: Data.IDataTable&Data.IDataCreation;
        readonly livingArea?: Data.IDataTable&Data.IDataCreation;
        readonly infoTable?: Data.IDataTable&Data.IDataCreation;
    }
    
    interface ITrafficPackagesRequest {
        context: {
        };
        provider?: string;
        lon: number;
        lat: number;
        serverKind?: string;
    }
    
    interface ITrafficPackage {
        id: string;
        name: string;
        description: string;
        fullCost: number;
        cost: number;
    }
        
    interface ITrafficPackagesResponse {
        packages: Array<ITrafficPackage>;
        newVersionCost?: number;
        credits?: number;
    }
    
    export interface ITrafficPackages {
        readonly packages: Array<ITrafficPackage>;
        newVersionCost?: number;
        credits?: number;
    }
    
    class TrafficPackages implements ITrafficPackages {
        protected readonly _packages: Array<ITrafficPackage>;
        protected _invalidate: ()=> void;
        protected _newVersionCost: number;
        protected _credits: number;
        
        constructor(invalidate: ()=> void, response: ITrafficPackagesResponse) {
            this._invalidate        = invalidate;
            this._packages          = response.packages;
            this._newVersionCost    = response.newVersionCost;
            this._credits           = response.credits;
        }
        
        public get packages(): Array<ITrafficPackage> {
            return this._packages;
        }
        public get newVersionCost(): number {
            return this._newVersionCost;
        }
        public get credits(): number {
            return this._credits;
        }
    }

    class TrafficStatistics implements ITrafficStatistics {
        protected _invalidate: ()=> void;
        protected _workingArea: Data.DataModelBase;
        protected _livingArea: Data.DataModelBase;
        protected _infoTable: Data.DataModelBase;
        protected _status: TrafficStatus;
        protected _newerAvailable: boolean;
        protected _needBuy: boolean;
        protected _model: TrafficModel;
        protected _id: string;
        protected _package: string;
        protected _provider: string;
        protected _onError: boolean;
        protected _errorMsg: string;
        protected _newVersionAvailable: boolean;
                
        constructor(model: TrafficModel, invalidate: ()=> void, response: ITrafficStatisticsResponse, infoTableResource: AFC.Data.ITableResourceContent) {
            this._invalidate            = invalidate;
            this._model                 = model;
            this._id                    = response.section.id;
            this._provider              = response.provider;
            this._package               = response.package;
            this._newVersionAvailable    = response.newVersionAvailable;
            this._onError               = true;
            this._errorMsg              = response.error;
            if (this._errorMsg == "") {
                this._onError               = false;
                this._livingArea            = this._getLivingAreaTable(response.livingArea);
                this._workingArea           = this._getWorkingAreaTable(response.workingArea);
                this._infoTable             = this._getInfoTable(response.data, infoTableResource);
            }
        }
        
        protected _getLivingAreaTable(units: Array<ITrafficUnitArea>) : Data.DataModelBase {
            if (units) {
                var values = [];
                var columns = {
                        columns: [
                            {name: "TOKEN_ID", type:"asteropDataKindCharacter"},
                            {name: "CODE", type:"asteropDataKindCharacter"},
                            {name: "PCT", type:"asteropDataKindReal"},
                            {name: "COUNT", type:"asteropDataKindReal"},
                        ]
                    };
                var currentCode = this.id;//this._model.currentCodeValue;
                for (var i = 0; i < units.length; i++) {
                    var value = [currentCode, units[i].code, units[i].pct, units[i].count];
                    values.push(value);
                }
                return new Data.DataModelBase(Data.mapDataColumns(columns), ["TOKEN_ID", "CODE"], values);
            }
            return null;
        }
        protected _getWorkingAreaTable(units: Array<ITrafficUnitArea>) : Data.DataModelBase {
            if (units) {
                var values = [];
                var columns = {
                        columns: [
                            {name: "TOKEN_ID", type:"asteropDataKindCharacter"},
                            {name: "CODE", type:"asteropDataKindCharacter"},
                            {name: "PCT", type:"asteropDataKindReal"},
                            {name: "COUNT", type:"asteropDataKindReal"},
                        ]
                    };
                var currentCode = this.id;//this._model.currentCodeValue;
                for (var i = 0; i < units.length; i++) {
                    var value = [currentCode, units[i].code, units[i].pct, units[i].count];
                    values.push(value);
                }
                return new Data.DataModelBase(Data.mapDataColumns(columns), ["TOKEN_ID", "CODE"], values);
            }
            return null;
        }
        protected _getInfoTable(info: Array<ITrafficData>, infoTableResource: AFC.Data.ITableResourceContent) : Data.DataModelBase {
            var columns = {
                    columns: [
                        {name: "TOKEN_ID", type:"asteropDataKindCharacter"},
                        {name: "PROVIDER", type:"asteropDataKindCharacter"},
                        {name: "PACKAGE", type:"asteropDataKindCharacter"},
                        {name: "GEOMETRY", type:"asteropDataKindPoint"}
                    ]
                };
            var values: Array<Array<any>> = [
                [
                    this.id,//this._model.currentCodeValue,
                    this.provider,
                    this.package,
                    { 
                        type:"Point", 
                        coordinates:[this._model.x, this._model.y],
                    }
                ]
            ];
            
            /*
            let fullColumns = new Set();
            infoTableResource.definition.columns.forEach(column => {
                if (column.type == AFC.Data.DataKind.integer) {
                    fullColumns.add(column.name);
                }
            });
            */
            
            info.forEach(data => {
                //fullColumns.delete(data.name);
                columns.columns.push({name: data.name, type: "asteropDataKindInteger"});
                values[0].push(data.value);
            });
            /*
            /fullColumns.forEach(columnName => {
                columns.columns.push({name: columnName, type: "asteropDataKindInteger"});
                values[0].push(0);
            });
            */
            return new Data.DataModelBase(Data.mapDataColumns(columns), ["TOKEN_ID"], values);
        }

        public initFrom(/*dma: ITrafficStatisticsResponse*/): void {
            /*
            let table: {columns: any[]; primaryKey: string[]; values: any[][]};
            (table = dma.area) && (this._area = new Data.DataModelBase(Data.mapDataColumns(table), table.primaryKey, table.values));
            (table = dma.income) && (this._income = new Data.DataModelBase(Data.mapDataColumns(table), table.primaryKey, table.values));
            (table = dma.neighbors) && (this._neighbors = new Data.DataModelBase(Data.mapDataColumns(table), table.primaryKey, table.values));
            */
        }
        
        public get isOnError(): boolean {
            return this._onError;
        }
        public get errorMsg(): string {
            return this._errorMsg;
        }
        
        public get id(): string {
            return this._id;
            //return this._model.currentCodeValue;
        }
        public get provider(): string {
            return this._provider;
        }
        public get package(): string {
            return this._package;
        }
        public get newVersionAvailable() : boolean {
            return this._newVersionAvailable;
        }

        public get workingArea(): Data.DataModelBase {
            return this._workingArea;
        }

        public get livingArea(): Data.DataModelBase {
            return this._livingArea;
        }
        
        public get infoTable(): Data.DataModelBase {
            return this._infoTable;
        }
        
        public get status(): TrafficStatus {
            return this._status;
        }
        public get newerAvailable(): boolean {
            return this._newerAvailable;
        }
        public get needBuy(): boolean {
            return this._needBuy;
        }
    }

    export class TrafficModel extends Tools.EventSink  {
        protected _x: number;
        protected _y: number;
        protected _serverKind: string;
        protected _geographicSource: string;
        protected _currentCodeValue: string | number;
        protected _useCredit: boolean;
        protected _packageToBuy: string;
        protected _sequence: number;
        protected _sequencePackages: number;
        protected _statistics: TrafficStatistics;
        protected _packages: TrafficPackages;
        protected _infoTableName: string;
        public readonly restModel: Rest.RestModel;
        
        constructor(restModel: Rest.RestModel) {
            super();

            this._serverKind    = "";
            this._packageToBuy  = "";
            this.restModel      = restModel;
         }

        private _invalidate(): void {
            delete this._statistics;
            delete this._sequence;
            delete this._sequencePackages;
        }
        
        public set geographicSource(value: string) {
            if (this._geographicSource != value) {
                this._geographicSource = value;
                this._invalidate();
            }
        }
        public get geographicSource() {
            return this._geographicSource;
        }

        public set serverKind(value: string) {
            if (this._serverKind !== value) {
                this._serverKind = value;
                this._invalidate();
            }
        }
        public get serverKind() {
            return this._serverKind;
        }

        public set x(value: number) {
            if (this._x !== value) {
                //delete this._config;
                this._x = value;
                this._invalidate();
            }
        }
        public set y(value: number) {
            if (this._y !== value) {
                //delete this._config;
                this._y = value;
                this._invalidate();
            }
        }
        public get x() {
            return this._x;
        }
        public get y() {
            return this._y;
        }
        public get isOnError(): boolean {
            if (this._statistics)
                return this._statistics.isOnError;
            return true;
        }
        public get errorMsg(): string {
            if (this._statistics)
                return this._statistics.errorMsg;
            return "";
        }
        
        public set currentCodeValue(value: string | number) {
            if (this._currentCodeValue !== value) {
                this._currentCodeValue = value;
                this._invalidate();
            }
        }
        public get currentCodeValue() {
            return this._currentCodeValue;
        }
        
       public setUseCredit(value: boolean, pack: string) {
            if (value)
                this._packageToBuy = pack;
            else
                this._packageToBuy = "";
            if (this._useCredit !== value) {
                this._useCredit = value;
                if (this._useCredit)
                    this._invalidate();
            }
       }
       
       public set infoTableTemplate(table: string) {
           this._infoTableName = table;
       }
       
       protected _onAlwaysPackages(sequence: number, jqXHR: JQueryXHR, textStatus: string): void {
            if (sequence === this._sequencePackages) {
                let data: ITrafficPackagesResponse = jqXHR.responseJSON;
                
                if (data)
                    this._packages = new TrafficPackages(this._invalidate, data);
                this.fireEvent(<any>EventType.packages);
            }
        }
       
       protected _onAlways(sequence: number, jqXHR: JQueryXHR, textStatus: string): void {
            if (sequence === this._sequence) {
                let data: ITrafficStatisticsResponse = jqXHR.responseJSON;
                let _this = this;
                let hOnLoad = function(infoTableResournce: AFC.Data.ITableResourceContent) {
                    if (_this._useCredit) {
                        delete _this._packages;
                    }
                    _this._statistics = new TrafficStatistics(_this, _this._invalidate, data, infoTableResournce);
                    _this.fireEvent(<any>EventType.statistics);
                }
           
                if (data) {
                    hOnLoad(null);
                } else
                    this.fireEvent(<any>EventType.statistics);
            }
        }

        public request(): Promise<ITrafficStatistics> {
            let statistics: TrafficStatistics = this._statistics;
            return statistics ? Promise.resolve(statistics) : new Promise(async resolve => {
                this.notify(<any>EventType.statistics, (/*event: Tools.IEvent*/) => resolve(this._statistics));
                if (!this._sequence) {
                    this._sequence = 1;
                    
                    let request: Rest.IAjaxRequest = this.restModel.createAjaxRequest(_path + "/statistics", true, {useProgressInfo: false});
                    let data: ITrafficStatisticsRequest = <ITrafficStatisticsRequest>request.options.data;

                    request.options.always = this._onAlways.bind(this);
                    data.lon                = this._x;
                    data.lat                = this._y;
                    data.useCredit          = this._useCredit;
                    data.package            = this._packageToBuy;
                    data.geographicSource   = this._geographicSource;
                    if (this._serverKind && this._serverKind !== "")
                        data.serverKind = this._serverKind;
                    this._sequence = request.call();
                }
            });
        }
        
        public requestPackages(): Promise<TrafficPackages> {
            let packages: TrafficPackages = this._packages;
            return packages ? Promise.resolve(packages) : new Promise(async resolve => {
                this.notify(<any>EventType.packages, (/*event: Tools.IEvent*/) => resolve(this._packages));
                if (!this._sequencePackages) {
                    let request: Rest.IAjaxRequest = this.restModel.createAjaxRequest(_path + "/packages", true, {useProgressInfo: false});
                    let data: ITrafficPackagesRequest = <ITrafficPackagesRequest>request.options.data;

                    request.options.always = this._onAlwaysPackages.bind(this);
                    data.lon            = this._x;
                    data.lat            = this._y;
                    if (this._serverKind && this._serverKind !== "")
                        data.serverKind = this._serverKind;
                    this._sequencePackages = request.call();
                }
            });
        }
    }
}