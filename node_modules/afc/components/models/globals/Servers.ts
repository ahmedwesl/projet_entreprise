/**
 * Created by jean.rennes on 20/01/2021.
 */
///<reference path="Global.ts" />

namespace AFC.ServerInfo {
    interface IServerInfo {
        url: string
    }
    
    export interface IServerInfoProvider {
        getServerInfo() : Promise<IServerInfo>;
    }
            
    const _sequence     = Symbol();

    export class ImagesServerInfoProvider extends Tools.EventSink implements IServerInfoProvider  {
        public    readonly restModel: Rest.RestModel;
        protected _serverInfo       : IServerInfo;
        protected [_sequence]       : number;

        constructor(restModel: Rest.RestModel) {
            super();
            this[_sequence]     = 0;
            this.restModel      = restModel;
            this._serverInfo    = null;
        }
    
        public getServerInfo() : Promise<IServerInfo> {
            return this._serverInfo !== null ? Promise.resolve(this._serverInfo) : new Promise(async (resolve: (serverInfo: IServerInfo) => void) => {
                this.notify(Tools.EventType.UserEvent, (/*event: Tools.IEvent*/) => resolve(this._serverInfo));
                if (!this[_sequence]) {   
                    let request: Rest.IAjaxRequest = this.restModel.createAjaxRequest<Rest.IRequestBody>(`/servers/images`, true);
                    request.options.always = (sequence: number, jqXHR: JQueryXHR, textStatus: string) => {
                        this._serverInfo = jqXHR.responseJSON;
                        this.fireEvent(Tools.EventType.UserEvent);
                    };
                    this[_sequence] = request.call();
                }
            });
        }
    }
}