/**
 * Created by jean.rennes on 20/01/2021.
 */
///<reference path="Global.ts" />

namespace AFC.Globals {
    export const enum UploadType {
        dataDump
    }
    
    const c_Header = 'base64,';
    
    const UploadTypeLookup: {[key: number]: string} = {
        [UploadType.dataDump]: "dataDump"
    };
    
    export interface IUploadCommand {
        type: string;
        mimeType: string;
	    name: string;
        size: number;
	    lastModified: Date;
	    content: string;
    }
        
    interface IUploadResultItem {
        text: string;
        detail?: any;
    }
    
    export interface IUploadResult {
        result: number;
        outValue: {
            resourceId: string;
            errors: IUploadResultItem[];
            messages: IUploadResultItem[];
            warnings: IUploadResultItem[];
        }
    }    
    
    interface IDataDumpCommandOptions {
        database: string;
        target: string;
        mode?: string;
        description?: string;
    }
        
    interface ICommandType2Options {
        [UploadType.dataDump]: IDataDumpCommandOptions;
    }

    export class Uploader {
        public readonly restModel: Rest.RestModel;

        constructor(restModel: Rest.RestModel) {
            this.restModel = restModel;
        }

        public upload<T extends UploadType = UploadType>(type: T, file: File, options: Readonly<ICommandType2Options[T]>): Promise<any> {
            return new Promise((resolve: (result: IUploadResult|void) => void) => {
                let operation = UploadTypeLookup[type], reader = new FileReader();
                
                if (!operation) {
                    return resolve();
                }
                reader.onloadend = event => {
                    let content,
                        index,
                        request,
                        data;
                        
                    if ((event.loaded === event.total) && event.loaded && ((index = (content = <string>reader.result).indexOf(c_Header)) !== -1)) {
                        request = this.restModel.createAjaxRequest<IUploadCommand & ICommandType2Options[T] & Rest.IRequestBody>('/globals/upload', true, {useProgressInfo: true});
                        $.extend(data = request.options.data, options);
                        data.type = operation;
                        data.mimeType = file.type;
                        data.name = file.name;
                        data.size = file.size;
                        data.lastModified = new Date(file.lastModified);
                        data.content = content.substr(index + c_Header.length);
                        request.options.always = (sequence: number, jqXHR: JQueryXHR, textStatus: string) => {
                            let result: IUploadResult = jqXHR.responseJSON;
                            resolve(result);
                        };
                        request.call();
                    } else {
                        resolve();
                    }
                };                
                reader.readAsDataURL(file); 
            });            
        }
    }
}