/**
 * Created by jean.rennes on 19/07/2017.
 */
///<reference path="Global.ts" />

namespace AFC.Globals {
    export const enum ChartType {
        none,
        pie,
        pie3d,
        points,
        bar,
        stackedBar,
        doughnut,
        doughnut3d,
        boxPlot,
        bubble,
        container,
        radar,
        barHorizontal,
        stackedBarHorizontal
    }
    const ChartTypeLookup: {[key: string]: ChartType} = {
        none: ChartType.none,
        pie: ChartType.pie,
        pie3d: ChartType.pie3d,
        points: ChartType.points,
        bar: ChartType.bar,
        stackedBar: ChartType.stackedBar,
        doughnut: ChartType.doughnut,
        doughnut3d: ChartType.doughnut3d,
        boxPlot: ChartType.boxPlot,
        bubble: ChartType.bubble,
        container: ChartType.container,
        radar: ChartType.radar,
        barHorizontal: ChartType.barHorizontal,
        stackedBarHorizontal: ChartType.stackedBarHorizontal
    };
    
    export function chartType(value: string): ChartType {
        return ChartTypeLookup[value];
    }
    
    export type ColorStyleType      = 'transparent'|'solid'|'twoColorsGradient';
    export type GradientStyle       = 'horizontal'|'vertical'|'upperDiag'|'lowerDiag'|'upperCorner'|'lowerCorner'|'center';
    export type GradientSubStyle    = 'center'|'edges'|'end'|'start';
    
    export type Alignment           = "left"|"center"|"right";
    export type VAlignment          = 'top'|'middle'|'bottom';
    
    export interface IChartStyle {
        
    }
    
    export interface IColorStyle {
        type: ColorStyleType;
        color: number;
    }
    
    export interface ISolidColorStyle extends IColorStyle {
    }
    
    export interface ITwoColorsGradientStyle extends IColorStyle {
        style: GradientStyle;
        subStyle: GradientSubStyle;
        color2: number;
    }
    
    export interface IChartStyleFont extends IChartStyle, IStyleFont {
    }
    
    export interface IChartStyleLabelItem extends IChartStyle {
	font: IChartStyleFont;
	color: number;
	backgroundColor: number;
	borderColor: number;
	visible: boolean;
	align: Alignment;
    }
    
    export interface IChartStyleLabelPercentItem extends IChartStyleLabelItem {
        showPercent: boolean;
    }
    
    export interface IChartStyleLabel extends IChartStyleLabelPercentItem {
	noOverlap: boolean;
	showLines: boolean;
	verticalAlign: boolean;
	showPartColor: boolean;
    }
    
    export interface IChartStylePartSerie extends IChartStyle {
	name: string;
	fillColor: number;
	borderColor: number;
	label: IChartStyleLabelPercentItem;
    }
    
    export interface IChartStyleTitle extends IChartStyle {
        font: IChartStyleFont;
        color: number;
        backgroundColor: number;
        borderColor: number;
        visible: boolean;
    }
    
    export interface IChartTitle extends IChartStyleTitle {
        text: string;
        placement: VAlignment;
        align: Alignment;
    }
    
    export interface IChartStyleAggregation extends IChartStyle {
        name: string;
        aggregationPercentage: number;
        active: boolean;
    }
    
    export interface IChartStylePie extends IChartStyle {
	radial: number;
	angle: number;
	explode: number;
	showExplode: boolean;
	aggregation: IChartStyleAggregation;
    }
    
    export interface IChartStyleDoughnut extends IChartStylePie {
        hole: number;
    }
    
    export interface IChartProperties {
	type: ChartType;
        title: IChartTitle;
	font: IChartStyleFont;
	color: number;
	backgroundColor: number;
	borderColor: number;
    }
    
    export interface IChartPieProperties extends IChartProperties {
	label: IChartStyleLabel;
	pie: IChartStylePie;
	parts: IChartStylePartSerie[];
	subtitle: IChartStyleTitle;
    }
    
    export interface IChartDoughnutProperties extends IChartProperties {
	label: IChartStyleLabel;
        pie: IChartStyleDoughnut;
	parts: IChartStylePartSerie[];
	subtitle: IChartStyleTitle;
    }
    
    export interface IChartBarProperties extends IChartProperties {
        series: IChartStyleBarSerie[];
        xAxis: IChartStyleAxis;
        yAxis: IChartStyleAxisCont[];
        tracingZone: IChartStyleTracingZone;
        label: IChartStyleLabelItem;
        spaceX: number;
    }
    
    export interface IChartStyleBarSerieNegativeBarItem extends IChartStyle {        
        borderColor:number;
        color: IColorStyle;
    }
    export interface IChartStyleBarSerieBarItem extends IChartStyle {        
        visible:boolean;
        borderColor:number;
        color: IColorStyle;
        negative?:IChartStyleBarSerieNegativeBarItem;
    }
    
    export interface IChartStyleBarSerieNegativeSymbolItem extends IChartStyle {        
        color:number;
        font:IChartStyleFont;
        charCode:string;
    }
    
    export interface IChartStyleBarSerieSymbolItem extends IChartStyle {        
        visible:boolean;
        color:number;
        font:IChartStyleFont;
        charCode:string;
        negative?:IChartStyleBarSerieNegativeSymbolItem;
    }
    
    export interface IChartStyleBarSerieLineItem extends IChartStyle {        
        visible: boolean;
        color: number;
        width: number;
    }
    
    export interface IChartStyleBarSerie extends IChartStyle {
        axis:number;
        name: string,
        bar: IChartStyleBarSerieBarItem,
        label: IChartStyleLabelItem,
        line: IChartStyleBarSerieLineItem,
        symbol: IChartStyleBarSerieSymbolItem
     }
     
     export interface IChartStyleAxis extends IChartStyle {
         color: number;
         name:string;
         showTickers:boolean;
         showLine:boolean;
         showValues:boolean;
         showTitle:boolean;
         font:IChartStyleFont;
         textAngle:number;
         textColor:number;
     }
     
     export interface IChartStyleAxisCont extends IChartStyleAxis {
        axisIntersectPoint : { automatic:boolean; value:number; };
        min : { automatic:boolean; value:number; };
        max : { automatic:boolean; value:number; };
     }
     
     export interface IGraphRadarFillingSerieProperties extends IChartStyle {
        visible : boolean;
        color : IColorStyle;
        transparency : number;
     }
     
     export interface IGraphRadarLineSerieProperties extends IChartStyle {
        visible : boolean;
        color : number;
        width : number;
     }
     
     export interface IGraphRadarSymbolSerieProperties extends IChartStyle {
        visible : boolean;
        color : number;
        font : IChartStyleFont;
        charCode : string;
     }
     
     export interface IGraphRadarSerie extends IChartStyle {
         name : string;
         filling: IGraphRadarFillingSerieProperties;
         line: IGraphRadarLineSerieProperties;
         symbol: IGraphRadarSymbolSerieProperties;
     }
     
     export interface IGraphRadarAxes extends IChartStyle {
        min : { automatic:boolean; value:number; };
        max : { automatic:boolean; value:number; };
        color: number;
        showLine : boolean;
        showValues : boolean;
        font : IChartStyleFont;
        textColor : number;
        labels: string[];
     }
     
     export interface IChartRadarProperties extends IChartProperties {
        tracingZone: IChartStyleTracingZone;
        series: IGraphRadarSerie[];
        axes: IGraphRadarAxes;
    }
    
     export interface IChartStyleTracingZone extends IChartStyle {
         color: IColorStyle
     }
       
    export interface IChartDatum {
        value: any;
    };

    export interface IChartModelSubtitles {
        columnHeaders?: ReadonlyArray<string>;
        rowHeaders?: ReadonlyArray<string>;
    }
    
    interface ChartPropertiesChartType {
        [ChartType.pie]: IChartPieProperties;
        //[ChartType.pie3d]
        //[ChartType.points]
        [ChartType.bar]: IChartBarProperties;
        //[ChartType.stackedBar]
        [ChartType.doughnut]: IChartDoughnutProperties;
        //[ChartType.doughnut3d]
        //[ChartType.boxPlot]
        //[ChartType.bubble]
        //[ChartType.container]
        [ChartType.radar]: IChartRadarProperties;
        [ChartType.barHorizontal]: IChartBarProperties;
        //[ChartType.stackedBarHorizontal]
   }
    
    export interface IChartMetadata<T extends ChartType = ChartType> {
        chartDataTransposed: boolean;
        subtitles: Readonly<Globals.IChartModelSubtitles>;
        chartProperties: T extends keyof ChartPropertiesChartType ? ChartPropertiesChartType[T] : IChartProperties;
    }
    
    export interface IChartModel<T extends ChartType = ChartType> extends IChartMetadata<T> {
        data: IChartDatum[][];
    }
}