/**
 * Created by jean.rennes on 27/03/2018.
 */
///<reference path="Global.ts" />

namespace AFC.Globals {
    export const enum GridRenderer {
        none,
        text,
        checkbox,
        color,
        trend,
        trendAndText
    }
    enum GridRendererLookup {
        none = GridRenderer.none,
        text = GridRenderer.text,
        checkbox = GridRenderer.checkbox,
        color = GridRenderer.color,
        trend = GridRenderer.trend,
        trendAndText = GridRenderer.trendAndText
    };

    export function gridRender(value: string): GridRenderer;
    export function gridRender(value: GridRenderer): string;
    export function gridRender(value: string|GridRenderer): string|GridRenderer {
        return GridRendererLookup[<any>value];
    }

    export interface ISortedColumn {
        readonly name: string;
        descending: boolean;
    }
    
    export type BorderStyle = "none"|"solid"|"double";
    
    export type BorderWidth = "medium"|"thin"|"thick";
        
    export interface ITemplateSheetClass {
        align?: "left"|"center"|"right"|"justified";
        backgroundColor: number;
        borderColor: number|[number, number]|[number, number, number, number];
        borderStyle: BorderStyle|[BorderStyle, BorderStyle]|[BorderStyle, BorderStyle, BorderStyle, BorderStyle];
        borderWidth?: BorderWidth|[BorderWidth, BorderWidth]|[BorderWidth, BorderWidth, BorderWidth, BorderWidth];
        color: number;
        fontFamily?: string;
        fontSize: number;
        fontStyle?: "italic";
        fontWeight?: "bold";
        padding: number|[number, number]|[number, number, number, number];
        textDecoration?: "underline"|"line-through"|"underline line-through";
        verticalAlign?: "top"|"middle"|"bottom";
        whiteSpace?: "pre-wrap";
    }

    export interface ITemplateSheetCellBase {
        className?: string;
        format?: string;
        image?: string;
        renderer?: GridRenderer;
        dynamic?: boolean;
        value?: any;
        text?: string;
    }
    
    export interface ITemplateSheetColumnHeader extends ITemplateSheetCellBase {
        width: number;
        column?: string;
    }
    
    export interface ITemplateSheetRowHeader extends ITemplateSheetCellBase {
        height: number;
    }

    export type ITemplateSheetCell = ITemplateSheetCellBase;
    
    export interface ITemplateSheet {
        classes?: {[key: string]: ITemplateSheetClass;};
        columnHeaders: {
            height?: number;
            visibility: boolean;
            items: ITemplateSheetColumnHeader[];
        };
        images?: {[key: string]: string;};
        items: ITemplateSheetCell[][];
        rowHeaders?: {
            width?: number;
            visibility: boolean;
            items: ITemplateSheetRowHeader[];
        };
    }
    
    export const enum SortOrientation {
        none,
        ascending,
        descending
    }

    export interface ISortColumn {
        readonly column: Readonly<string>;
        readonly orientation: SortOrientation;
    }

    
    export interface ITemplateDetailedSheet extends ITemplateSheet {
        thematic?: IThematic<number>;
        readonly sortColumns: ReadonlyArray<ISortColumn>;
    }
    
    export interface IDataSheetCell {
        value?: any;
        image?: string;
    }
    
    export interface IDataSheet {
        columnHeaders?: {
            items: IDataSheetCell[];
        };
        items: IDataSheetCell[][];
        rowHeaders?: {
            items: IDataSheetCell[];
        };
    }
    
    export interface IDetailData {
        dataModel: Data.IDataModelBase;
        thematic: IThematicData;
    }
    
    export type ISheet = ITemplateSheet & IDataSheet;
    
    interface IContextSheetCell {
        className?: string;
        format?: string;
        image?: string;
        renderer?: string;
        value?: any;
    }
    
    export interface IContextSheet {
        classes?: {
            [key: string]: Globals.ITemplateSheetClass;
        };
        columnHeaders?: {
            height?: number;
            visibility?: boolean;
            items?: IContextSheetCell[];
        };
        items?: IContextSheetCell[][];
        rowHeaders?: {
            width?: number;
            visibility?: boolean;
            items?: IContextSheetCell[];
        };
    }

    export interface IGridAppData {
        readonly value: any;
        readonly symbol: string;
        readonly image: string;
        readonly color: string;
        readonly backgroundColor: string;
    }
        
    export interface IGridAppCell extends IGridAppData {
        readonly renderer: GridRenderer;
        readonly padding: string;
        readonly fontSize: string;
        readonly textAlign: string;
        readonly verticalAlign: string;
        readonly fontWeight: string;
        readonly fontFamily: string;
        readonly borderStyle: string;
        readonly borderWidth: string;
        readonly borderColor: string;
        readonly textDecoration: string;
        readonly fontStyle: string;
        readonly whiteSpace: string;
        readonly text: string;
        className: string;
    }
    
    export interface IGridAppColumnInfo {
        readonly name: string;
        readonly type: Data.DataKind;
        readonly supportOrdering: boolean;
    }
    
    export interface IGridApp {
        readonly sortedColumns: ISortedColumn[];
        readonly allowOrdering: boolean;
        readonly hasRowHeader: boolean;
        getRowCount(): number;
        getRowHeader(line: number): IGridAppCell;
        getRowHeaderWidth(): number;
        getRowHeight(line: number): number;
        readonly hasColumnHeader: boolean;
        getColumnInfo(column: number): IGridAppColumnInfo;
        getColumnCount(): number;
        getColumnHeader(column: number): IGridAppCell;
        getColumnHeaderHeight(): number;
        getColumnWidth(column: number): number;
        getCell(column: number, line: number): IGridAppCell;
        getValue(column: string, line: number): number|string;
        getSymbol(key: string): string;
    }
}