/**
 * Created by jean.rennes on 26/03/2018.
 */
///<reference path="Global.ts" />
///<reference path="Grid.ts" />
///<reference path="Chart.ts" />
 
namespace AFC.Globals {
    export const enum ReportObjectType {
        text = 1,
        dashboardView,
        grid,
        bitmap,
        line,
        shape
    }

    enum ReportObjectTypeLookup {
        TEXT = ReportObjectType.text,
        ZM_VIEW = ReportObjectType.dashboardView,
        GRID = ReportObjectType.grid,
        BITMAP = ReportObjectType.bitmap,
        LINE = ReportObjectType.line,
        SHAPE_POLYGON = ReportObjectType.shape
    }

    export function reportObjectType(value: string): ReportObjectType {
        return (<any>ReportObjectTypeLookup)[value];
    }

    export interface IReportObject {
        readonly name: string;
        readonly type: ReportObjectType;
        readonly shadow: {
            readonly color: number;
            readonly XMove: number;
            readonly YMove: number;
            readonly XPosition: number;
            readonly YPosition: number;
            readonly visible: boolean;
        };
        readonly borderColor: number;
        readonly borderWidth: number;
        readonly backgroundColor: number;
        readonly top: number;
        readonly left: number;
        readonly width: number;
        readonly height: number;
        readonly properties: {readonly [key: string]: number};
    }

    export interface IStyleFont {
	fontFamily: string;
	fontSize: number;
	fontWeight: string;
        fontStyle: string;
        textDecoration: string;
    }

    export interface ITextReportObject extends IReportObject {
        readonly type: ReportObjectType.text;
        readonly color: number;
        readonly font: IStyleFont;
        readonly text: string;
        readonly verticalAlign: Globals.VAlignment;
        readonly textAlign: Globals.Alignment;
        readonly multiline: boolean;
    }
    
    export interface IGridReportObject extends IReportObject {
        readonly type: ReportObjectType.grid;
        readonly content: Dashboards.IGridData;
    }

    export interface IBitmapReportObject extends IReportObject {
        readonly id: string;
        readonly representationMode?: "none"|"cover"|"contain";
        readonly type: ReportObjectType.bitmap;
    }
    
    export const enum LineStyle {
        normal,
        dots
    }
    
    export interface ILineReportObject extends IReportObject {
        readonly type: ReportObjectType.line;
        readonly color: number;
        readonly weight: number;
        readonly style: LineStyle;
        readonly startPoint: IPointReportObject;
        readonly endPoint: IPointReportObject;
    }
    
    export const enum PointStyle {
        none,
        arrow,
        openArrow,
        bullet,
        diamond
    }
    
    export interface IPointReportObject {
        readonly weight: number;
        readonly style: PointStyle;
    }
    
    export const enum Shape {
        none,
        ellipse,
        star,
        roundedRectangle,
        ring,
        regularPolygone,
        diamond,
        noParking,
        cross,
        label,
        parenthesis,
        rectTriangle,
        trapezium,
        parallelogram,
        ribbon,
        balloon,
        simpleArrow,
        rectangleArrow,
        curvedArrow,
        polyArrow,
        pipeArrow,
        specialSimpleArrow
    }
    
    export interface IShapeReportObject extends IReportObject {
        readonly type: ReportObjectType.shape;
        readonly shape: Shape;
        readonly fillColor: number;
        readonly color: number;
        readonly weight: number;
    }

    export interface IReportMetadata {
        readonly pages: {
            readonly width: number;
            readonly height: number;
            readonly backgroundColor: number;
            readonly objects: IReportObject[];
            readonly notes: string;
        }[];
        readonly images: {
            [key: string]: string;
        };
        readonly width: number;
        readonly height: number;
        readonly headerHeight: number;
        readonly footerHeight: number;
        readonly firstPage: number;
        readonly headerLocked: boolean;
        readonly footerLocked: boolean;
        readonly format: number;
    }

    export interface IReportData extends Dashboards.IReportContentData {
        readonly views: {
            readonly [key: number]: Promise<Readonly<Controls.IReportViewBlock>>;
        };
    }

    export interface IReportModel {
        readonly metadata: IReportMetadata;
        readonly data: IReportData;
    }
}