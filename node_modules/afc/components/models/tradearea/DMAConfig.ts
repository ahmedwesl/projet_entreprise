/**
 * Created by jean.rennes on 22/04/2016.
 */
///<reference path="../../AFC.ts" />
///<reference path="../rest/RestModel.ts" />
///<reference path="../data/data.ts" />

namespace AFC.TradeArea {
    const _path: string = '/tradearea/dynamic';

    export type DMAConfigDescriptor = Readonly<{
        id: string;
        name: string;
        comment: string;
        income: boolean;
        dataInput: ReadonlyArray<Readonly<{
            table: string;
            columns: ReadonlyArray<string>;
        }>>;
    }>;

    export interface IDMAContext {
        source: TradeArea.IDMASites;
        target: TradeArea.IDMASites;
    }

    export class DMAConfigsDescriptor extends Tools.EventSink  {
        protected _dma: ReadonlyArray<DMAConfigDescriptor>;
        protected _sequence: number;
        public readonly restModel: Rest.RestModel;

        constructor(restModel: Rest.RestModel) {
            super();
            this.restModel = restModel;
        }

        protected _onAlways(sequence: number, jqXHR: JQueryXHR, textStatus: string): void {
            if (this._sequence === sequence) {
                this._dma = (jqXHR.responseJSON || []);
                this.fireEvent(Tools.EventType.UserEvent);
            }
        }

        public getConfigurations(): Promise<ReadonlyArray<DMAConfigDescriptor>> {
            return this._dma ? Promise.resolve(this._dma) : new Promise(resolve => {
                this.notify(Tools.EventType.UserEvent, (/*event: Tools.IEvent*/)=> resolve(this._dma));
                if (!this._sequence) {
                    let request: Rest.IAjaxRequest = this.restModel.createAjaxRequest(`${_path}/info`);
                    request.options.always = this._onAlways.bind(this);
                    this._sequence = request.call();
                }
            });
        }
    }

    interface IDMARequestBase {
        model: string;
    }

    export interface IDMASites {
        readonly reference: string;
        readonly events?: Data.IModificationEvents;
    }

    interface IDMARequest extends IDMARequestBase, Rest.IRequestBody<Rest.ICreationContext&{
            source?: IDMASites;
            target?: IDMASites;
        }> {
        area: boolean;
        income: boolean;
        impact: boolean;
        neighbors: boolean;
        restricted: boolean;
        sites?: ReadonlyArray<any>;
        threshold?: number;
    }

    interface IDMA {
        area?: {columns: any[]; primaryKey: string[]; values: any[][]};
        income?: {columns: any[]; primaryKey: string[]; values: any[][]};
        neighbors?: {columns: any[]; primaryKey: string[]; values: any[][]};
    }

    interface IDMAResponse extends IDMARequestBase {
        area: boolean;
        income: boolean;
        impact: {columns: any[]; primaryKey: string[]; values: any[][]};
        sites: any[];
        storeTable: Dashboards.ISitesTable;
        storeCode: string;
        areaCode: string;
        influence: string;
        time: string;
        partition: string[];
        source?: IDMA;
        target?: IDMA;
    }

    export interface IDMASimulation {
        sites: IDMASites;
        readonly area: Data.IDataTable&Data.IDataCreation;
        readonly income: Data.IDataTable&Data.IDataCreation;
        readonly neighbors: Data.IDataTable&Data.IDataCreation;
    }

    class DMASimulation implements IDMASimulation {
        protected _config: DMAConfigModel;
        protected _invalidate: ()=> void;
        protected _sites: IDMASites;
        protected _area: Data.DataModelBase;
        protected _income: Data.DataModelBase;
        protected _neighbors: Data.DataModelBase;

        constructor(config: DMAConfigModel, invalidate: ()=> void) {
            this._config = config;
            this._invalidate = invalidate;
        }

        public initFrom(dma: IDMA): void {
            let dataTable: Data.IDataTable;
            (dataTable = Data.updateTableData(dma.area)) && (this._area = new Data.DataModelBase(dataTable.columns, dataTable.primaryKey, dataTable.values));
            (dataTable = Data.updateTableData(dma.income)) && (this._income = new Data.DataModelBase(dataTable.columns, dataTable.primaryKey, dataTable.values));
            (dataTable = Data.updateTableData(dma.neighbors)) && (this._neighbors = new Data.DataModelBase(dataTable.columns, dataTable.primaryKey, dataTable.values));
        }

        public set sites(value: IDMASites) {
            this._sites = value;
            this._invalidate.call(this._config);
        }

        public get sites(): IDMASites {
            return this._sites;
        }

        public get area(): Data.DataModelBase {
            return this._area;
        }

        public get income(): Data.DataModelBase {
            return this._income;
        }

        public get neighbors(): Data.DataModelBase {
            return this._neighbors;
        }            
    }

    export class DMAConfigModel extends Tools.EventSink  {
        protected _configs: DMAConfigsDescriptor;
        protected _config: DMAConfigDescriptor;
        protected _id: string;
        protected _area: boolean;
        protected _income: boolean;
        protected _neighbors: boolean;
        protected _impact: boolean;
        protected _restricted: boolean;
        protected _sites: ReadonlyArray<any>;
        protected _threshold: number;

        protected _sequence: number;
        protected _storeCode: string;
        protected _storeTable: Dashboards.ISitesTable;
        protected _areaCode: string;
        protected _influence: string;
        protected _time: string;
        protected _partition: string[];
        protected _source: DMASimulation;
        protected _target: DMASimulation;
        protected _impactTable: Data.DataModelBase;

        constructor(configs: DMAConfigsDescriptor) {
            super();

            this._restricted = true;
            this._configs = configs;
            this._source = new DMASimulation(this, this._invalidate);
            this._target = new DMASimulation(this, this._invalidate);
        }

        private _invalidate(): void {
            delete this._storeCode;
            delete this._sequence;
        }

        public set id(value: string) {
            if (this._id !== value) {
                delete this._config;
                this._id = value;
                this._invalidate();
            }
        }

        public set area(value: boolean) {
            if (this._area !== value) {
                this._area = value;
                this._invalidate();
            }
        }

        public get area(): boolean {
            return this._area;
        }

        public set income(value: boolean) {
            if (this._income !== value) {
                this._income = value;
                this._invalidate();
            }
        }

        public get income(): boolean {
            return this._income;
        }

        public set neighbors(value: boolean) {
            if (this._neighbors !== value) {
                this._neighbors = value;
                this._invalidate();
            }
        }

        public get neighbors(): boolean {
            return this._neighbors;
        }

        public set impact(value: boolean) {
            if (this._impact !== value) {
                this._impact = value;
                this._invalidate();
            }
        }

        public get impact(): boolean {
            return this._impact;
        }

        public set restricted(value: boolean) {
            let v0: boolean = this._restricted, v1: boolean = !value;

            if (v0 !== v1) {
                this._restricted = !v1;
                this._invalidate();
            }
        }

        public get restricted(): boolean {
            return this._restricted;
        }

        public set sites(value: ReadonlyArray<any>) {
            if (this._sites !== value) {
                this._sites = value;
                this._invalidate();
            }
        }

        public get sites(): ReadonlyArray<any> {
            return this._sites;
        }

        public set threshold(value: number) {
            if (this._threshold !== value) {
                this._threshold = value;
                this._sites||this._invalidate();
            }
        }

        public get storeTable(): Dashboards.ISitesTable {
            return this._storeTable;
        }

        public get storeCode(): string {
            return this._storeCode;
        }

        public get areaCode(): string {
            return this._areaCode;
        }

        public get influence(): string {
            return this._influence;
        }

        public get time(): string {
            return this._time;
        }

        public get partition(): ReadonlyArray<string> {
            return this._partition;
        }

        public get source(): IDMASimulation {
            return this._source;
        }

        public get target(): IDMASimulation {
            return this._target;
        }

        public get impactTable(): Data.DataModelBase {
            return this._impactTable;
        }

        protected _onAlways(sequence: number, jqXHR: JQueryXHR, textStatus: string): void {
            if (sequence === this._sequence) {
                let data: IDMAResponse = jqXHR.responseJSON;
                if (data) {
                    let dataTable = Data.updateTableData(data.impact);
                    
                    this._storeTable = data.storeTable;
                    this._storeCode = data.storeCode;
                    this._areaCode = data.areaCode;
                    this._influence = data.influence;
                    this._time = data.time;
                    this._partition = data.partition;
                    data.source && this._source.initFrom(data.source);
                    data.target && this._target.initFrom(data.target);
                    dataTable && (this._impactTable = new Data.DataModelBase(dataTable.columns, dataTable.primaryKey, dataTable.values));
                }
                this.fireEvent(Tools.EventType.Dirty);
            }
        }

        protected _run(): void {
            let request: Rest.IAjaxRequest = this._configs.restModel.createAjaxRequest(_path, false, {useProgressInfo: true, modifierOptions: {noReplacements: true}});
            let data: IDMARequest = <IDMARequest>request.options.data;

            request.options.always = this._onAlways.bind(this);
            data.model = this._config.id;
            if (this._source.sites || this._target.sites) {
                data.context || (data.context = {});
                this._source.sites && (data.context.source = this._source.sites);
                this._target.sites && (data.context.target = this._target.sites);
            }
            this._area && (data.area = true);
            this._income && (data.income = true);
            this._neighbors && (data.neighbors = true);
            this._impact && (data.impact = true);
            !this._restricted && (data.restricted = false);
            this._sites ? data.sites = this._sites : this._threshold && (data.threshold = this._threshold);
            this._sequence = request.call();
        }

        public simulate(): Promise<void> {
            return this._storeCode ?
                Promise.resolve():
                new Promise(async resolve => {
                    this.notify(Tools.EventType.Dirty, <any>resolve);
                    if (!this._sequence) {
                        this._sequence = -1;
                        if (this._config || (this._config = Tools.findByIdOrName<DMAConfigDescriptor>(this._id, await this._configs.getConfigurations()))) {
                            this._run();
                        }
                    }
                });
        }
    }
}