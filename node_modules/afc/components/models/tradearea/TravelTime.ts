/**
 * Created by jean.rennes on 27/07/2017.
 */
///<reference path="../../AFC.ts" />
///<reference path="../rest/RestModel.ts" />
namespace AFC {
    export namespace TradeArea {
        export const enum LengthUnit {
            meter = 1,
            kilometer,
            yard,
            mile
        }

        enum LengthUnitLookup {
            meter = <number> LengthUnit.meter,
            kilometer = <number> LengthUnit.kilometer,
            yard = <number> LengthUnit.yard,
            mile = <number> LengthUnit.mile
        }

        export function lengthUnit(value: LengthUnit): string;
        export function lengthUnit(value: string): LengthUnit;
        export function lengthUnit(value: LengthUnit|string): LengthUnit|string {
            return (<any>LengthUnitLookup)[value];
        }

        export const enum TimeUnit {
            minute = 1,
            decimal,
            second
        }

        enum TimeUnitLookup {
            minute = <number> TimeUnit.minute,
            decimal = <number> TimeUnit.decimal,
            second = <number> TimeUnit.second
        }
        
        export function timeUnit(value: TimeUnit): string;
        export function timeUnit(value: string): TimeUnit;
        export function timeUnit(value: TimeUnit|string): TimeUnit|string {
            return (<any>TimeUnitLookup)[value];
        }

        export const enum TravelMode {
            boundary = 1,
            residentialArea,
            centroid
        }
        
        enum ISOCHRONEMODE {
            ISOCHRONECOMPUTEMODE_BOUNDARY = <number>TravelMode.boundary,
            ISOCHRONECOMPUTEMODE_RESIDENTIALAREA = <number>TravelMode.residentialArea,
            ISOCHRONECOMPUTEMODE_CENTROID = <number>TravelMode.centroid
        }
        
        export function travelMode(value: TravelMode): string;
        export function travelMode(value: string): TravelMode;
        export function travelMode(value: string|TravelMode): string|TravelMode {
            return (<any>ISOCHRONEMODE)[value];
        }
        
        export const enum ModeOfTransport {
            carTravel = 1,
            pedestrian,
            hybrid
        }
        
        enum MODEOFTRANSPORT {
            CARTRAVEL = <number>ModeOfTransport.carTravel,
            PEDESTRIAN = <number>ModeOfTransport.pedestrian,
            HYBRID = <number>ModeOfTransport.hybrid
        }

        export function modeOfTransport(value: ModeOfTransport): string;
        export function modeOfTransport(value: string): ModeOfTransport;
        export function modeOfTransport(value: string|ModeOfTransport): string|ModeOfTransport {
            return (<any>MODEOFTRANSPORT)[value];
        }


        export type NetworkDescriptor = {
            modeOfTransport: ModeOfTransport;
            name: string;
            countryCode: string;
            version: string;
            copyright: string;
            adminUnitsYear: string;
            adminUnits: {
                id: number;
                name: string
            }[];
            description: string;
        };

        export class Networks extends Tools.EventSink  {
            protected _restModel: Rest.RestModel;

            constructor(restModel: Rest.RestModel) {
                super();
                this._restModel = restModel;
            }

            public getNetworks(): Promise<ReadonlyArray<NetworkDescriptor>> {
                return new Promise(resolve => {
                    let request: Rest.IAjaxRequest = this._restModel.createAjaxRequest('/tradearea/traveltime/info');

                    request.options.always = (sequence: number, jqXHR: JQueryXHR, textStatus: string)=> {
                        let networks: NetworkDescriptor[] = jqXHR.responseJSON;

                        networks.forEach(network=> {
                            network.modeOfTransport = modeOfTransport(<string><any>network.modeOfTransport);
                        });
                        resolve(networks);
                    };
                    request.call();
                });
            }            
        }
    }
}