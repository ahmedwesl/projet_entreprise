/**
 * Created by jean.rennes on 08/10/2015.
 */
///<reference path="ImageAdapter.ts" />

namespace AFC.Dashboards {
    export interface IChartOptions {
        page: number;
    }

    function _getViewType(view: Dashboards.IView, reportObject: IDashboardViewReportObject): ViewType {
        let descriptor = <Dashboards.ISpreadSheetDescriptor>view.descriptor,
            viewType = view.type;
        if (viewType === ViewType.spreadSheet) {
            viewType = (descriptor.displayType === SpreadSheetDisplayType.grid ? RendererType.preview : RendererType.infoPreview) === reportObject.rendererType ? ViewType.spreadSheet : ViewType.chart;
        }
        return viewType;
    }

    function _canRender(dashboard: IDashboard, reportObject: IDashboardViewReportObject): boolean {
        let view: Dashboards.IView = Tools.findById(reportObject.viewId, dashboard.views);
        return view && ((reportObject.rendererType === RendererType.preview) || ((reportObject.rendererType === RendererType.infoPreview) && (view.type === ViewType.spreadSheet)));
    }
    
    function _renderImage(reportObject: IDashboardViewReportObject, view: Dashboards.IMapView|Dashboards.IChart): Promise<Readonly<Controls.IReportViewBlock>> {
        let width: number = Math.floor(reportObject.width * 72 / 25.4),    // pixel at 72 dpi
            height: number = Math.floor(reportObject.height * 72 / 25.4);
        return view.getImage(width, height).then((data: any) => ({
            type: Controls.ReportViewBlockType.image,
            data: `${ImageAdapter.header}${data}`
        }));
    }
        
    function _renderLegend(reportObject: IDashboardViewLegendReportObject, view: Dashboards.IView): Promise<Readonly<Controls.IReportViewBlock>> {
        let width: number = Math.floor(reportObject.width * 72 / 25.4),    // pixel at 72 dpi
            height: number = Math.floor(reportObject.height * 72 / 25.4);
        return view.getLegend(width, height, reportObject.horizontal).then((data: any) => ({
            type: Controls.ReportViewBlockType.image,
            data: `${ImageAdapter.header}${data}`
        }));
    }
        
    function _check(dashboard: IDashboard, reportObject: IDashboardViewReportObject): boolean {
        let view: Dashboards.IView;
        return (reportObject.type !== Globals.ReportObjectType.dashboardView) || !(view = Tools.findById(reportObject.viewId, dashboard.views)) || (view.type !== ViewType.unknown);
    }
    
    export class ChartAdapter extends ImageAdapter<IChartModel|IReportModel, Controls.ReportPage> {
        protected readonly _data: boolean;
        protected _isData: boolean;
        protected _options: Partial<Dashboards.IChartOptions>;
        protected _sequence: number;
        
        constructor(control: Controls.ReportPage, chartData: boolean) {
            super(control);
            this._data = chartData;
            this._sequence = 0;
        }
        
        protected _onChartReady(chart: Globals.IChartModel|void, sequence: number): void {
            this.control.setData(<any>chart);
        }

        protected _onReport(model: IReportModel, metadata: Globals.IReportMetadata|void, data: Dashboards.IReportContentData|void, indice: number, sequence: number): void {
            let dashboard: IDashboard,
                page;
            
            if (sequence === this._sequence) {
                if (metadata && metadata.pages && (page = metadata.pages[indice]) && data && (dashboard = model.dashboard) && page.objects.every((reportObject: IDashboardViewReportObject) => _check(dashboard, reportObject))) {
                    let promises: Promise<Readonly<Controls.IReportViewBlock>>[] = [];

                    this._isData = true;
                    page.objects.forEach((reportObject: IDashboardViewReportObject, indice) => {
                        if (reportObject.type === Globals.ReportObjectType.dashboardView) {
                            let view: Dashboards.IView = Tools.findById(reportObject.viewId, dashboard.views); 

                            if (view) {
                                if (reportObject.rendererType === RendererType.legend) {
                                    promises[indice] =_renderLegend(<IDashboardViewLegendReportObject>reportObject, view);
                                }
                                else if (_canRender(dashboard, reportObject)) {
                                    switch (_getViewType(view, reportObject)) {
                                        case Dashboards.ViewType.detailedSheet:
                                        case Dashboards.ViewType.aggregatedSheet:
                                        case Dashboards.ViewType.spreadSheet:
                                            promises[indice] = (<Dashboards.ISheet>view).getGridData().then((gridData: IGridData): Controls.IReportViewBlockGridView => ({
                                                type: Controls.ReportViewBlockType.gridView,
                                                data: new Dashboards.GridApp(gridData, view.type === ViewType.detailedSheet)
                                            }));
                                            break;
                                        case Dashboards.ViewType.chart:
                                        case Dashboards.ViewType.detailedChart:
                                            promises[indice] = Dashboards.checkChartData(<IChart>view) ? (<Dashboards.IChart>view).getChartData().then((chart: Globals.IChartModel): Controls.IReportViewBlockCharts => ({
                                                    type: Controls.ReportViewBlockType.charts,
                                                    data: chart
                                                })):
                                                 _renderImage(reportObject, <Dashboards.IChart>view);
                                            break;
                                        case Dashboards.ViewType.map:
                                            promises[indice] = _renderImage(reportObject, <Dashboards.IMapView>view);
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                        }
                    });
                    let report: {
                        metadata: Globals.IReportMetadata;
                        data: Globals.IReportData;
                    } = {
                        metadata: <Globals.IReportMetadata>metadata,
                        data: {
                            tokens: data.tokens,
                            views: promises
                        }
                    };
                    this.control.setPage(report, indice);
                } else {
                    this._updateReport(model, indice, sequence);
                }
            }
        }

        protected _updateReport(model: IReportModel, indice: number, sequence: number): void {
            if (!this.control.isLoading()) {
                this.control.setUrl();
                this.control.loadingStart();
            }
            model.getImage(this.control.width, this.control.height, indice).then(data => sequence === this._sequence && this._onImageReady(data));
        }

        protected _update(model: IChartModel|IReportModel): void {
            let data = this._data,
                sequence = ++this._sequence;
            
            this._isData = false;
            this.control.clear();
            if (model) {
                model.getType().then(viewType => {
                    if (viewType === Dashboards.ViewType.report) {
                        let reportModel = <IReportModel>model,
                            indice = (this.options && this.options.page) || 0;

                        data ?
                            Promise.all([reportModel.getReportMetadata(), reportModel.getReportData()]).then(([metadata, data]) => this._onReport(reportModel, metadata, data, indice, sequence)):
                            this._updateReport(reportModel, indice, sequence);
                    } else if ((viewType === Dashboards.ViewType.chart) || (viewType === Dashboards.ViewType.spreadSheet)) {
                        let chartModel = <IChartModel>model;
                        (this._isData = data && chartModel.drawable) ?
                            chartModel.getChartData().then(chart => this._onChartReady(chart, sequence)):
                            super._update(model);
                    }
                });
            }
        }
        
        public get options(): Partial<Dashboards.IChartOptions> {
            return this._options;
        }
        
        public set options(value: Partial<Dashboards.IChartOptions>) {
            this._options = value;
            this.refresh();
        }
        
        public get isData(): boolean {
            return this._data && this._model && this._isData;
        }
    }
};