/**
 * Created by jean.rennes on 03/02/2016.
 */
///<reference path="../../models/dashboards/Dashboard.ts" />
///<reference path="../../views/controls/RadioGroup.ts" />
///<reference path="../../helpers/AdapterBase.ts" />

namespace AFC.Dashboards {
    export class RedistrictAdapter extends AFC.Tools.AdapterBase<IZone> {
        protected _control: Controls.RadioGroup;
        protected _codeColumn: number;

        constructor(radioGroup: Controls.RadioGroup) {
            super();
            this._control = radioGroup;
            this._codeColumn = -1;
        }

        protected _onDescriptor(descriptor: IRadiusAreaDescriptor | IIsodistanceAreaDescriptor | IIsochroneAreaDescriptor | IPredefinedAreaDescriptor | IBulkMailAreaDescriptor): void {
            let partition: IZonePartition = descriptor && descriptor.partition,
                subsets: ISubsetDescriptor[] = partition && partition.subsets.filter((subset: ISubsetDescriptor) => subset.type !== ZoneType.subsetUnion);
            this._codeColumn = descriptor.dataNodes.findIndex(dataNode => dataNode.qualifier === DataQualifier.code);
            this._control.setItems(subsets || []);
            this._control.check(0);
        }

        protected _update(model: IZone): void {
            model.getDescriptor().then(this._onDescriptor.bind(this));
        }

        public affectRow(row: ReadonlyArray<any>): void {
            let i: number = this._control.checked,
                codeColumn = this._codeColumn;
            
            if ((i !== void 0) && (codeColumn !== -1)) {
                let subsets: ISubsetDescriptor[] = <any>this._control.getItems(),
                    subset = subsets && subsets[0];
                this._model.district.affect(row[codeColumn], subset.id);
            }
        }
    }
}