/**
 * Created by jean.rennes on 31/03/2017.
 */
///<reference path="../../models/data/Global.ts" />
///<reference path="../../views/controls/Label.ts" />
///<reference path="../../helpers/AdapterBase.ts" />

namespace AFC.Data {
    export interface IPanel {
        update: (datasource?: IDataContainer)=>any;
    }

    export class LabelPanel implements IPanel {
        protected readonly _named: {name: string};
        protected readonly _label: Controls.Label;

        constructor(named: {name: string}, label: Controls.Label) {
            this._named = named;
            this._label = label;
        }
                
        public update(dataContainer?: IDataContainer): void {
            this._label.setHTML(this._named.name && dataContainer ? dataContainer.getData(this._named.name, true) : null);
        }
    }
        
    export class PanelAdapter extends AFC.Tools.AdapterBase<IDataContainerProvider> {
        protected _cnt: number = 0;
        protected _panels: {[key: string]: IPanel};
        protected _dataContainer: IDataContainer;

        protected _onContainer(dataContainer: IDataContainer): void {
            this._dataContainer = dataContainer;
            this._refresh();
        }
        
        protected _refresh(): void {
            if (this._panels) {
                for (let key in this._panels) {
                    this._panels[key].update(this._dataContainer);
                }
            }
        }
        
        protected _update(model: IDataContainerProvider): void {
            this._dataContainer = null;
            this._refresh();
            model.getDataContainer().then(dataContainer => this._onContainer(dataContainer));
        }
        
        public add(panel: IPanel): any {
            let key: number = ++this._cnt;
            
            (this._panels || (this._panels = {}))[key] = panel;
            panel.update(this._dataContainer);
            return key;
        }
        
        public remove(key: any): void {
            let panel: IPanel = this._panels[key];
          
            if (panel) {
                delete this._panels[key];
                panel.update();
            }
        }
        
        public unbind(): void {
            delete this._dataContainer;
            this._refresh();
            super.unbind();
        }
        
        public refresh(key?: any): void {
            key ? this._panels[key] && this._panels[key].update(this._dataContainer) : this._refresh();
        }
    }
};