/**
 * Created by jean.rennes on 19/09/2017.
 */
///<reference path="../../models/data/Data.ts" />
///<reference path="../../views/controls/ComboBox.ts" />
///<reference path="../../helpers/AdapterBase.ts" />

namespace AFC.Data {
    export class ComboBoxAdapter extends AFC.Tools.AdapterBase<IDataSource & Tools.IObservable> {
        public readonly control: Controls.ComboBox;
        public onGenerate: ()=> any;
        private _value:string;
        
        constructor(control: Controls.ComboBox) {
            super();
            this.control               = control;
            this.control.onSelChange   = this.onControlChange;
            this._value                = '';
        }
        
        public onControlChange(this: GlobalEventHandlers, ev: Event): void {
        }
        
        public set value(newVal: string) {
            this._value = newVal;
        }
            
        public get value(): string {
            return this.control && this.control.value;
        }
        
        private empty() {
            if (this.control) {
                let v = this.control.value;
                
                if (v && v != "")
                    this._value = v;
            }
            this.control.empty();
        }
        
        protected _update(model: IDataSource): void {
            this.empty();
            if (model) {
                let getContainer: (i: number)=> IDataItemContainer;
                let maxItem: number = model.length, container: IDataItemContainer;
                let found = false;
                
                getContainer = (i: number)=> model.item(i);
                for (let i: number = 0; i < maxItem; ++i) {
                    container = getContainer(i);
                    if (container.dataItem['id'] == this._value)
                        found = true;
                    this.control.addItem(container, void 0);
                }
                if (!found && (model.length > 0))
                    this._value = getContainer(0).dataItem['id'];
                this.control.value = this._value;
            }
            this.onGenerate && this.onGenerate();
        }
        
        public unbind(): void {
            this.empty();
            super.unbind();
        }                        
    }
}