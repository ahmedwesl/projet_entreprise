/**
 * Created by jean.rennes on 19/09/2017.
 */
 ///<reference path="../Global.ts" />

namespace AFC.Controls {
    export class ComboBox extends Control {
        private _select: HTMLSelectElement;
        private _disabled: boolean;
        
        constructor(element: string | HTMLElement) {
            super(element);
            
            this._disabled = false;
            this.empty();
        }
        
        private _onclick(ev: Event): any {
            let options: HTMLCollectionOf<HTMLOptionElement> = this._select.getElementsByTagName("option");
             
            $(options).css("background", $(this._select).css("background-color"));
            $(options).css("color", $(this._select).css("color"));
            $(options).css("font", $(this._select).css("font"));
        }
        private _onover(ev: Event): any {
            $(this._select).css("background-image", this._getBckImage(true));
        }
        private _onout(ev: Event): any {
            $(this._select).css("background-image", this._getBckImage(false));
        }
        private _onSelChange(ev: Event): any {
            this.onSelChange(ev);
        }
        public onSelChange(ev: Event): any {
            
        }
        
        public get disabled() {
            return this._disabled;
        }
        public set disabled(newVal: boolean) {
            if (this._disabled != newVal) {
                this._disabled = newVal;
                if (this._select)
                    this._select.disabled = this._disabled;
            }
        }
        
        public set value(newVal: string) {
            if (this._select)
                this._select.value = newVal;
        }
            
        public get value(): string {
            if (this._select)
                return this._select.value;
            return '';
        }
        
        public addItem(value: {[key: string]: any}, templateName?: string): void {
            let option: HTMLOptionElement = document.createElement<'option'>('option');
            option.value        = value.dataItem['id'];
            option.label        = value.dataItem['name'];
            option.text         = value.dataItem['name'];
            this._select.appendChild(option);
        }
        
        public empty(): void {
            $(this.node).empty();
            
            this._select = document.createElement<'select'>('select');
            $(this._select).css("background-color", $(this.node).css("background-color"));
            $(this._select).css("color", $(this.node).css("color"));
            $(this._select).css("font", $(this.node).css("font"));
            $(this._select).css("background-image", this._getBckImage(false));
            
            this._select.disabled = this._disabled;
                        
            this.node.appendChild(this._select);
            this._select.onchange       = this._onSelChange.bind(this);
            this._select.onclick        = this._onclick.bind(this);
            this._select.onmouseover    = this._onover.bind(this);
            this._select.onmouseout     = this._onout.bind(this);
        }
        
        private _getBckImage(hover: boolean): string {
            if (this.disabled)
                return "none";
                
            var hexDigits   = new Array("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"); 
            var rgb2hex     = function(rgb: string) {
                var hex = function(x: number) {
                    return isNaN(x) ? "00" : hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];
                }
                let rgbMatch = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                if (rgbMatch && rgbMatch.length >= 4)
                    return "%23" + hex(+rgbMatch[1]) + hex(+rgbMatch[2]) + hex(+rgbMatch[3]);
                return "%23000000";
            };
            
            let color       = rgb2hex($(this._select).css("color"));
            let transform   = hover ? '' : 'translate(0%20292.4)%20rotate(-90)';
                        
            return "url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20transform%3D%22"+transform+"%22%20fill%3D%22"+color+"%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E')";
        }
    }
}