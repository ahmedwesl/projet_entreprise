/**
 * Created by jean.rennes on 21/02/2020.
 */
namespace AFC.Controls {
    const _activity = Symbol(),
        _window = Symbol(),
        _viewState = Symbol(),
        _view = Symbol(),
        _performSetView = Symbol(),
        _onDismissListener = Symbol(),
        _outHandle = Symbol();

    export interface IOnDismissListener {
        onDismiss(dialog: Dialog): void;
    }

    export class Dialog {
        /** @internal */
        private [_window]: Controls.Window;
        /** @internal */
        private [_viewState]: Application.Bundle;
        /** @internal */
        private [_view]: gui.IView;
        /** @internal */
        private [_activity]: Application.Activity;
        /** @internal */
        private [_onDismissListener]: IOnDismissListener;
        /** @internal */
        private [_outHandle]: (event: Event)=> void;
        
        constructor(activity: Application.Activity) {
            this.setOwnerActivity(activity);
        }
        
        /** @internal */
        private [_performSetView](): void {
            let window = this[_window],
                view = window && this[_view];
                
            if (view) {
                $(window.getElement()).empty().append(view);
            }
        }
                
        protected _onCreate(savedInstanceState?: Application.Bundle) {
        }
        
        protected _onStart() {
        }
        
        protected _onStop() {
        }
        
        public getOwnerActivity(): Application.Activity {
            return this[_activity];
        }
        
        public getWindow(): Window {
            return this[_window];
        }
        
        public show(): void {
            let window,
                query;
            
            this.create();
            if ((window = this[_window]) && !(query = $(window.getElement())).is(":visible")) {
                query.show();
                this._onStart();
            }
        }
        
        public hide(): void {
            let window = this[_window],
                query;
            
            if (window && (query = $(window.getElement())).is(":visible")) {
                query.hide();
                this._onStop();
            }
        }
        
        public create(): void {
            let window = this[_window];
            
            if (!window && this[_activity]) {
                let element = (window = this[_window] = new Window(this[_activity])).getElement();
                $(element).hide();
                this._onCreate();
            }
        }
        
        public dismiss(): void {
            let window = this[_window];
            
            if (window) {
                this.hide();
                this[_onDismissListener] && this[_onDismissListener].onDismiss(this);
                this[_viewState] = this.onSaveInstanceState();
                this.setCanceledOnTouchOutside(false);
                window.destroy();
                delete this[_window];
            }
        }
        
        public onSaveInstanceState(): Application.Bundle {
            let view = this[_view],
                savedInstanceState;
                
            if (view) {
                gui.onSaveInstanceState(this[_activity], view, savedInstanceState = new Application.Bundle());
                savedInstanceState.putValue("DIALOG_SHOWING_TAG", $(this[_window].getElement()).is(":visible"));
            }
            return savedInstanceState;
        }
        
        public onRestoreInstanceState(savedInstanceState: Application.Bundle) {
            let view = this[_view];
            
            if (view) {
                gui.onRestoreViewState(this[_activity], view, this[_activity].getSupportFragmentManager(), savedInstanceState);
                savedInstanceState.getValue("DIALOG_SHOWING_TAG") && this.show();
            }
        }
               
        public setContentView(view: gui.IView): void {
            if (this[_view] !== view) {
                this[_view] = view;
                this[_performSetView]();
            }
        }
                
        public setTitle(title: string): void {
            //this._window.setTextValue('title', title);
        }
        
        public setOwnerActivity(activity: Application.Activity): void {
            this[_activity] = activity;
        }
        
        public setOnDismissListener(listener: IOnDismissListener): void {
            this[_onDismissListener] = listener;
        }
        
        public setCanceledOnTouchOutside(cancel: boolean): void {
            let body = document.body;

            if (cancel) {
                this[_outHandle] || body.addEventListener('click', this[_outHandle] = event => this[_view]?.contains(<Node>event.target) || this.dismiss(), true);
            } else if (this[_outHandle]) {
                body.removeEventListener('click', this[_outHandle], true);
                delete this[_outHandle];
            }
        }
    }
}