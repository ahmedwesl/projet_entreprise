/*---------------------------------------------------------------------*/
/*---------------------------------------------------------------------*/

declare interface Spinner {
    readonly opts: AFC.Controls.ISpinnerAnimationOptions;
    spin(target: any): Spinner;
    stop(): void;
    incremental: number;
};

/*---------------------------------------------------------------------*/

var Spinner: new (options?: AFC.Controls.ISpinnerAnimationOptions) => Spinner;

// @ts-ignore
if (typeof module != "undefined") ({ Spinner: Spinner } = require("../../../node_modules/spin.js"));

/*---------------------------------------------------------------------*/

namespace AFC.Controls {
    export interface ISpinnerAnimationOptions {
        /**
         * The number of lines to draw
         */
        lines?: number;

        /**
         * The length of each line
         */
        length?: number;

        /**
         * The line thickness
         */
        width?: number;

        /**
         * The radius of the inner circle
         */
        radius?: number;

        /**
         * Scales overall size of the spinner
         */
        scale?: number;

        /**
         * Corner roundness (0..1)
         */
        corners?: number;

        /**
         * A CSS color string, or array of strings to set the line color
         */
        color?: string | string[];

        /**
         * A CSS color string, or array of strings to set the color that lines will fade to.
         * Defaults to transparent.
         */
        fadeColor?: string | string[];

        /**
         * The animation name used for the spinner lines. Defaults to 'spinner-line-fade-default'.
         */
        animation?: string;

        /**
         * The rotation offset
         */
        rotate?: number;

        /**
         * 1: clockwise, -1: counterclockwise
         */
        direction?: number;

        /**
         * Rounds per second
         */
        speed?: number;

        /**
         * The z-index (defaults to 2000000000)
         */
        zIndex?: number;

        /**
         * The CSS class to assign to the spinner
         */
        className?: string;

        /**
         * Top position relative to parent (defaults to 50%)
         */
        top?: string;

        /**
         * Left position relative to parent (defaults to 50%)
         */
        left?: string;

        /**
         * Whether to render the default shadow (boolean).
         * A string can be used to set a custom box-shadow value.
         */
        shadow?: boolean | string;

        /**
         * Element positioning
         */
        position?: string;
    }

    export class WaitBar extends Control {
        protected _options: Partial<ISpinnerAnimationOptions>;
        protected _spinner: Spinner;

        public static readonly defaultOptions: ISpinnerAnimationOptions = new Spinner({
            width: 4,           // The line thickness
            color: "#f35f23",   // #rgb or #rrggbb or array of colors
            speed: 0.5,         // Rounds per second
            lines: 14,          // The number of lines to draw
            length: 2,
            radius: 1.5,
        }).opts;

        constructor(element?: string | HTMLElement) {
            super(element);
        }

        public set options(options: Partial<ISpinnerAnimationOptions>) {
            options ? this._options = options : delete this._options;
            this._spinner && this.show();
        }

        public get options(): Partial<ISpinnerAnimationOptions> {
            return this._options;
        }

        public show(): void {
            let target = this.node;

            this._spinner?.stop();
            if (target) {
                let options = $.extend({ ...WaitBar.defaultOptions }, this._options);

                this._spinner = new Spinner(options).spin(target);
                target.style.visibility = 'visible';
            }
        }

        public hide(): void {
            let target = this.node;

            this._spinner?.stop();
            this._spinner = void 0;
            if (target) {
                target.style.visibility = 'hidden';
            }
        }
    }
}