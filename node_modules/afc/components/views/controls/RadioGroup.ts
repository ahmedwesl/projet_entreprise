/**
 * Created by jean.rennes on 03/02/2016.
 */
///<reference path="../Global.ts" />
///<reference path="Control.ts" />

namespace AFC.Controls {
    export class RadioGroup extends Control {
        protected static _cnt: number = 0;
        protected _items: ReadonlyArray<IListItem>;
        protected _checked: number;
        protected _name: string;

        constructor(element: string | HTMLElement, name?: string) {
            super(element);
            this._name = name || `__radioGroup${RadioGroup._cnt++}`;
            this.node.addEventListener('click', this._onClick.bind(this));
        }

        public get checked(): number {
            return this._checked;
        }

        protected _build(items: ReadonlyArray<IListItem>, query: JQuery, name: string): void {
            items.forEach((item: IListItem, indice: number)=> {
                let s: string = `${name}|${indice}`,
                    checked: string = indice === this._checked ? 'checked' : '';
                query.append(`<div><input name='${name}' id='${s}' ${checked} type='radio' value='${indice}' /><span><label for='${s}'>${item.name||''}</label></span></div>`);
            });
        }

        protected _onClick(event: JQuery.ClickEvent) {
            let id: string = (<HTMLInputElement>event.target).value;
            let i: number = parseInt(id);
            
            if (!isNaN(i) && (this._checked !== i)) {
                this._checked = i;
                this._dispatchChange();
            }
        }

        public setItems(items?: ReadonlyArray<IListItem>): void {
            let container: JQuery = $(this.node);
            
            delete this._checked;
            container.empty();
            items ? this._build(this._items = items, container, this._name) : delete this._items;
        }

        public getItems(): ReadonlyArray<IListItem> {
            return this._items;
        }

        public check(i?:  number): number {
            let u: number = this._checked;
            if (this._checked !== i) {
                let inputs: HTMLCollectionOf<HTMLInputElement> = this.node.getElementsByTagName("input");
                
                delete this._checked;
                $(inputs).prop("checked", false);
                if (i !== void 0) {
                    this._checked = i;
                    inputs[i].checked = true;
                }
            }
            return u;
        }
    }
}