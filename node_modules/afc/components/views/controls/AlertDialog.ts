/**
 * Created by jean.rennes on 21/02/2020.
 */
 ///<reference path="Dialog.ts" /> 
 
namespace AFC.Controls {
    function _setupText(dialog: AlertDialog, element: Element, text: string): boolean {
        if (element) {
            if (text !== void 0) {
                (text === '') || element.appendChild(document.createTextNode(text));
                return true;
            } else {
                element.parentNode.removeChild(element);
            }
        }
    }
        
    function _setupButton(dialog: AlertDialog, panel: Element, whichButton: number, buttons: {[key: number]: [string, (dialog: AlertDialog, which: number)=> any]}): void {
        let element = panel.querySelector(`#${_buttonIds[whichButton]}`),
            button = buttons[whichButton];
            
        _setupText(dialog, element, button && button[0]) && element.addEventListener('click', () => button[1](dialog, whichButton));
    }
    
    const _title = Symbol(),
        _message = Symbol(),
        _buttons = Symbol(),
        _view = Symbol();
    
    export class AlertDialog extends Dialog {
        /** @internal */
        protected [_title]: string; 
        /** @internal */
        protected [_message]: string; 
        /** @internal */
        protected [_buttons]: {[key: number]: [string, (dialog: AlertDialog, which: number)=> any]};
        /** @internal */
        protected [_view]: string|gui.IView;
        
        public static BUTTON_POSITIVE: number = -1;
        public static BUTTON_NEUTRAL: number = -2;
        public static BUTTON_NEGATIVE: number = -3;

        protected _setupTitle(panel: Element): void {
            _setupText(this, panel, this[_title]);
        }
    
        protected _setupContent(panel: gui.AfcGuiDiv): void {
            if (panel) {
                let view: string|gui.IView,
                    customView: gui.IView,
                    inflater;
                if (view = this[_view]){
                    if (Tools.Data.isString(view)) {
                        inflater = this.getOwnerActivity().getLayoutInflater();
                        customView = inflater.inflate(<string>view, panel);
                    } else {
                       customView = <gui.IView>view; 
                    }
                    customView && panel.replaceChild(customView, panel.querySelector('#custom'));
                }
                let element = panel.querySelector('#message');
                _setupText(this, element, this[_message]);
            }
        }
    
        protected _setupButtons(panel: Element): void {
            if (panel) {
                _setupButton(this, panel, AlertDialog.BUTTON_POSITIVE, this[_buttons]);
                _setupButton(this, panel, AlertDialog.BUTTON_NEUTRAL, this[_buttons]);
                _setupButton(this, panel, AlertDialog.BUTTON_NEGATIVE, this[_buttons]);
            }
        }
    
        protected _onCreate(savedInstanceState?: Application.Bundle) {
            let template: HTMLTemplateElement = document.querySelector(`template#AlertDialog`);

            if (template) {
                let view = <gui.AfcGuiDiv>document.createElement('afc-gui-div'),
                    topPanel, contentPanel, buttonPanel;
                
                view.className = 'InflatedFragment';
                view.appendChild(document.importNode(template.content, true));
                topPanel = view.querySelector("#topPanel");
                contentPanel = view.querySelector("afc-gui-div#contentPanel");
                buttonPanel = view.querySelector("#buttonPanel");
                super._onCreate(savedInstanceState);
                this.setContentView(view);
                this.setCanceledOnTouchOutside(true);
                this._setupTitle(topPanel);
                this._setupContent(<gui.AfcGuiDiv>contentPanel);
                this._setupButtons(buttonPanel);
            }
        }
        
        public setTitle(title: string): void {
            this[_title] = title;
        }
        
        public setView(view: string|gui.IView): void {
            this[_view] = view;
        }
        
        public setMessage(message: string): void {
            this[_message] = message;
        }
        
        public setButton(whichButton: number, text: string, listener: (dialog: AlertDialog, which: number)=> any): void {
            (this[_buttons] || (this[_buttons] = {}))[whichButton] = [text, listener];
        }
    }
    
    const _buttonIds = {
        [AlertDialog.BUTTON_POSITIVE]: 'positive',
        [AlertDialog.BUTTON_NEUTRAL]: 'neutral',
        [AlertDialog.BUTTON_NEGATIVE]: 'negative'
    };       
}