 ///<reference path="../Global.ts" />

namespace AFC.Controls {
    function _check(value: any) {
        return (value === null) ? void 0 : value;
    }

    function _f1(key: string, value: any): any {
        return value && _check(value[key]);
    }

    function _f2(key0: string, key1: any, value: any): any {
        return value && value[key0] && _check(value[key0][key1]);
    }

    function _fn(keys: string[], value: any): any {
        for (let i: number = 0; i < keys.length; ++i) {
            if (_check(value) === void 0)
                return;
            value = value[keys[i]];
        }
        return value;
    }

    function resolveTemplate(value: {[key: string]: any}, key: string, dataBinder: (templateName: string, key: string, value: {[key: string]: any})=> any, formatNumbers: boolean, formatter?: string): string {
        let ret: any = dataBinder && dataBinder("", key, value);
        let items: string[] = key.split('.');
        let accelerator = items.length < 2 ? _f1.bind(null, items[0]) : (items.length < 3 ? _f2.bind(null, items[0], items[1]) : _fn.bind(null, items));

        ret = accelerator(value);

        if (formatter === "formatNumberM") {
            ret = `${ (ret / 1000000).toFixed(2).toLocaleString() }M`;
        }

        if (formatNumbers && Tools.Data.isNumber(ret)) {
            let formatHelper = new AFC.Tools.StringTools.FormatString('', AFC.Data.DataKind.real);
            ret = formatHelper.getFormated(ret);
        }

        return ret === void 0 ? '' : ret;
    }

    export class TemplateElem extends Control {
        protected _template: string;
        protected _templates: {[key: string]: string};
        private   _formatNumbers: boolean;

        public set template(contentHtml: string) {
            this._template = contentHtml;
        }

        public get template() {
            return this._template
        }

        public setTemplate(value: string, name?: string) {
            if (name === void 0) {
                value ? this._template = value : delete this._template;
            } else if (value) {
                (this._templates || (this._templates = {}))[name] = value;
            } else if (this._templates) {
                delete this._templates[name];
            }
        }

        public getTemplate(name: string) {
            if (!this._templates) {
                return this.template;
            } else {
                return this._templates[name] || this.template;
            }
        }

        public dataBinder: (name: string, key: string, value: Data.IDataItemContainer) => any;

        public setFormatNumbers(formatNumbers: boolean) {
            this._formatNumbers = formatNumbers;
        }

        /**
         * Interpret template and replace{{MY_VAR_NAME|MY_FORMATTER}}
         * @param value
         */
        public generateContent(value: {[key: string]: any}): void {
            let div: HTMLDivElement = document.createElement<'div'>('div');
            let dataBinder = this.dataBinder;
            let formatNumbers= this._formatNumbers;
            let template = this.getTemplate(value.templateName ?? void 0);
            let innerHTML = (
                template && template.replace(/{{([A-Z0-9_.]+)(?:\|([A-Z0-9_.]+))?}}/ig,
                (match: string, variable: string, formatter: string) => resolveTemplate(value, variable, dataBinder, formatNumbers, formatter)
            )) || '';

            div.innerHTML = innerHTML;//.replace(/ /g, "&nbsp;");

            while (div.childNodes.length) {
                this.node.appendChild(div.firstChild);
            }
        }

        /**
         * Empty htmlcontent of node
         */
        public empty(): void {
            while(this.node.firstChild) {
                this.node.removeChild(this.node.firstChild);
            }
        }
    }
}