/**
 * Created by jean.rennes on 19/09/2017.
 */
 ///<reference path="../Global.ts" />

namespace AFC.Controls {
    
    export interface ITemplate {
        content: string;
        accelerators?: {
            [key: string]: (value: {[key: string]: any})=> string;
        }
    }

    function _check(value: any) {
        return (value === null) ? void 0 : value;
    }

    function _f1(key: string, value: any): any {
        return value && _check(value[key]);
    }

    function _f2(key0: string, key1: any, value: any): any {
        return value && value[key0] && _check(value[key0][key1]);
    }

    function _fn(keys: string[], value: any): any {
        for (let i: number = 0; i < keys.length; ++i) {
            if (_check(value) === void 0)
                return;
            value = value[keys[i]];
        }
        return value;
    }


    function resolveTemplate(templateName: string, template: ITemplate, value: { [key: string]: any }, key: string, dataBinder: (templateName: string, key: string, value: { [key: string]: any }) => any, formatNumbers: boolean): string {
        let ret: any = dataBinder && dataBinder(templateName, key, value);
        if (ret === void 0) {
            let accelerator: (value: {[key: string]: any})=> string = (template.accelerators || (template.accelerators = {}))[key];
            if (!accelerator) {
                let items = Repeater.splitKey(key);
                accelerator = template.accelerators[key] = items.length < 2 ? _f1.bind(null, items[0]) : (items.length < 3 ? _f2.bind(null, items[0], items[1]) : _fn.bind(null, items));
            }
            ret = accelerator(value);
        }
        if (formatNumbers && Tools.Data.isNumber(ret)) {
            let formatHelper = new AFC.Tools.StringTools.FormatString('', AFC.Data.DataKind.real);
            ret = formatHelper.getFormated(ret);
        }
        return ret === void 0 ? '' : ret;
    }
    
    export class Repeater extends Control {
        protected _template: ITemplate;
        protected _templates: {[key: string]: ITemplate};
        private   _formatNumbers: boolean;
        
        public static splitKey(key: string): string[] {
            let regex = /(\[\s*("|')(.*)\2\])|(\.(\w*))/g,
                result,
                items: string[];

            do {
                result = regex.exec(key);
                if (!items) {
                    let lastIndex;

                    if (result) {
                        lastIndex = result.index;
                    }
                    items = [key.substring(0, lastIndex)];
                }
                result && items.push(result[3] || result[5]);
            } while (result);
            return items;
        }

        public dataBinder: (name: string, key: string, value: Data.IDataItemContainer)=> any;
        
        public setFormatNumbers(formatNumbers: boolean) {
            this._formatNumbers = formatNumbers;
        }
        
        public static generateContent(container: Node, templateName: string, template: ITemplate, value: {[key: string]: any}, dataBinder?: (templateName: string, key: string, value: {[key: string]: any})=> any, formatNumbers?: boolean): void {
            let div: HTMLDivElement = document.createElement<'div'>('div');
            div.innerHTML = (template && template.content.replace(/{{([^}]+)}}/ig, (match: string, p1: string) => resolveTemplate(templateName, template, value, p1, dataBinder, formatNumbers))) || '';
            while (div.childNodes.length) {
                container.appendChild(div.firstChild);
            }
        }
        
        public setTemplate(value: string, name?: string) {
            if (name === void 0) {
                value ? this._template = {content: value} : delete this._template;
            } else if (value) {
                (this._templates || (this._templates = {}))[name] = {content: value};
            } else if (this._templates) {
                delete this._templates[name];
            }
        }
        
        public addItem(value: {[key: string]: any}, templateName?: string): void {
            let template: ITemplate = (templateName && this._templates && this._templates[templateName]) || this._template;
            Repeater.generateContent(this.node, templateName, template, value, this.dataBinder, this._formatNumbers);
        }
        
        public empty(): void {
            $(this.node).empty();
        }
    }
}