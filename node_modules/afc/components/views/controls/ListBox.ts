/**
 * Created by jean.rennes on 06/10/2015.
 */
///<reference path="../Global.ts" />
///<reference path="Control.ts" />

namespace AFC.Controls {
    export class ListBox extends Control {
        protected _list: JQuery;
        protected _items: ReadonlyArray<IListItem>;
        protected _selected: number[];
        protected _multiSelect: boolean;
        protected _pending: number;

        constructor(element: string | HTMLElement) {
            super(element);
            this._multiSelect = false;
            this.node.addEventListener('click', this._onClick.bind(this));
        }

        public get selected(): number[] {
            return this._selected||[];
        }

        protected _build(container: JQuery, items: ReadonlyArray<IListItem>): JQuery {
            let ul: HTMLUListElement = document.createElement('ul');
            let query: JQuery = $(ul);
            items.forEach((item: IListItem) => { query.append(`<li><a id='${item.id}' href='javascript:void 0;'>${item.name||''}</a></li>`);});
            container.append(ul);
            return query.find('a');
        }
        
        protected _checkSelection(oldItems: ReadonlyArray<IListItem>, oldSelected: number[]): void {
            if (this._items && oldItems && oldSelected) {
                oldSelected.forEach((j: number) => {
                    for (let i: number = 0; i < this._items.length; ++i) {
                        if (this._items[i].id === oldItems[j].id) {
                            (this._selected||(this._selected = [])).push(i);
                            break;
                        }
                    }
                });
            }
        }
        
        protected _refresh(): void {
            if (this._pending === void 0) {
                this._pending = setTimeout(()=> {
                    delete this._pending;
                    this._list.removeClass('selected');
                    this._selected && this._selected.forEach((i: number) => $(this._list[i]).addClass('selected'));
                }, 0);
            }
        }

        protected _onClick(e: JQuery.ClickEvent): void {
            if (this._multiSelect)
                throw new Error('Not implemented');
            
            let selection: number = e && this._list.index(e.target);
            (selection !== void 0) && (selection >= 0) ? (this._selected = [selection]) : delete this._selected;
            this._refresh();
            this._dispatchChange();
        }
        
        public set multiSelect(value: boolean) {
            this._multiSelect = value;
        }

        public get multiSelect(): boolean {
            return this._multiSelect;
        }

        public setItems(items?: ReadonlyArray<IListItem>): void {
            let oldItems: ReadonlyArray<IListItem> = this._items;
            let oldSelected: number[] = this._selected;
            let container: JQuery = $(this.node);
            
            container.empty();
            delete this._items;
            delete this._selected;
            delete this._list;
            if (items && items.length) {
                this._list = this._build(container, this._items = items);
                this._checkSelection(oldItems, oldSelected);
                this._refresh();
            }
        }

        public getItems(): ReadonlyArray<IListItem> {
            return this._items;
        }

        public select(selection?: ReadonlyArray<number>): void {
            if (selection && selection.length) {
                this._selected = this._multiSelect ? selection.filter((i: number) => i < this._items.length) : [selection[0]];
            } else
                delete this._selected;
            this._refresh();
        }
    }
}