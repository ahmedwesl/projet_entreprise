namespace AFC.Controls {
    /*
    class _ProgressInfoBarTask {
        public readonly progressData:       AFC.Globals.IProgressData;
        /*private _htmlElement:               HTMLElement;
        private _progressBarDiv:            HTMLElement;
        private _commentNode:               Text;*
                
        constructor(progressData: AFC.Globals.IProgressData) {
            this.progressData = progressData;
            //this._htmlElement = null;
        }
        
        /*        
        public stop() {
            if (this._commentNode) {
                this._commentNode.textContent = 'Terminé (' + ((Date.now() - this._timerStart) / 1000) + ' s)';
            }
                        
            if (this._htmlElement) {
                this._htmlElement.style.opacity     = '0.5';
                this._htmlElement.style.background  = '#45ff73';
                this._progressBarDiv.style.width    = '100%';
            }
            
        }*/
        
        /*
        public getHTMLElement() : HTMLElement {
            if (!this._htmlElement) {
                let mainDiv: HTMLElement;
                let commentDiv: HTMLElement;
                let progressDiv: HTMLElement;
                let titleText: Text;
                let titleDiv: HTMLElement;
                let spinnerDiv: HTMLElement;
                
                this._timerStart = Date.now();
                
                mainDiv = document.createElement('div');
                if (mainDiv) {
                    mainDiv.setAttribute('id', 'ProgressInfoBarTask' + this.tid);
                    mainDiv.classList.add('ProgressInfoBarTask');
                    
                    titleDiv    = document.createElement('div');
                    titleDiv.classList.add('ProgressInfoBarTaskTitle');
                    
                    titleText   = document.createTextNode(this.title);
                    titleDiv.appendChild(titleText);
                    
                    spinnerDiv  = document.createElement('div');
                    this._spinner = new Spinner( {
                                                    lines: 6, // The number of lines to draw
                                                    length: 4, // The length of each line
                                                    width: 2, // The line thickness
                                                    radius: 4, // The radius of the inner circle
                                                    corners: 1, // Corner roundness (0..1)
                                                    rotate: 0, // The rotation offset
                                                    direction: 1, // 1: clockwise, -1: counterclockwise
                                                    color: '#ff0000', // #rgb or #rrggbb or array of colors
                                                    speed: 1, // Rounds per second
                                                    trail: 47, // Afterglow percentage
                                                    shadow: false, // Whether to render a shadow
                                                    hwaccel: false, // Whether to use hardware acceleration
                                                    className: 'spinner', // The CSS class to assign to the spinner
                                                    zIndex: 2e9, // The z-index (defaults to 2000000000)
                                                    top: '-5px', // Top position relative to parent in px
                                                    left: 'calc(100% - 15px)', // Left position relative to parent in px
                                                    position: 'relative'
                                                  }).spin(spinnerDiv);
                    titleDiv.appendChild(spinnerDiv);
                    
                    commentDiv    = document.createElement('div');
                    commentDiv.classList.add('ProgressInfoBarTaskComment');
                    this._commentNode = document.createTextNode('Préparation');
                    commentDiv.appendChild(this._commentNode);
                    
                    progressDiv = document.createElement('div');
                    progressDiv.classList.add('ProgressPctBackground');
                    this._progressBarDiv = document.createElement('div');
                    this._progressBarDiv.classList.add('ProgressPct');
                    progressDiv.appendChild(this._progressBarDiv);
                    
                    mainDiv.appendChild(titleDiv);
                    mainDiv.appendChild(commentDiv);
                    mainDiv.appendChild(progressDiv);
                    this._htmlElement = mainDiv;
                }
            }
            return this._htmlElement;
        }
        *
    }*/
        
    export class ProgressBar extends Control {
        private _runningTasks:      ReadonlyArray<Globals.IProgressInfoBarTask>;
        private _allTasksBar:       HTMLElement;
        private _progressBarDiv:    HTMLElement;
        private _textNode:          Text;
        private _fullDetailsMode:   boolean;
                
        constructor(element: string | HTMLElement) {
            super(element);
            this._allTasksBar       = null;
            this._fullDetailsMode   = false;
        }
        
        
        public isFullDetailsMode() : boolean {
            return this._fullDetailsMode;
        }
        
        public setFullDetailsMode(full: boolean): void {
            let value = !full;
            if (this._fullDetailsMode === value) {
                this._fullDetailsMode = !value;
                this._refresh();
            }
        }
        
        public refresh(tasks: ReadonlyArray<Globals.IProgressInfoBarTask>): void {
            this._runningTasks = tasks;
            this._refresh();
        }
        
        private _refresh(): void {
            let runningTasks: ReadonlyArray<Globals.IProgressInfoBarTask> = this._runningTasks;
            let bEmpty      = runningTasks.length <= 0;
            let messageTxt  = '';
            let target      = this.node;
            
            this._initHTMLControls();
            if (!bEmpty) {
                let completedSum = 0.0;
                let allCompleted: boolean;
                
                allCompleted = true;
                runningTasks.forEach(task => { 
                    if (task.progressData.status != AFC.Globals.ProgressStatus.completed) {
                        completedSum += task.progressData.completed;
                        allCompleted  = false;
                    }
                    else
                        completedSum += 1.0;
                    
                    let stepAndMessage = task.progressData.step;
                    if (!stepAndMessage)
                        stepAndMessage = '';
                    if (task.progressData.progress) {
                        if (stepAndMessage != '')
                            stepAndMessage += ' - ';
                        stepAndMessage += task.progressData.progress;
                    }
                    messageTxt = task.progressData.title;
                     if (!messageTxt)
                        messageTxt = '';
                    if (messageTxt != '') {
                        if (stepAndMessage != '')
                            messageTxt += ' : ';
                    }
                    messageTxt += stepAndMessage;
                });
                
                if (runningTasks.length != 1)
                    messageTxt = runningTasks.length + ' tâches en cours';
                if (!allCompleted) {
                    let globalPct = (completedSum / runningTasks.length) * 100.0;
                    this._progressBarDiv.style.width = globalPct + '%';
                }
                else    
                    this._progressBarDiv.style.width = '100%';
                this._textNode.textContent = messageTxt;
            }
            if (target)
                target.style.visibility = bEmpty ? 'hidden' : 'visible'; 
        }
        
        private _initHTMLControls(): void {
            if (this._allTasksBar == null) {
                let target = this.node;
                let mainDiv:        HTMLElement;
                let progressTextDiv:HTMLElement;
                let progressDiv:    HTMLElement;
                                         
                $(target).empty();
                mainDiv = document.createElement('div');
                
                mainDiv.setAttribute('id', 'ProgressInfoBarMain');
                mainDiv.classList.add('ProgressInfoBarMain');
                
                progressDiv = document.createElement('div');
                progressDiv.classList.add('ProgressPctBackgroundMain');
                this._progressBarDiv = document.createElement('div');
                this._progressBarDiv.classList.add('ProgressPctMain');
                progressDiv.appendChild(this._progressBarDiv);
                
                this._textNode      = document.createTextNode('');
                progressTextDiv     = document.createElement('div');
                progressTextDiv.classList.add('ProgressTextMain');
                progressTextDiv.appendChild(this._textNode);
                progressDiv.appendChild(progressTextDiv);
                    
                mainDiv.appendChild(progressDiv);
                this._allTasksBar = mainDiv;
                if (target)
                    target.appendChild(this._allTasksBar);
            }
        }
    }
}