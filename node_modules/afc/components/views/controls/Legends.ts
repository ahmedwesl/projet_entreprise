/**
 * Created by jean.rennes on 20/02/2017.
 */
///<reference path="../Global.ts" />
///<reference path="Control.ts" />

namespace AFC.Controls {
    function _getLabel(pattern: string, data: Globals.IClassInfo): string {
        let ret: string = pattern;
        
        if (data) {
            for (let s in data) {
               if (data.hasOwnProperty(s)) {
                    ret = ret.replace(new RegExp(s, 'g'), data[s].text);
                }
            }
        }
        return ret;
    }
    
    let _generators: {[key: number]: (label: string, value: number, key: number, clickable: string, state: boolean)=> Node;} = [];
    _generators[Globals.LegendType.fillColor] = (label: string, value: number, key: number, clickable: string, state: boolean)=> {
        let doc: DocumentFragment = document.createDocumentFragment();
        let div: HTMLElement = document.createElement('DIV');
        let text: Text = document.createTextNode(label);
        
        div.style.backgroundColor = Tools.Style.convertColor(value);
        doc.appendChild(div);
        if (clickable) {
            let input: HTMLInputElement = <HTMLInputElement>document.createElement('INPUT');
            let label: HTMLLabelElement = <HTMLLabelElement>document.createElement('LABEL');
            
            input.id = label.htmlFor = `__${clickable}_${key}`;
            input.setAttribute('name', clickable);
            input.type = "checkbox" 
            input.value = <any>key;
            input.checked = state;
            input.hidden = true;
            doc.appendChild(text);
            doc.appendChild(input);
            doc.appendChild(label);            
        } else {
            doc.appendChild(text);
        }
        return doc;
    }
    
    export interface IFilterableLegendInfo extends Globals.ILegendInfo {
        readonly id: string;
        readonly filterable: Data.IFilterable;
        readonly property: Required<Globals.ILayerProperty>;
        states: number;
    }
    
    function _mapClasses(classes: ReadonlyArray<Globals.IThematicValue>, values: ReadonlyArray<Globals.IClassInfo>): [ReadonlyArray<Globals.IThematicValue>, ReadonlyArray<Globals.IClassInfo>] {
        if (classes && values && !Globals.isQuali(values)) {
            let lastClass = classes.length - 1,
                lastValue = values.length - 1;

            if (lastValue > 0 && lastValue < lastClass) {
                classes = Array.from(values, (value, indice) => classes[indice === lastValue ? lastClass : indice]);
            }
        }
        return [classes, values];
    }
    
    export class Legends extends Control {
        public update(data: ReadonlyArray<IFilterableLegendInfo|Globals.ILegendInfo>, enableFiltering?: boolean): void {
            const query: JQuery = $(this.node);
            
            query.empty();
            if (data && data.length) {
                this.loadingEnd();
                data.forEach((item: IFilterableLegendInfo) => {
                    let thematic = item.property.thematic;
                        
                    if (thematic) {
                        let generator: (label: string, value: number, key: number, clickable: string, state: boolean) => Node = _generators[item.type],
                            div: HTMLDivElement = document.createElement('div'),
                            [thematicClasses, thematicValues] = _mapClasses(thematic.classes, item.data?.thematic?.classes),
                            id = enableFiltering && item.id,
                            ul: HTMLUListElement;
                        
                        thematicClasses && thematicValues && thematicClasses.forEach((thematicClass, indice) => {
                            let li: HTMLLIElement,
                                child: Node,
                                state: boolean,
                                thematicValue = thematicValues[indice];

                            if (thematicValue) {
                                if (id) {
                                    state = !!((1 << indice) & item.states);
                                }
                                if (child = generator(_getLabel(thematicClass.pattern, thematicValue), thematicClass.value, indice, id, state)) {
                                    li = document.createElement('li');
                                    li.appendChild(child);
                                    (ul || (query.append(ul = document.createElement('ul')), ul)).appendChild(li);
                                }
                            }
                        });
                        
                        thematic.title && div.appendChild(document.createTextNode(thematic.title));
                        query.append(div);
                    }
                });
            } else {
                this.loadingStart();
            }
        }
    }
}