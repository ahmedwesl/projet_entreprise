/**
 * Created by jean.rennes on 13/09/2016.
 */
///<reference path="../../helpers/EventSink.ts" />

namespace AFC.Controls {
    export class ControlLoadingState {
        private     _parent: HTMLElement;
        private     _waitElement: HTMLElement;
        private     _displayloading: boolean;
        
        constructor(parent: HTMLElement, force: boolean) {
            this._displayloading    = false;
            if (parent) {
                if (force || (parent.getAttribute('enableLoading') == '1'))
                {
                    this._parent            = parent;
                    this._displayloading    = true;
                    this._waitElement       = document.createElement('div');
                    $(this._waitElement).addClass('loader');

                    if (parent.getAttribute('autoStartLoading') != '0')
                       this.show();
                }
            }
        }
        
        public show() {
             if (this._parent && this._displayloading) {
                if (!$(this._parent).hasClass('controlLoading'))
                    $(this._parent).addClass('controlLoading');
                if (this._waitElement && ($(this._parent).find(this._waitElement).length == 0))
                    $(this._parent).append(this._waitElement);
            }
        }
                
        public hide() {
            $(this._parent).removeClass('controlLoading');
            if (this._waitElement && ($(this._parent).find(this._waitElement).length != 0))
                $(this._waitElement).detach();
        }
        
        public isLoading() : boolean {
            let isLoading = false;
            
            if (this._parent && $(this._parent).hasClass('controlLoading'))
                isLoading = true;
                
            return isLoading;
        }
    };
        
    export class Control<T extends HTMLElement = HTMLElement> {
        protected   _loadingState: ControlLoadingState;
        public      dispatchChange: ()=> any;
        public readonly node: T;
 
        constructor(node: string | T, forceLoadingState: boolean = false) {
            this.node = typeof node === 'string' ? <any>document.getElementById(node) : node;
            this._loadingState = new ControlLoadingState(this.node, forceLoadingState);
        }
        
        public isLoading() : boolean {
            return this._loadingState ? this._loadingState.isLoading() : false;
        }
        
        public loadingStart() {
            if (this._loadingState)
                this._loadingState.show();
        }
        
        public loadingEnd() {
            if (this._loadingState)
                this._loadingState.hide();
        }

        protected _dispatchChange(): void {
            this.dispatchChange && this.dispatchChange();
        }

        public get width(): number {
            return Math.floor($(this.node).width());
        }

        public get height(): number {
            return Math.floor($(this.node).height());
        }

        public set visible(b: boolean) {
            this.node.style.visibility = b ? 'visible' : 'hidden';
        }
    }
}