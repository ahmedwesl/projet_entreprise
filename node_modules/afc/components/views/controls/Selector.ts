/**
 * Created by jean.rennes on 27/10/2016.
 */
///<reference path="../Global.ts" />
///<reference path="Control.ts" />

namespace AFC.Controls {
    export interface IBlockListItem extends IListItem {
        properties: ReadonlyArray<Dashboards.IDashboardProperty>;
    }

    export interface ISelectorGroup extends IListItem {
        items: ReadonlyArray<IBlockListItem>;
    }

    export interface ISelection {
        group: Controls.ISelectorGroup;
        item: number;
    };
        
    class BlockList extends ListBox {
        public block: number;
        public displayNames: boolean = true;

        protected _build(container: JQuery, items: IBlockListItem[]): JQuery {
            let index: {[key: string]: HTMLUListElement} = {};
            return (this.block === void 0) ? super._build(container, items) : $(items.map((item: IBlockListItem)=>{
                let li: HTMLLIElement = document.createElement('li');
                let anchor: HTMLAnchorElement = document.createElement('a');
                let block: string = item.properties[this.block][2];
                let ul: HTMLUListElement = index[block];
                
                if (!ul) {
                    let div: HTMLElement = document.createElement('div');
                    ul = index[block] = document.createElement('ul');
                    
                    block && this.displayNames && div.appendChild(document.createTextNode(block));
                    container.append(div);
                    container.append(ul);
                }
                anchor.id = item.id;
                anchor.href = 'javascript:void 0;';
                anchor.appendChild(document.createTextNode(item.name||''));
                li.appendChild(anchor);
                ul.appendChild(li);
                return anchor;
            }));
        }
    }
            
    export class Selector extends Control {
        protected _radioGroup: RadioGroup;
        protected _blockList: BlockList;
        protected _groups: ReadonlyArray<ISelectorGroup>;
        protected _selected: number[];

        constructor(list: string | HTMLElement, radio: string | HTMLElement) {
            super(list);
            (this._radioGroup = new RadioGroup(radio)).dispatchChange = this._onRadioChange.bind(this);
            (this._blockList = new BlockList(list)).dispatchChange = this._onListChange.bind(this);
        }

        public get HTMLElement2(): HTMLElement {
            return this._radioGroup.node;
        }

        public set block(value: number) {
            this._blockList.block = value;
        }

        public get block(): number {
            return this._blockList.block;
        }

        public get selected(): ISelection {
            let value: Partial<ISelection> = {};
            let group: ISelectorGroup = this._groups&&this._groups[this._radioGroup.checked];
            let items: ReadonlyArray<IListItem> = this._blockList.getItems();
            let selected: number[];
            
            group && (value.group = group);
            items && ((selected = this._blockList.selected).length > 0) && (value.item = selected[0]);
            return <ISelection>value;
        }
        
        public setGroups(groups?: ReadonlyArray<ISelectorGroup>, selected?: number[]): void {
            if (groups) {
                this._groups = groups;
                this._selected = selected || [];
                this._radioGroup.setItems(groups);
            } else {
                delete this._groups;
                delete this._selected;
                this._radioGroup.setItems();
            }
            this._radioGroup.visible = groups && (groups.length > 1);
        }

        public select(groupId?: string, itemId?: string): void {
            if (this._groups) {
                let group: ISelectorGroup;
                let item: IBlockListItem;
                
                for (let i: number = 0; i < this._groups.length; ++i) {
                    group = this._groups[i];
                    if (group.id === groupId) {
                        (i !== this._radioGroup.check(i))&&this._blockList.setItems(group.items);
                        for (let j: number = 0; j < group.items.length; ++j) {
                            item = group.items[j];
                            if (item.id === itemId) {
                                this._blockList.select([j]);
                                break;
                            }
                        }
                        return;
                    }
                }
            }
        }

        protected _onRadioChange(typeArg: string, eventInitDict?: EventInit): void {
            let checked: number = this._radioGroup.checked;
            let selection: number[];
            
            if (checked !== void 0) {
                let group: ISelectorGroup = this._groups[checked];
                let item: number = this._selected[checked];

                this._blockList.setItems(group.items);
                (item !== void 0)&&(selection = [item]);
            } else
                this._blockList.setItems();
            this._blockList.select(selection);
        }
        
        protected _onListChange(typeArg: string, eventInitDict?: EventInit): void {
            let checked: number = this._radioGroup.checked;
            let selected: number[] = this._blockList.selected;
            
            (checked !== void 0) && (selected.length > 0) && (this._selected[checked] = selected[0]);
            this._dispatchChange();
        }
    }
}