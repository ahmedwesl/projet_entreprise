/**
 * Created by jean.rennes on 26/04/2016.
 */
namespace AFC.Tools {
    interface ICallee {
        pending: number;
        h: (...args:any[])=>void;
        inc(): number;
        dec(): number;
        callback(): void;
    }
    
    function _callback(this: any, ref: ICallee, arg: any[]) {        
        if (ref.pending) {
            ref.h && ref.h.apply(this, arg);
            ref.dec() || ref.callback();
        }
    }
    
    export class Synchronizer {
        public result: any;
        public push: (arg: (...args:any[])=> void, reference?: any)=> {(...args: any[]): void};
        public start: ()=> void;

        constructor(callback: (result: any)=> void, context?: any) {
            var callees: ICallee[] = [];
            var counter: number = 0;
            var __: any = function(this: ICallee, h: (...args: any[])=> void, reference: any): ICallee {
                h && (this.h = h);
                this.pending = 1;
                ++counter;
                return this;
            };
            __.prototype.inc = function () {
                ++this.pending;
                return ++counter;
            }
            __.prototype.dec = function () {
                --this.pending;
                return --counter;
            }
            __.prototype.callback = ()=>{ callback.call(context, this.result);  };

            this.push = function (h: (...args: any[])=> void, reference: any): {(...args: any[]): void} {
                let callee: ICallee;
                let ret: {(...args: any[]): void};
                
                for(let item of callees) {
                    if (item.h === h) {
                        callee = item;
                        break;
                    }
                }
                callee ? callee.inc() : callees.push(callee = new __(h, reference));
                ret = (function(this: any, ...args: any[]): void {
                    _callback.call(this, callee, arguments);
                });
                return h ? AfcReferenceMixin(ret, reference || h) : ret;
            };
            this.start = this.push(void 0);
        }
    }
};