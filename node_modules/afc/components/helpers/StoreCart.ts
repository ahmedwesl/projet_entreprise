/**
 * Created by jean.rennes on 22/05/2019.
 */
///<reference path="ParcEdition.ts" />
 
namespace AFC.Tools.ParcEdition {
    export interface IStoreCartItemData {
        readonly id: string;
        readonly store: AFC.Data.IReadonlyStore;
    }
    
    class StoreCartItemData implements IStoreCartItemData {
        public readonly id: string;
        public readonly store: AFC.Data.IReadonlyStore;
        
        constructor(branch: string, store: AFC.Data.IReadonlyStore) {
            this.id = branch; 
            this.store = store; 
        }
    }
    
    export class StoreCart extends Tools.EventSink implements AFC.Data.IDataSource<IStoreCartItemData>, AFC.Globals.ILabelProvider {
        protected _data: StoreCartItemData[];
        
        public get length(): number {
            return (this._data && this._data.length) || 0;
        }
        
        public get label(): string {
            return this.length.toString();
        }
        
        public item(index: number): AFC.Data.IDataItemContainer<IStoreCartItemData> {
            let item: StoreCartItemData;
            return this._data && (item = this._data[index]) && {dataItemIndex: index, dataItem: item};
        }
        
        public indexOf(id: string, store: AFC.Data.IReadonlyStore): number {
            return this._data ? this._data.findIndex(item => (item.id === id) && (!AFC.Data.compareKey(store.key, item.store.key))) : -1;
        }
        
        public add(id: string, store: AFC.Data.IReadonlyStore): boolean {
            let i = this.indexOf(id, store);
            if (i === -1) {
                (this._data || (this._data = [])).push(new StoreCartItemData(id, store));
                this.fireEvent(Tools.EventType.Dirty);
                return true;
            }
        }
        
        public remove(id: string, store: AFC.Data.IReadonlyStore): void {
            let i = this.indexOf(id, store);
            if (i !== -1) {
                this._data.splice(i, 1);
                this.fireEvent(Tools.EventType.Dirty);
            }
        }
        
        public clear(): void {
            delete this._data;
            this.fireEvent(Tools.EventType.Dirty);
        }        
    }
} 