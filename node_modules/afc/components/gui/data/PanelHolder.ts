/**
 * Created by jean.rennes on 03/04/2017.
 */
///<reference path="../Globals.ts" />
///<reference path="../../adapters/data/PanelAdapter.ts" />

namespace AFC.gui {
    const _getParent = (element: HTMLElement) => parentLookup<AfcGuiPanelHolder>(element, 'AFC-GUI-PANEL-HOLDER');
    
    const _id = Symbol(),
        _name = Symbol(),
        _source = Symbol(),
        _dashboardModel = Symbol();
     
    export class AfcGuiPanel extends HTMLElement {
        /** @internal */
        private [_id]: number;
        /** @internal */
        private [_name]: string;
        /** @internal */
        private [_source]: AfcGuiPanelHolder;
        public static observedAttributes = ['name'];

        public set name(value: string) {
            if (this[_name] != value) {
                this[_name] = value;
                this[_id] && this[_source].adapter.refresh(this[_id]);
            }
        }

        public get name(): string {
            return this[_name];
        }

        public attributeChangedCallback(attrName: string, oldVal: string, newVal: string): void {
            attrName === 'name' && (this.name = newVal);
        }

        public connectedCallback(): void {
            let parent: AfcGuiPanelHolder = _getParent(this);
            
            parent && (this[_id] = (this[_source] = parent).adapter.add(new Data.LabelPanel(this, new Controls.Label(this))));
        }

        public disconnectedCallback(): void {
            let id = this[_id];
            if (id) {
                this[_source].adapter.remove(id);
                delete this[_id];
            }
        }
    }
        
    export class AfcGuiPanelHolder extends BindableElement<Data.IDataContainerProvider, Data.PanelAdapter> {
        /** @internal */
        private [_source]: string;
        /** @internal */
        private [_dashboardModel]: Dashboards.DashboardModel;
        
        public static observedAttributes = BindableElement.observedAttributes.concat(['source']);

        constructor() {
            super();
            this._adapter = new Data.PanelAdapter();
        }

        public set source(value: string) {
            if (this[_source] !== value) {
                let model = new Dashboards.GridModel();
                model.setId(this[_source] = value);
                this.model = model;
            }
        }
        
        public get source(): string {
           return this[_source];
        }
        
        protected _bind(): Data.IDataContainerProvider {
            let model = super._bind(), guiDashboard;
            if (model instanceof Dashboards.GridModel && (guiDashboard = parentLookup<AfcGuiDashboard>(this, 'AFC-GUI-DASHBOARD'))) {
                model.dashboardModel = guiDashboard.model;
            }
            return model;
        }        
        
        protected _unbind(): void {
            let model = this.model;
            if (model instanceof Dashboards.GridModel) {
                model.dashboardModel = null;
            }
            super._unbind();
        }        
        
        public attributeChangedCallback(attrName: string, oldVal: string, newVal: string): void {
            (attrName==='source') ? this.source = newVal : super.attributeChangedCallback(attrName, oldVal, newVal);
        }
    }
    
    registerElement("afc-gui-panel-holder", AfcGuiPanelHolder);
    registerElement("afc-gui-panel", AfcGuiPanel);    
}