/**
 * Created by jean.rennes on 19/09/2017.
 */
///<reference path="../Globals.ts" />
///<reference path="../../models/data/Data.ts" />

namespace AFC.gui {
    function _getFunction(s: string): (...args: any[])=>any {
        return StringToFunction(`function($scope) {return ${s}}`);
    }
    
    export function _compare(this: AfcGuiRepeater, value0: Data.IDataItemContainer, value1: Data.IDataItemContainer): number {
        let comp = this.compare ? this.compare(value0, value1) : 0;
        
        if (!comp) {
            if (this.orderBy) {
                if (typeof(value0.dataItem[this.orderBy]) === "string")
                    comp = value0.dataItem[this.orderBy].localeCompare(value1.dataItem[this.orderBy]);
                else
                    comp = value0.dataItem[this.orderBy] - value1.dataItem[this.orderBy];
            }
        }
            
        if (this.orderByDirection == "desc")
            comp = -comp;
        return comp;
    }
    
    const _context = Symbol(),
        _state = Symbol(),
        _onClear = Symbol(),
        _fragmentManager = Symbol();
    
    export class AfcGuiRepeater<S extends AFC.Data.IDataSource & Partial<Tools.IObservable> = AFC.Data.IDataSource & Partial<Tools.IObservable>> extends AfcBindableElement<S, Data.RepeaterAdapter<S>> {
        protected _control: Controls.Repeater;
        /** @internal */        
        private [_context]: Application.Context;
        /** @internal */        
        private [_state]: Application.Bundle;
        /** @internal */        
        private [_fragmentManager]: Application.FragmentManager;
        public static observedAttributes = AfcBindableElement.observedAttributes.concat(['template', 'order-by', 'order-by-direction', 'compare', 'data-binder', 'max-item', 'format-numbers', 'filter']);
        public orderBy: string;
        public orderByDirection: string;
        public compare: (value0: Data.IDataItemContainer, value1: Data.IDataItemContainer)=> number;
        
        constructor() {
            super();
            this._adapter = new Data.RepeaterAdapter<S>(this._control = new Controls.Repeater(this));
            this._adapter.maxItem = 10;
            this._adapter.compare = _compare.bind(this);
        }
        
        protected _onRestoreViewState(context: Application.Context, fragmentManager: AFC.Application.FragmentManager, savedInstanceState?: Application.Bundle): void {
            super._onRestoreViewState(context, fragmentManager, savedInstanceState);
            this[_context] = context;
            this[_fragmentManager] = fragmentManager;
            this[_state] = savedInstanceState;
        }
        
        protected [_onClear](): void {
            this[_context] && onSaveInstanceState(this[_context], this, this[_state] || (this[_state] = new Application.Bundle()));
        }
        
        protected _onGenerate(): void {
            this[_context] && onRestoreViewState(this[_context], this, this[_fragmentManager], this[_state]);
            this._control.loadingEnd();
            _dispatchEvent(this, 'dataChange');
        }

        public set maxItem(value: number) {
            this._adapter.maxItem = value;
        }
            
        public get maxItem(): number {
            return this._adapter.maxItem;
        }
        
        public get adapter(): Data.RepeaterAdapter {
            return this._adapter;
        }
        
        public set template(value: (value: {[key: string]: any})=> string) {
            this._adapter.template = value;
        }
            
        public get template(): (value: {[key: string]: any})=> string {
            return this._adapter.template;
        }
        
        public set dataBinder(value: (name: string, key: string, value: Data.IDataItemContainer)=> any) {
            this._control.dataBinder = value;
        }
            
        public get dataBinder(): (name: string, key: string, value: Data.IDataItemContainer)=> any {
            return this._control.dataBinder;
        }
        
        public set filter(value: (value: Data.IDataItemContainer)=> boolean) {
            this._adapter.filter = value;
        }
        
        public get filter(): (value: Data.IDataItemContainer)=> boolean {
            return this._adapter.filter;
        }
                
        public connectedCallback(): void {
            let templates: HTMLCollectionOf<HTMLTemplateElement> = this.getElementsByTagName("template");
            let template: HTMLTemplateElement;
            
            if (templates) {
                for (let i: number = 0; i < templates.length; ++i) {
                    let parentNode      = templates[i].parentNode;
                    let validTemplate   = true;
                    while (validTemplate && parentNode && parentNode != this)
                    {
                        if (parentNode.nodeName.toLocaleLowerCase() == "template")
                            validTemplate = false;
                        parentNode = parentNode.parentNode;
                    }
                    //if (templates[i].parentNode === this) {
                    if (validTemplate) {
                        let name: string = (template = templates[i]).getAttribute('name');
                        this._control.setTemplate(template.innerHTML, name === null ? void 0: name);
                    }
                }
            }
            $(this).empty();
            this._control.loadingStart();
            this._adapter.onClear = this[_onClear].bind(this);
            this._adapter.onGenerate = this._onGenerate.bind(this);
            super.connectedCallback();
        }
        
        public disconnectedCallback(): void {
            delete this._adapter.onGenerate;
            super.disconnectedCallback();
        }
        
        public attributeChangedCallback(attrName: string, oldVal: string, newVal: string): void {
            let f: any;

            switch (attrName) {
                case 'template':
                    (f = _getFunction(newVal)) && (this.template = f);
                    break;
                case 'order-by':
                    this.orderBy = newVal;
                    break;
                case 'order-by-direction':
                    this.orderByDirection = newVal.toLowerCase();
                    break;
                case 'compare':
                    (f = StringToFunction(newVal)) && (this.compare = f);
                    break;
                case 'filter':
                    (f = StringToFunction(newVal)) && (this.filter = f);
                    break;
                case 'data-binder':
                    (f = StringToFunction(newVal)) && (this.dataBinder = f);
                    break;
                case 'max-item':
                    isNaN(this.maxItem = parseInt(newVal)) && (this.maxItem = 10);
                    break;
                case 'format-numbers':
                    this._control.setFormatNumbers(newVal !== null);
                    break;
                default:
                    super.attributeChangedCallback(attrName, oldVal, newVal);
                    break;
            }
        }
        
        public refresh(): void {
            this._adapter.refresh();
        }
    }

    registerElement("afc-gui-repeater", AfcGuiRepeater);
}