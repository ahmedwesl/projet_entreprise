/**
 * Created by jean.rennes on 25/07/2018.
 */
///<reference path="Root.ts" /> 

namespace AFC.gui {
    const _attribute: string = 'content',
        _context = Symbol(),
        _state = Symbol(),
        _content = Symbol(),
        _fragmentManager = Symbol();
    
    export class AfcGuiTemplate extends AfcGuiDiv {
        /** @internal */
        private [_context]: Application.Context;
        /** @internal */
        private [_state]: Application.Bundle;
        /** @internal */        
        private [_content]: string|HTMLTemplateElement;
        /** @internal */        
        private [_fragmentManager]: Application.FragmentManager;
        
        public static observedAttributes = AfcGuiDiv.observedAttributes.concat([_attribute]);

        protected _onSaveInstanceState(context: Application.Context, savedInstanceState: Application.Bundle): void {
            super._onSaveInstanceState(context, savedInstanceState);
            this.id && savedInstanceState.putValue(this.id, this.getAttribute(_attribute));
        }

        protected _onRestoreViewState(context: Application.Context, fragmentManager: AFC.Application.FragmentManager, savedInstanceState?: Application.Bundle): void {
            super._onRestoreViewState(context, fragmentManager, savedInstanceState);
            savedInstanceState && this.id && (this.content = savedInstanceState.getValue(this.id));
            this[_context] = context;
            this[_fragmentManager] = fragmentManager;
            this[_state] = savedInstanceState;
        }
        
        public set content(value: string|HTMLTemplateElement|undefined|null) {
            if (value !== this[_content]) {
                delete this[_content];
                $(this).empty();
                if (value) {
                    let template: HTMLTemplateElement = Tools.Data.isString(value) ? document.querySelector(`template#${value}`) : <HTMLTemplateElement>value;

                    this[_content] = value;
                    template && this.appendChild(document.importNode(template.content, true));
                    this[_context] && onRestoreViewState(this[_context], this, this[_fragmentManager], this[_state]);
                }
            }
        }
        
        public get content(): string|HTMLTemplateElement|undefined|null {
            return this[_content];
        }
                        
        public attributeChangedCallback(attrName: string, oldVal: string, newVal: string): void {
            if (attrName === _attribute) {
                this.content = newVal;
            } else {
                super.attributeChangedCallback(attrName, oldVal, newVal);
            }
        }
    }
    registerElement("afc-gui-template", AfcGuiTemplate);
}