/**
 * Created by jean.rennes on 03/02/2020.
 */
///<reference path="../Globals.ts" /> 

namespace AFC.gui {
    const _selected = Symbol(),
        _onSelected = Symbol(),
        _onClick = Symbol();

    function select(tab: AfcGuiTab, value?: boolean): boolean {
        (tab[_selected] = value = !!value) ? $(tab).addClass('selected'): $(tab).removeClass('selected');
        return value;
    } 
    
    export class AfcGuiTab extends HTMLElement {
        /** @internal */
        public [_selected]: boolean;

        public get selected(): boolean {
            return this[_selected];
        }

        public set selected(value: boolean) {
            let tabBar = <AfcGuiTabBar>this.parentElement;
            select(this, value) && tabBar[_onSelected] && tabBar[_onSelected](this);
        }
    }

    export class AfcGuiTabBar extends AfcGuiElement {
        public static observedAttributes = AfcGuiElement.observedAttributes;
        
        constructor() {
            super();
            this.addEventListener('click', this[_onClick].bind(this));
        }
        
        /** @internal */
        private [_onSelected](tab: AfcGuiTab): void {
            let tabs = <HTMLCollectionOf<AfcGuiTab>>this.getElementsByTagName('afc-gui-tab');
            
            for (let i: number = 0, item; i < tabs.length; ++i) {
                if ((item = tabs[i]) !== tab) {
                    select(item);
                }
            }
        }
        
        /** @internal */
        private [_onClick](event: MouseEvent): void {
            let target = <AfcGuiTab>event.target;
            if (target.tagName === 'AFC-GUI-TAB') {
                target.selected = true;
                setTimeout(()=> {
                    _dispatchEvent(this, 'change');
                }, 0);
            }
        }
                
        protected _onSaveInstanceState(context: Application.Context, savedInstanceState: Application.Bundle): void {
            this.id && savedInstanceState.putValue(this.id, this.value);
        }
        
        protected _onRestoreViewState(context: Application.Context, fragmentManager: AFC.Application.FragmentManager, savedInstanceState?: Application.Bundle): void {
            if (savedInstanceState && this.id) {
                 this.value = savedInstanceState.getValue<string>(this.id);
            } else {
                let tab = this.querySelector('afc-gui-tab[selected]'),
                    value: string;
                tab && (value = tab.getAttribute('value')) && (this.value = value);
            }
        }

        public get value(): string {
            let tabs = <HTMLCollectionOf<AfcGuiTab>>this.getElementsByTagName('afc-gui-tab');
            
            for (let i: number = 0; i < tabs.length; ++i) {
                if (tabs[i].selected) {
                    return tabs[i].getAttribute('value');
                }
            }
        }

        public set value(value: string) {
            let tabs = <HTMLCollectionOf<AfcGuiTab>>this.getElementsByTagName('afc-gui-tab'),
                found;
            
            for (let i: number = 0; i < tabs.length; ++i) {
                select(tabs[i], !found && (found = tabs[i].getAttribute('value') === value));
            }
        }        
    }
    registerElement("afc-gui-tab", AfcGuiTab);
    registerElement("afc-gui-tabbar", AfcGuiTabBar);
}