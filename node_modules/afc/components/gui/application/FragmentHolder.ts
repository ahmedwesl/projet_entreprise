/**
 * Created by jean.rennes on 28/01/2020.
 */
///<reference path="../Globals.ts" /> 
///<reference path="./Root.ts" /> 

namespace AFC.gui {
    const _fragment = Symbol(),
        _fragmentManager = Symbol(),
        _tag = Symbol();
    
    export class AfcGuiFragmentHolder extends gui.AfcGuiElement {
        /** @internal */
        private [_fragmentManager]: Application.FragmentManager;
        /** @internal */
        private [_fragment]: Application.Fragment;
         /** @internal */
        private [_tag]: string;
       
        public static observedAttributes = AfcGuiDiv.observedAttributes.concat(['content']);
        
        public set content(className: string) {
            let fragmentManager = this[_fragmentManager];
            
            if (fragmentManager) {
                let fragment: Application.Fragment;

                try {
                    if (className) {
                        let ctor = className.split('.').reduce((acc: {[key: string]: any}, key: string) => {
                            return acc[key];
                        }, window);
                        fragment = new ctor();
                    }
                }
                finally {
                    this.setContent(fragment, this.getAttribute('tag'));
                }
            }
        }
        
        public setContent(value?: Application.Fragment, tag?: string): void {
            if (this[_fragment] !== value) {
                let fragmentManager = this[_fragmentManager],
                    fragment;
                if (fragment = this[_fragment]) {
                    Application.FragmentManager.detachView(fragment);
                }
                this[_fragment] = value;
                this[_tag] = tag;
                fragmentManager && value && fragmentManager.attachView(this, value, tag);
            }
        }
        
        protected _onSaveInstanceState(context: Application.Context, savedInstanceState: Application.Bundle): void {
            let tag, fragment;
            
            if (this.id && (fragment = this[_fragment]) && (tag = fragment.getTag())) {
                savedInstanceState.putValue(this.id, tag);
            }
        }

        protected _onRestoreViewState(context: Application.Context, fragmentManager: AFC.Application.FragmentManager, savedInstanceState?: Application.Bundle): void {
            let fragment: Application.Fragment = this[_fragment],
                tag: string = this[_tag];
                
            this[_fragment] = null;
            this[_fragmentManager] = fragmentManager;
            if (!fragment && savedInstanceState && this.id && (tag = savedInstanceState.getValue<string>(this.id))) {
                fragment = fragmentManager.findFragmentByTag(tag);
            } 
            fragment ? 
                this.setContent(fragment, tag):
                this.content = this.getAttribute('content');
	}
        
        public disconnectedCallback(): void {
            let fragment = this[_fragment];
            fragment && Application.FragmentManager.detachView(fragment);
            delete this[_fragment];
        }
        
        public override attributeChangedCallback(attrName: string, oldVal: string, newVal: string): void {
            attrName === 'content' ? 
                this.content = newVal :
                super.attributeChangedCallback(attrName, oldVal, newVal);
        }
    }
        
    gui.registerElement("afc-gui-fragmentholder", AfcGuiFragmentHolder);
}