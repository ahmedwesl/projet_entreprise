/* global AFC */
/* global customElements */
namespace AFC.gui {
    function _convert(s: string): any {
        let ret;
        try {
            ret = eval('[' + s + ']')[0];
        } catch(e) {
        }
        return ret;
    }

    function _indexOf(parent: HTMLElement, element: HTMLElement): number {
        let ret = -1;
        for (var i = 0; i < parent.childNodes.length; ++i) {
            if (parent.childNodes[i] === element) {
                ret = i;
                break;
            }
        }
        return ret;
    }

type IFilterSelection = (boolean|number)[][];
interface IFilterValue {
    selection: IFilterSelection;
    filterText: string;
};

const _name = Symbol(),
    _type = Symbol(),
    _selection = Symbol(),
    _columns = Symbol(),
    _rows = Symbol(),
    _timeout = Symbol(),
    _filterText = Symbol(),
    _highlighted = Symbol(),
    _textFilterChangeTimer = Symbol(),
    _onChange = Symbol();

    export class AfcFilterControl extends AfcGuiElement {
        /** @internal */
        private [_name]: string;
        /** @internal */
        private [_type]: string;
        /** @internal */
        private [_filterText]: string;
        /** @internal */
        private [_timeout]: number;
        /** @internal */
        private [_textFilterChangeTimer]: number;
        /** @internal */
        private [_selection]: IFilterSelection;
        /** @internal */
        private [_highlighted]: {
            row: number;
            col: number;
        };
        /** @internal */
        private [_columns]: ReadonlyArray<string>;
        /** @internal */
        private [_rows]: ReadonlyArray<string>;
        
        public static observedAttributes = AfcGuiElement.observedAttributes.concat(['type', 'columns', 'rows', 'value', 'name']);
        
        constructor() {
            super();
            this._resetHighlighted();
            this.addEventListener('mouseover', this._onMouseEnter.bind(this));
            this.addEventListener('click', this._onClick.bind(this));
            this.addEventListener('mouseout', this._onMouseOut.bind(this));
        }

        protected _getContextParamName(param: string): string {
          var value = this.id || '';  

          value += this[_name] || '';  
          value += param;  
          return value;
        }

        protected _onSaveInstanceState(context: Application.Context, savedInstanceState: Application.Bundle): void {
            super._onSaveInstanceState(context, savedInstanceState);
            this.id && savedInstanceState.putValue(this._getContextParamName("selection"), this[_selection]);
        }

        protected _onRestoreViewState(context: Application.Context, fragmentManager: AFC.Application.FragmentManager, savedInstanceState?: Application.Bundle): void {
            super._onRestoreViewState(context, fragmentManager, savedInstanceState);
            savedInstanceState && this.id && (this[_selection] = savedInstanceState.getValue(this._getContextParamName("selection")));
        }

        public get columns(): ReadonlyArray<string> {
            return this[_columns];
        }
        
        public set columns(value: ReadonlyArray<string>) {
            if (value) {
                this[_columns] = value;
                this.resetSelection(true);
                this._refresh();
            }
        }
        
        public get rows() {
            return this[_rows];
        }
        
        public set rows(value) {
            if (value) {
                this[_rows] = value;
                this.resetSelection(true);
                this._refresh();                    
            }
        }
        
        public get value(): IFilterValue {
            return {selection: this[_selection], filterText: this[_filterText]};
        }
        
        public set value(value: IFilterValue) {
            let v: IFilterSelection = <any>value,
                v2: [number, number] = <any>value;
            
            if (!value || (v2.length === 2 && v2[0] === -1 && v2[1] === -1)) {
                this.resetSelection(true);
            }
            else {
                 if (value.selection) {
                    this.setSelection(value.selection);                    
                    this.setFilterText(value.filterText || '');                    
                }
                else {
                    this.setSelection(v);                  
                    this.setFilterText('');
                }
            }
        }
        
        public get type(): string {
            return this[_type];
        }
        
        public set type(value: string) {
            this[_type] = value;
            this._refresh();                    
        }
        
        protected _hasCustomFilter(): boolean {
            return $(this).find("[custom-filter]").length > 0
        }
        public setSelection(value: IFilterSelection) {
            this[_selection] = value;
            this._draw();
            let values = value?.[this[_rows] ? this[_rows].length : 0],
                indice = 0;

            values && $(this).find("[custom-filter]").each(function(this: HTMLInputElement) {
                if (indice < values.length && this.getAttribute("type") === "checkbox") {
                    this.checked = <boolean>values[indice++];
                }
            });
        }
        
        public setFilterText(value: string): void {
            this[_filterText] = value;
            this._draw();
        }

        protected _refresh() {
            this[_timeout] || (this[_timeout] = setTimeout(() => {
                this._draw();
                delete this[_timeout];
            }, 1));
        }

        protected _refreshHighlighted() {
            var table = $(this).find("table");
            var _this = this;

            if (this[_columns] && this[_rows]) {
                table.find("tr").each(function(i, tr) {
                    i--;
                    $(tr).find("td, th").each(function (j, td) {
                        j--;
                        if (((_this[_highlighted].row === i) && (_this[_highlighted].col === -1))
                            || ((_this[_highlighted].row === -1) && (_this[_highlighted].col === j))
                            || ((_this[_highlighted].row === i) && (_this[_highlighted].col === j))
                            || ((_this[_highlighted].row === -1) && (_this[_highlighted].col === -1)))
                                $(td).addClass('filterControlHighlighted');
                        else
                            $(td).removeClass('filterControlHighlighted');
                    });
                });
            }  
        }

        protected _draw() {
            if (!this[_selection] && this[_rows] && this[_columns])
                this.resetSelection();
            var container = $(this).find("#mainFilter");
            var query;
            
            if (container && container.length > 0)
                query = container.empty();
            else
                query = $(this).empty();
            var table: HTMLTableElement, row: HTMLTableRowElement, cell: HTMLTableCellElement;

            if (this[_columns] && this[_rows]) {
                var tdWidth: number, thWidth: number, tdClass: string;
                var _this = this;

                {
                    var textLabel,
                        textInput,
                        div1, div2, div3;

                    query.append(div1 = document.createElement('div'));
                        div1.setAttribute('class', 'filterControl');
                        div1.append(div2 = document.createElement('div'));
                            //div2.innerHTML = "Filtre:";

                        div1.appendChild(div2 = document.createElement('div'));
                        div2.setAttribute('class', 'filterControlText');
                        div2.appendChild(textInput = document.createElement('input'));
                            textInput.setAttribute('class', 'filterControlTextInput');
                            textInput.setAttribute('placeholder', 'Filtre ...');
                            textInput.type = "text";
                            textInput.value = this[_filterText] || '';
                            //textInput.addEventListener('input', _this._onTextFilterChange.bind(_this));
                            textInput.addEventListener('keyup', _this._onTextFilterChange.bind(_this));
                            div2.appendChild(div3 = document.createElement('div'));
                                div3.setAttribute("class", "btn_close_filter");
                                div3.addEventListener('click', _this._onClickCloseFilterText.bind(_this));
                }

                if (this[_rows].length > 0) {
                    thWidth = Math.floor(100/(this[_columns].length + 1));
                    tdWidth = 100 - (thWidth * this[_columns].length);
                    query.append(table = document.createElement('table'));
                    table.setAttribute('class', 'filterTable');
                    table.appendChild(row = document.createElement('tr'));
                    row.appendChild(cell = document.createElement('td')).appendChild(document.createTextNode(String.fromCharCode(0xA0)));
                    cell.setAttribute('style', 'width:'+tdWidth.toString()+'%');
                    this[_columns].forEach(function(item, i) {
                        row.appendChild(cell = document.createElement('th')).innerHTML = item;
                        cell.setAttribute('style', 'width:'+thWidth.toString()+'%');
                        if ((_this[_highlighted].row === -1) && (_this[_highlighted].col === i))
                            $(cell).addClass('filterControlHighlighted');
                    });
                }
                for (var i=0; i<this[_rows].length; i++)
                {
                    table.appendChild(row = document.createElement('tr'));
                    row.appendChild(cell = document.createElement('th')).innerHTML = this[_rows][i];
                    if ((this[_highlighted].row === i) && (this[_highlighted].col === -1))
                        $(cell).addClass('filterControlHighlighted');
                    for (var j=0; j<this[_columns].length; j++)
                    {
                        row.appendChild(cell = document.createElement('td')).appendChild(document.createTextNode(String.fromCharCode(0xA0)));
                        cell.setAttribute('class', this[_selection][i][j] ? 'visible' : 'hidden');
                        if (    ((this[_highlighted].row === i) && (this[_highlighted].col === -1))
                             || ((this[_highlighted].row === -1) && (this[_highlighted].col === j))
                             || ((this[_highlighted].row === i) && (this[_highlighted].col === j))
                             || ((this[_highlighted].row === -1) && (this[_highlighted].col === -1)))
                                $(cell).addClass('filterControlHighlighted');
                    }
                }
            }
            $(this).off('change').on('change', this[_onChange].bind(this));
            
            this.updateCloseFilterButton();
        };
        
        /** @internal */
        private [_onChange](event: Event) {
            let elem = $(<HTMLElement>event.target);

            if (elem.attr("custom-filter") != undefined) {
                if ((!this[_rows].length && this[_selection].length == 0) || (this[_rows].length && this[_selection].length == this[_rows].length))
                    this[_selection].push([]);
                let values: boolean[] = [];
                $(this).find("[custom-filter]").each(function(idx) {
                    let elem = $(this);
                    if (elem.attr("type") == "checkbox")
                        values.push(elem.is(':checked'));
                });
                this[_selection][this[_selection].length - 1] = values;
                this._onTextFilterChangeNoDelay(); 
                //this._draw();
            }
        }

        public resetSelection(selectAll?: boolean): void {
            var i, j;
            var newSelection;

            if (this[_rows] && this[_columns]) {
                newSelection = [];
                for (i = 0; i < this[_rows].length; i++)
                {
                    let row = [];
                    for (j = 0; j < this[_columns].length; j++)
                        row.push(selectAll);
                    newSelection.push(row);
                }
            }
            this.setSelection(newSelection);
        }

        public selectColumn(col: number): void {
            var iRow, iCol;
            var currentValue    = this[_selection][0][col];
            var stop            = false;
            var isCheckBox      = this[_type] === 'checkbox';

            for (iRow = 0; !stop && (iRow < this[_selection].length); iRow++) {
                if (currentValue !== this[_selection][iRow][col]) {
                    currentValue = false;
                    stop         = true;
                }
            }

            if (!isCheckBox && currentValue) {
                currentValue = !this[_selection][0][col > 0 ? col - 1 : col + 1];
            }

            for (iRow = 0; iRow < this[_selection].length; iRow++) {
                for (iCol = 0; iCol < this[_selection][iRow].length; iCol++) {
                    if (iCol === col)
                        this[_selection][iRow][iCol] = isCheckBox ? !currentValue : true;
                    else if (!isCheckBox)
                        this[_selection][iRow][iCol] = currentValue;
                }
            }
        }

        public selectRow(row: number): void {
            var iRow, iCol;
            var currentValue    = this[_selection][row][0];
            var stop            = false;
            var isCheckBox      = this[_type] === 'checkbox';

            for (iCol = 0; !stop && (iCol < this[_selection][row].length); iCol++) {
                if (currentValue !== this[_selection][row][iCol]) {
                    currentValue = false;
                    stop         = true;
                }
            }

            if (!isCheckBox && currentValue) {
                currentValue = !this[_selection][row > 0 ? row - 1 : row + 1][0];
            }

            for (iRow = 0; iRow < this[_selection].length; iRow++) {
                for (iCol = 0; iCol < this[_selection][iRow].length; iCol++) {
                    if (iRow === row)
                        this[_selection][iRow][iCol] = isCheckBox ? !currentValue : true;
                    else if (!isCheckBox)
                        this[_selection][iRow][iCol] = currentValue;
                }
            }
        }

        public selectCell(col: number, row: number): void {
            var isCheckBox      = this[_type] === 'checkbox';

            if (isCheckBox)
                this[_selection][row][col] = !this[_selection][row][col];
            else {
                var iRow, iCol;
                var allOtherSameValues = true;
                var otherValues: number|boolean = -1;

                if (!this[_selection][row][col]) {
                    allOtherSameValues = false;
                }
                else {
                    for (iRow = 0; allOtherSameValues && (iRow < this[_selection].length); iRow++) {
                        for (iCol = 0; allOtherSameValues && (iCol < this[_selection][iRow].length); iCol++) {
                            if ((iRow !== row) && (iCol !== col)) {
                                if (otherValues === -1)
                                    otherValues = this[_selection][iRow][iCol];
                                else if (otherValues !== this[_selection][iRow][iCol])
                                    allOtherSameValues = false;
                            }
                        }
                    }
                }
                this.resetSelection(allOtherSameValues ? !otherValues : false);
                this[_selection][row][col] = true;
            }
        }

        protected _getXYFromEvent(e: MouseEvent): {x: number, y: number} {
            let target = <HTMLElement>e.target,
                result = {
                    x: -2,
                    y: -2
                };

            if ((target.tagName === 'TD') || (target.tagName === 'TH')) {
                let parent = <HTMLElement>target.parentNode,
                    x = _indexOf(parent, target),
                    y = _indexOf(<HTMLElement>parent.parentNode, parent);

                result.x = --x;
                result.y = --y;
            }
            return result;
        }

        protected _resetHighlighted(): void {
            this[_highlighted] = {col:-2, row:-2};
        };

        protected _onMouseEnter(e: MouseEvent): void {
            var coords = this._getXYFromEvent(e);

            this[_highlighted].col = coords.x;
            this[_highlighted].row = coords.y; 

            this._refreshHighlighted();
        }

        protected _onMouseOut(e: MouseEvent): void  {
            this._resetHighlighted();
            this._refreshHighlighted();
        }

        protected _onClickCloseFilterText(): void {
            let textInput = this.querySelector<HTMLInputElement>('.filterControlTextInput');
            
            textInput.value = '';
            this[_filterText] = '';
            this._onTextFilterChangeNoDelay(); 
            this.updateCloseFilterButton();
        }

        public updateCloseFilterButton(): void {
            if (this[_filterText] && (this[_filterText] !== ''))
                $(this).find('.btn_close_filter').show();
            else
                $(this).find('.btn_close_filter').hide();
        }

        protected _onTextFilterChange(e: Event): void {
            let textInput = <HTMLInputElement>e.target;
            if (this[_filterText] !== textInput.value) {
                this[_filterText] = textInput.value;
                this.updateCloseFilterButton();

                (this[_textFilterChangeTimer] !== void 0) && clearTimeout(this[_textFilterChangeTimer]);
                this[_textFilterChangeTimer] = setTimeout(() => {
                    delete this[_textFilterChangeTimer];
                this._onTextFilterChangeNoDelay(); 
                }, 500);
            }
        }

        public onFilterChanged(): void {

        }

        protected _onTextFilterChangeNoDelay(): void {
            this.onFilterChanged();
        }

        protected _onClick(e: MouseEvent): void {
            var coords = this._getXYFromEvent(e);

            if ((coords.x >= -1) && (coords.y >= -1)) {
                var x = coords.x,
                    y = coords.y;

                if ((x !== -1) || (y !== -1)) {
                    if (x === -1)
                        this.selectRow(y);
                    else if (y === -1)
                        this.selectColumn(x);
                    else 
                        this.selectCell(x, y);
                }
                else {
                    if (this[_type] === 'checkbox') {
                        var allSelected = this[_selection][0][0];
                        var stop = false;
                        var iCol, iRow;

                        for (iRow = 0; !stop && (iRow < this[_selection].length); iRow++) {
                            for (iCol = 0; iCol < this[_selection][iRow].length; iCol++) {
                                if (allSelected !== this[_selection][iRow][iCol]) {
                                    allSelected = false;
                                    stop        = true;
                                }
                            }
                        }
                        this.resetSelection(!allSelected);
                    }
                    else
                        this.resetSelection(true); 
                }

                this._onTextFilterChangeNoDelay(); 
                this._draw();
            }
        }

        public attributeChangedCallback(attrName: string, oldVal: string, newVal: string): void {
            switch (attrName) {
                case 'name':
                    this[_name] = newVal;
                break;
                case 'columns':
                    if (newVal == "")
                        this.columns = [];
                    else
                        this.columns = _convert(newVal);
                break;
                case 'rows':
                    if (newVal == "")
                        this.rows = [];
                    else
                        this.rows = _convert(newVal);
                break;
                case 'value':
                    this.value = _convert(newVal);
                break;
                case 'type':
                    this.type = newVal;
                break;
            }
        }
    }

    registerElement("afc-gui-filter-control", AfcFilterControl);
}