/**
 * Created by jean.rennes on 18/01/2017.
 */
///<reference path="../Globals.ts" /> 

namespace AFC.gui {
    function _recurse(element: Element, method: (element: HTMLElement)=> void): void {       /*...args: any[] variadic is useless here */
        let children: HTMLCollection = element.children;
        
        if (children) {
            for (let i: number = 0; i < children.length; ++i) {
                method(<any>children[i]);
                (children[i] instanceof AfcGuiDiv) || _recurse(children[i], method);
            }
        }
    }

    export class AfcGuiDiv extends AfcGuiElement  {
        protected _muted: boolean;
        public static observedAttributes = AfcGuiElement.observedAttributes;
        
        protected _setMute(mute: boolean): void {
            if (mute !== this._muted) {
                this._muted = mute;
                _recurse(this, AfcGuiElement._setMute.bind(null, mute));
            }
        }
        
        protected override _resize(screenRect: Partial<IScreenRect>): void {
            super._resize(screenRect);
            this.hidden || _recurse(this, AfcGuiElement._resize.bind(null, screenRect));
        }
    }

    export class AfcGuiRoot extends AfcGuiDiv {
        public static observedAttributes = AfcGuiElement.observedAttributes;

        public resize(screenRect: Partial<IScreenRect>): void {
            this.init(screenRect);
            super._resize(screenRect);
        }
    }

    registerElement("afc-gui-div", AfcGuiDiv);
    registerElement("afc-gui-root", AfcGuiRoot);
}