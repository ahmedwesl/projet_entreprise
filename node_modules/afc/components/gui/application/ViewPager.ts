/**
 * Created by jean.rennes on 20/05/2020.
 */
///<reference path="../Globals.ts" /> 

namespace AFC.gui {
    const _viewPager = Symbol(),
        _adapter = Symbol(),
        _options = Symbol(),
        _item = Symbol(),
        _draggable = Symbol();

    export interface IViewPagerOptions {
        pageTransformer: Controls.ViewPager.IPageTransformer;
        duration: DOMHighResTimeStamp;
        timingFunction: (x: number) => number;
    }

    export class AfcGuiViewPager extends AfcGuiElement {
        /** @internal */
        protected [_adapter]: Controls.FragmentStateAdapter;
        /** @internal */
        protected [_item]: number;
        /** @internal */
        protected [_options]: Partial<IViewPagerOptions>;
        /** @internal */
        protected [_viewPager]: Controls.ViewPager;
        /** @internal */
        protected [_draggable]: {
            draggable: Controls.Draggable;
            swipeLeft: (event: DragEvent) => void;
            swipeRight: (event: DragEvent) => void;
            dragMove: (event: DragEvent) => void;
            dragEnd: (event: DragEvent) => void;
        };

        protected _onSaveInstanceState(context: Application.Context, savedInstanceState: Application.Bundle): void {
            if (this.id && this[_adapter]) {
                savedInstanceState.putValue(`${this.id}|adapter`, this[_adapter]);
                savedInstanceState.putValue(`${this.id}|item`, this[_item]);
                this[_options] && savedInstanceState.putValue(`${this.id}|options`, this[_options]);
            }
        }

        protected _onRestoreViewState(context: Application.Context, fragmentManager: AFC.Application.FragmentManager, savedInstanceState?: Application.Bundle): void {
            let adapter,
                item,
                options;

            this[_viewPager] = new Controls.ViewPager(this);
            if (savedInstanceState && (adapter = savedInstanceState.getValue(`${this.id}|adapter`))) {
                item = savedInstanceState.getValue(`${this.id}|item`);
                options = savedInstanceState.getValue(`${this.id}|options`);
            }
            this[_viewPager].onPageScrollStateChanged = state => this.dispatchEvent(new CustomEvent('change', { detail: state }));
            (options = options ? $.extend(this[_options], options) : this[_options]) && this.setOptions(options);
            this.setAdapter(this[_adapter] || adapter);
            this.setCurrentItem(this[_item] === void 0 ? item : this[_item]);
        }

        protected override _resize(screenRect: Partial<IScreenRect>): void {
            super._resize(screenRect);
            this.init(screenRect);
            this[_viewPager]?.invalidateSize();
        }

        public setAdapter(adapter: Controls.FragmentStateAdapter): void {
            this[_adapter] = adapter;
            this[_viewPager]?.setAdapter(adapter);
        }

        public setOptions(options?: Partial<IViewPagerOptions>): void {
            let viewPager = this[_viewPager];

            options = (this[_options] ? $.extend(this[_options], options) : this[_options] = options) || {};
            if (viewPager) {
                this[_viewPager].setPageTransformer(options.pageTransformer);
                this[_viewPager].ease = options.timingFunction;
                options.duration !== void 0 && (this[_viewPager].duration = options.duration);
            }
        }

        public setCurrentItem(item: number): Promise<Application.Fragment> {
            this[_item] = item;
            return this[_viewPager]?.setCurrentItem(item);
        }

        public getCurrentItem(): number {
            return this[_item];
        }

        public refresh(): void {
            this._resize({});
        }

        public connectedCallback(): void {
            if (this.hasAttribute("draggable")) {
                let draggable = new Controls.Draggable(this),
                    swipeLeft = (event: DragEvent) => {
                        this.setCurrentItem(this[_item] + 1);
                    },
                    swipeRight = (event: DragEvent) => {
                        this.setCurrentItem(this[_item] - 1);
                    },
                    dragMove = (event: DragEvent) => {

                    },
                    dragEnd = (event: DragEvent) => {

                    };

                this.addEventListener('swipe:left', swipeLeft);
                this.addEventListener('swipe:right', swipeRight);
                this.addEventListener('drag:move', dragMove);
                this.addEventListener('drag:end', dragEnd);
                this[_draggable] = {
                    draggable: draggable,
                    swipeLeft: swipeLeft,
                    swipeRight: swipeRight,
                    dragMove: dragMove,
                    dragEnd: dragEnd
                };
            }
        }

        disconnectedCallback(): void {
            let draggable = this[_draggable];
            if (draggable) {
                this.removeEventListener('swipe:left', draggable.swipeLeft);
                this.removeEventListener('swipe:right', draggable.swipeRight);
                this.removeEventListener('drag:move', draggable.dragMove);
                this.removeEventListener('drag:end', draggable.dragEnd);
                Controls.Draggable.destroy(draggable.draggable);
            }
        }
    }

    registerElement("afc-gui-view-pager", AfcGuiViewPager);
}