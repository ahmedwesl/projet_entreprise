/**
 * Created by jean.rennes on 18/01/2017.
 */
///<reference path="Dashboards.ts" />
///<reference path="../../adapters/dashboards/MapAdapter.ts" />

namespace AFC.gui {
    export interface IMapProviderHolder extends HTMLElement {
        map: Dashboards.IMapModel;
    }
    
    export interface IDistrictLayerProvider extends gui.IBaseLayerProvider {
        getDistrictParameters(): Promise<IDistrictParameters>;
        getQualifiedColumn(data: Data.IDBTableDefinition, dataQualifier: Dashboards.DataQualifier): number;
        affectRow(data: Globals.IMapLayerModelData, row: ReadonlyArray<any>, id: string): Promise<void>;
        getOwnership(data: Globals.IMapLayerModelData, row: ReadonlyArray<any>): Promise<void>;
        deleteUnit(data: Globals.IMapLayerModelData, row: ReadonlyArray<any>): Promise<void>;
        isRedistricted(): boolean;
    }
    
    function _setMap(guiMap: AfcGuiMap, forVal: string): HTMLElement {
        let holder: IMapProviderHolder = forVal && <any>document.getElementById(forVal);
        guiMap.model =  holder && holder.map;
        return holder;
    }
    
    const _district = Symbol(),
        _districtProvider = Symbol(),
        _districtLayer = Symbol();
    
    export class AfcGuiMap extends DashboardView<Dashboards.IMapModel, Dashboards.MapAdapter> implements ILayerProviderElement, IRedistrictableElement {
        /** @internal */
        private [_districtProvider]: IDistrictLayerProvider;
        /** @internal */
        private [_districtLayer]: Globals.IMapLayerModel;
        /** @internal */
        private [_district]: AfcGuiRedistrict;
        
        constructor() {
            super(_setMap, Dashboards.MapModel);
            this._adapter = new Dashboards.MapAdapter();
            this._adapter.onUpdate = (districtProvider: IDistrictLayerProvider) => {
                this[_districtProvider] = districtProvider;
                delete this[_districtLayer];
                this[_district] && districtProvider && Promise.all([districtProvider.getLayer(), districtProvider.getDistrictParameters()]).then(results => {
                    if (results[0] && this[_district]) {
                        this[_districtLayer] = results[0].layerModel;
                        this[_district].setParameters(results[1]);
                    }
                });
                _dispatchEvent(this, 'layersChange');
            };
        }
        
        public getCount(): number {
            return this._adapter.getCount();
        }
        
        public getLayerProvider(indice: number): IBaseLayerProvider {
            return this._adapter.getLayerProvider(indice);
        }
        
        public getBbox(): Promise<Tools.Geometry.Rectangle> {
            return this.model.getBbox();
        }
        
        public getInfo(): Promise<Readonly<ILayerProviderInfo>> {
            return this._adapter.getInfo();
        }

        public canDistrict(): boolean  {
            return this._adapter.canDistrict();
        }
        
        public enableDistricting(enable: boolean, indicators?: ReadonlyArray<string>): void {
            this._adapter.enableDistricting(enable, indicators);
        }

        public isRedistricted(): boolean  {
            return this._adapter.isRedistricted();
        }
        
        public resetDistrict(): void  {
            this._adapter.resetDistrict();
        }
                        
        public get handlers(): gui.IMapEventHandlers {
            return this.canDistrict() && {
                click: (latlng: L.LatLng, info: Globals.IEventLayerInfo, event: L.LeafletMouseEvent) => {
                    let feature: Globals.GeoJSONFeature, data: ReadonlyArray<any>,
                        model;

                    if (this[_district] && info && ((model = info.model) === this[_districtLayer]) && (feature = info.feature?.feature) && (data = feature.properties?.data)) {
                        this[_districtProvider].affectRow(model.data, data, this[_district].selected);                                                
                    }
                    return true;
                }                
            };
        }
        
        public getDistrictProvider(): IDistrictLayerProvider {
            return this[_districtProvider];
        }
        
        public refresh() {
            this._adapter.refresh();
        }
 
        public attachRedistrict(redistrict: AfcGuiRedistrict): void {
            this[_district] = redistrict;
        }
        
        public detachRedistrict(redistrict: AfcGuiRedistrict): void {
            delete this[_district];
        }
        
        public getRedistrict(): AfcGuiRedistrict {
            return this[_district];
        }

        public disconnectedCallback(): void {
            delete this[_district];            
        }
    }

    registerElement("afc-gui-map", AfcGuiMap);
}