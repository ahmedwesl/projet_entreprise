///<reference path="../Globals.ts" />
///<reference path="../../models/data/Data.ts" />

namespace AFC.gui {
    const _control = Symbol(),
        _context = Symbol(),
        _state = Symbol(),
        _fragmentManager = Symbol(),
        _onGenerate = Symbol();

    export class AfcGuiTemplateElem extends AfcBindableElement<any, Globals.TemplateElemAdapter> {
        /** @internal */        
        protected [_control]: Controls.TemplateElem;
        /** @internal */
        private [_context]: Application.Context;
        /** @internal */
        private [_state]: Application.Bundle;
        /** @internal */
        private [_fragmentManager]: Application.FragmentManager;

        public static observedAttributes = AfcBindableElement.observedAttributes.concat([
            'data-binder', 'format-numbers'
        ]);

        constructor(adapter?: Globals.TemplateElemAdapter) {
            super();
            this._adapter = adapter ?? new Globals.TemplateElemAdapter(this[_control] = new Controls.TemplateElem(this));
            this._adapter.onGenerate = this[_onGenerate].bind(this);
        }

        protected _onRestoreViewState(context: Application.Context, fragmentManager: AFC.Application.FragmentManager, savedInstanceState?: Application.Bundle): void {
            super._onRestoreViewState(context, fragmentManager, savedInstanceState);
            this[_context] = context;
            this[_state] = savedInstanceState;
        }

        /** @internal */
        protected [_onGenerate](): void {
            this[_context] && onRestoreViewState(this[_context], this, this[_fragmentManager], this[_state]);
            _dispatchEvent(this, 'dataChange');
        }

        public set dataBinder(value: (name: string, key: string, value: Data.IDataItemContainer) => any) {
            this[_control].dataBinder = value;
        }

        public get dataBinder(): (name: string, key: string, value: Data.IDataItemContainer) => any {
            return this[_control].dataBinder;
        }

        public set adapter(adapter: Globals.TemplateElemAdapter) {
            this._adapter = adapter;
        }

        public get adapter() {
            return this._adapter;
        }

        /**
         * Store initial content <afc-gui-template-elem> as template
         */
        public connectedCallback(): void {
            let templates: HTMLCollectionOf<HTMLTemplateElement> = this.getElementsByTagName("template");
            let template: HTMLTemplateElement;

            if (templates.length) {
                for (let i: number = 0; i < templates.length; ++i) {
                    if (templates[i].parentNode === this) {
                        let name: string = (template = templates[i]).getAttribute('name');
                        this[_control].setTemplate(template.innerHTML, name === null ? void 0: name);
                    }
                }
            } else {
                this[_control].setTemplate(this.innerHTML);
            }

            // Clean content
            while(this.firstChild) {
                this.removeChild(this.firstChild);
            }

            super.connectedCallback();
        }

        public disconnectedCallback(): void {
            delete this._adapter.onGenerate;
            super.disconnectedCallback();
        }

        public attributeChangedCallback(attrName: string, oldVal: string, newVal: string): void {
            let f: any;

            switch (attrName) {
                case 'data-binder':
                    (f = StringToFunction(newVal)) && (this.dataBinder = f);
                    break;
                case 'format-numbers':
                    this[_control].setFormatNumbers(newVal !== null);
                    break;
                default:
                    super.attributeChangedCallback(attrName, oldVal, newVal);
                    break;
            }
        }

        public refresh(): void {
            this._adapter.refresh();
        }
    }

    registerElement("afc-gui-template-elem", AfcGuiTemplateElem);
}