/**
 * Created by jean.rennes on 28/05/2019.
 */

namespace AFC.gui {

    class AfcGuiPhotoControl extends AFC.Controls.Control {
        private _ro: boolean;
        private _format: string;

        constructor(element: string | HTMLElement) {
            super(element);
            
            this._ro = false;
            this.empty();
        }

        public setROMode(ro: boolean): void {
            this._ro = ro;
        }
        
        public empty(): void {
            $(this.node).empty();
        }
        public refresh(storePictures: AFC.PhotoManager.IPicturesSource) {
            let mainNode = $(this.node);
            this.empty();

            let _this               = this;
            let bind                = mainNode.attr("bind") || "";
            let name                = mainNode.attr("name") || "";
            let pictureId           = mainNode.attr("pictureId") || "";
            let id                  = mainNode.attr("id");
            let title               = mainNode.attr("title");
            let pictureFormat       = mainNode.attr("pictureFormat");
            let input               = $("<input/>");
            let div                 = $("<div/>");
            let divprogress         = $("<div/>");
            let divimg              = $("<div/>");
            let divCamera           = $("<div/>");
            let divDate             = $("<span class='pictureDate'/>");
            let table               = $("<table/>");
            let img                 = $("<img/>");
            let divContainer        = $("<div/>");
            let spanPicturesCount   = $("<span/>");
            let waitControl         = new AFC.Controls.ControlLoadingState(divprogress[0], true);

            img.click(function() {
                $("#picture_fullscreen").css("background-image", `url("${$(this).attr("src")}")`);
                $("#picture_fullscreen").show();
            });
            let refreshPicturesCount = function() {
                if (name != "") {
                    storePictures && storePictures.getPictures([{name:bind, value: name}]).then(pictures => {
                        if (pictures && pictures.length > 1) {
                            spanPicturesCount.html(`&nbsp;(${pictures.length})`);
                            spanPicturesCount.show();
                        } else
                            spanPicturesCount.hide();
                    });
                }
            }
            let refreshPicture = function() {
                divOKCancel.hide();
                setHasPictureStyle(true);
                if (name != "") {
                    storePictures && storePictures.getFirstPicture([{name:bind, value:name}]).then(pic => {
                        if (pic) {
                            waitControl.show();
                            img.data("picture", pic);
                            pic.getData(pictureFormat).then(data => {
                                waitControl.hide();
                                setPictureSource(data, pic);
                                if (!_this._ro)
                                    divOKCancel.show();
                            });
                        } else {
                            img.data("picture", null);
                            setPictureSource("");
                        }
                    });
                } else {
                    storePictures && storePictures.getPicture(pictureId).then(pic => {
                        if (pic) {
                            waitControl.show();
                            img.data("picture", pic);
                            pic.getData().then(data => {
                                waitControl.hide();
                                setPictureSource(data, pic);
                                if (!_this._ro)
                                    divOKCancel.show();
                            });
                        } else {
                            img.data("picture", null);
                            setPictureSource("");
                        }
                    });
                }
            }
            let setHasPictureStyle = function(hasPicture: boolean, picture?: AFC.PhotoManager.Picture) {
                let date;

                if (hasPicture) {
                    divContainer.addClass("cameraPhoto");
                    divContainer.removeClass("cameraNoPhoto");
                    divCamera.hide();
                    divDate.show();
                    if (picture)
                        date = new Date(picture.creationDate);
                    else
                        date = new Date(Date.now());

                    divDate.html(date.toLocaleString(undefined, {
                        weekday: "long", 
                        year: "numeric", 
                        month: "long", 
                        day: "numeric"
                    }).replace(/ /g, "&nbsp;"));
                    if (!_this._ro)
                        divOKCancel.show();
                } else {
                    divContainer.addClass("cameraNoPhoto");
                    divContainer.removeClass("cameraPhoto");
                    divCamera.show();
                    divDate.hide();
                }
            }
            let setPictureSource = function(picSrc: string, picture?: AFC.PhotoManager.Picture) {
                if (picSrc != "") {
                    img.attr("src",  picSrc);
                    setHasPictureStyle(true, picture);
                } else {
                    img.attr("src",  "#");
                    setHasPictureStyle(false);
                }
                refreshPicturesCount();
            }
            
            input.change(function() {
                const [file]    = (this as HTMLInputElement).files
                let parent      = img.parent();

                if (file && parent) {
                    let tags = [
                        {
                            name: $(this).attr("bind"),
                            value: $(this).attr("name")
                        }
                    ];
                    let toReplace = img.data("picture");
                    
                    waitControl.show();
                    setHasPictureStyle(true);
                    divOKCancel.hide();
                    img.hide();
                    storePictures && storePictures.addPicture(file, tags, toReplace).then(newPicture => {
                        setPictureSource(URL.createObjectURL(file));
                        img.data("picture", newPicture);
                        img.show();
                        waitControl.hide();
                        if (!_this._ro)
                            divOKCancel.show();
                        refreshPicturesCount();
                    });
                } else {
                    storePictures && storePictures.getFirstPicture([{name:bind, value: name}]).then(pic => {
                        storePictures.deletePicture(pic).then(success => {
                            img.data("picture", null);
                            refreshPicture();
                        });
                    });
                }
            });
    
            img.attr("name", name);
            img.attr("bind", bind);

            input.attr("id", id);
            input.attr("name", name);
            input.attr("bind", bind);
            input.attr("type", "file");
            input.attr("accept", "image/*");
            //input.attr("capture", "environment");
            input.hide();

            divCamera.addClass("cameraButton");
            divCamera.append(input);
            divCamera.click(function() {
                if (input && input[0])
                    input[0].click();
            });

            let tr = $("<tr class='pictureTitle'/>")
            let td = $("<td/>")
            td.css("width", "90%");
            td.text(title);
            td.append(spanPicturesCount);
            tr.append(td);

            td = $("<td/>")
            td.append(divDate);
            if (!this._ro)
                td.append(divCamera);
            tr.append(td);
            table.append(tr);

            tr              = $("<tr/>")
            td              = $("<td/>")
            td.attr("colspan", 2);

            let divOKCancel         = $("<div id='' style='display: flex; flex: none;' />");
            let divDeletePicture    = $("<div class='btn_deletePicture'/>");
            let divUpdatePicture    = $("<div class='btn_updatePicture' style='right: 0;'/>");
            if (!this._ro) {
                divOKCancel.append(divDeletePicture);
                divOKCancel.append(divUpdatePicture);
            }
            img.addClass("photomanager-photo");
            refreshPicture();
            divimg.append(img);
            divContainer.append(divprogress);
            divContainer.append(divimg);
            divContainer.append(divOKCancel);
            divDeletePicture.click(function() {
                (_this.node as AfcGuiPhoto).deletePictureCheck(_this.node as AfcGuiPhoto).then(process => {
                    if (process)
                        input.val('').trigger('change');
                })
            });
            divUpdatePicture.click(function() {
                if (input && input[0])
                    input[0].click();
            });
            divOKCancel.hide();

            td.append(divContainer);
            tr.append(td);
            table.append(tr);
            
            mainNode.append(table);
        }
    };

    export class AfcGuiPhoto extends AfcGuiElement {
        protected _pictureSource: AFC.PhotoManager.IPicturesSource;
        protected _control: AfcGuiPhotoControl;
        public static observedAttributes = ForElement.observedAttributes;

        constructor() {
            super();
            this._control = new AfcGuiPhotoControl(this)
        }
        public set picturesSource(pictureSource: AFC.PhotoManager.IPicturesSource) {
            this._pictureSource = pictureSource;
        }
        
        protected _onGenerate(): void {
            //_dispatchEvent(this, 'dataChange');
        }

        public connectedCallback(): void {
            this.refresh();
        }
        public refresh() : void {
            $(this).empty();
            this._control.refresh(this._pictureSource);
        }

        public deletePictureCheck(picture: AfcGuiPhoto) : Promise<boolean> {
            return Promise.resolve(true)
        }
        public setROMode(ro: boolean) {
            this._control.setROMode(ro)
        }
        //title="PANORAMIQUE DE LOIN" bind="KIND" name="PANO_LOIN"
    }
    
    registerElement("afc-gui-photo", AfcGuiPhoto);
}