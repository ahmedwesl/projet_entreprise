/**
 * Created by jean.rennes on 28/05/2019.
 */
///<reference path="ForElement.ts" />

namespace AFC.gui {
    export class LabelProvider<Model extends Globals.ILabelProvider> extends Tools.EventSink implements Globals.ILabelProvider {
        protected _model: Model;
        
        protected _onAttach(/*event: Tools.IEvent*/): void {
            this.fireEvent(Tools.EventType.Dirty);
        }
        
        protected _onDirty(/*event: Tools.IEvent*/): void {
            this.fireEvent(Tools.EventType.Attach);
        }
        
        constructor() {
            super();
            this.on(Tools.EventType.Attach, this._onAttach, this);
        }
        
        public get label(): string {
            return this._model && this._model.label;
        }

        public set model(value: Model) {
            if (value !== this._model) {
                this._model && this._model.off(Tools.EventType.Dirty, this._onDirty, this);
                value ? (this._model = value).on(Tools.EventType.Dirty, this._onDirty, this) : delete this._model;
                this.fireEvent(Tools.EventType.Attach);
            }
        }        
                
        public get model(): Model {
            return this._model;
        }        
    }

    export interface ILabelProviderHolder extends HTMLElement {
        label: Globals.ILabelProvider;
    }
    
    function _setProvider(name: AfcGuiLabel, forVal: string): HTMLElement {
        let holder: ILabelProviderHolder = forVal && <any>document.getElementById(forVal);
        name.model =  holder && holder.label;
        return holder;
    }

    export class AfcGuiLabel extends ForElement<Globals.ILabelProvider, Globals.LabelAdapter> {
        public static observedAttributes = ForElement.observedAttributes;

        constructor() {
            super(_setProvider);
            this._adapter = new Globals.LabelAdapter(new Controls.Label(this));
        }
    }
    
    registerElement("afc-gui-label", AfcGuiLabel);
}