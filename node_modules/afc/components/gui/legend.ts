/**
 * Created by jean.rennes on 03/10/2018.
 */
///<reference path="Globals/ForElement.ts" />

namespace AFC.gui {
    export interface ILegendsProviderHolder extends HTMLElement {
        legends: Globals.ILegendsProvider;
    }

    function _internalBind(legend: AfcGuiLegend, forVal: string): ILegendsProviderHolder {
        let holder: ILegendsProviderHolder = forVal && <any>document.getElementById(forVal);
        legend.model =  holder && holder.legends;
        return holder;
    }
    
   export class AfcGuiLegend extends ForElement<Globals.ILegendsProvider, Globals.LegendsAdapter> {
        public static observedAttributes = ForElement.observedAttributes.concat(['enable-filtering']);
        
        protected _onDirty(/*event: Tools.IEvent*/): void {
            this._adapter.control && this._adapter.control.loadingStart();
            if (this.model && this.enableFiltering) {
                _dispatchEvent(this, 'dataChange', {detail: !this._adapter.isEmpty()});
            }
        }
        
        constructor() {
            super(_internalBind);
            this._adapter = new Globals.LegendsAdapter(new Controls.Legends(this));
        }
        
        public set enableFiltering(value: boolean) {
            this._adapter.enableFiltering = !!value;
        }

        public get enableFiltering(): boolean {
            return !this._adapter.enableFiltering;
        }

        public attributeChangedCallback(attrName: string, oldVal: string, newVal: string): void {
            (attrName === 'enable-filtering') ? this.enableFiltering = newVal !== null : super.attributeChangedCallback(attrName, oldVal, newVal);
        }
        
        public isEmpty(): boolean {
            return this._adapter.isEmpty();
        }
    }
        
    registerElement("afc-gui-legend", AfcGuiLegend);
}