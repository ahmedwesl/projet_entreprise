/* global AFC */
/* global L */
/* global CryptoJS */
/* global Promise */

// For compatibility only
(function(AFC) {
    "use strict";
    var Application;
    (function(Application) {
// <editor-fold defaultstate="collapsed" desc="GUI Button section">
        (function () {
            const _onClick = Symbol(),
                _src = Symbol(),
                _checked = Symbol();

            const ButtonType = {
                fullMap: 1,
                logout: 3,
                pdf: 4,
                pptx: 5,
                back: 11
            };

            const ButtonHandlers = {
                [ButtonType.fullMap]: application => application.toggleState(Application.States.fullMap),
                [ButtonType.logout]: application => application.logout(),
                [ButtonType.pdf]: application => application.getReport(AFC.Rest.RestFormat.pdf),
                [ButtonType.pptx]: application => application.getReport(AFC.Rest.RestFormat.pptx),
                [ButtonType.back]: application => application.back()
            };

            function _generate(button, src) {
                let attribute = button.getAttribute('type'),
                    type = ButtonType[attribute];

                if (src) {
                    var img = new Image();
                    img.onload = () => {
                        $.extend(button.style, {
                            width: `${img.width}px`,
                            height: `${img.height / 4}px`
                        });
                        button.style.background = `transparent url("${src}") no-repeat`;
                    };
                    img.src = src;

                } else {
                   (type !== void 0) && (button.style.backgroundPosition = `${-40 * type}px 0`);
                }
            }

            class AfcGuiButton extends AFC.gui.AfcGuiElement {
                constructor() {
                    super();
                    this.addEventListener('click', this[_onClick].bind(this), false);
                    _generate(this);
                }
                [_onClick](event) {
                    let attribute = this.getAttribute('type'), type = ButtonType[attribute], handler, application;
                    (type !== void 0) && (handler = ButtonHandlers[type]) && (application = Application.instance || this[_activity]) && setTimeout(() => { event.defaultPrevented || handler(application); }, 0);
                }
                _onRestoreViewState(activity, fragmentManager, savedInstanceState) {
                    this[_activity] = activity;
                }
                attributeChangedCallback(attrName, oldVal, newVal) {
                    (attrName === 'src') && _generate(this, this.src = newVal);
                }
            };
            AfcGuiButton.observedAttributes = AFC.gui.AfcGuiElement.observedAttributes.concat(['src', 'checked']);
            
            let iCounter = 0;
            class AfcGuiSelectorSwitch extends AFC.gui.AfcGuiElement {
                [_onClick](event) {
                    let attribute = this.parentNode.getAttribute('for'), selector = attribute && document.getElementById(attribute);
                    selector && (selector.mode = $(event.target).is(':checked') ? 2 : 1);
                }
                connectedCallback() {
                    if (!this.childNodes) {
                        let div = document.createElement('div'), input = document.createElement('input'), span = document.createElement('span'), label = document.createElement('label');
                        label.htmlFor = input.id = `selectorSwitch|${iCounter++}`;
                        input.type = 'checkbox';
                        div.appendChild(input);
                        span.appendChild(label);
                        div.appendChild(span);
                        this.appendChild(div);
                        $(div).change(this[_onClick].bind(this));
                    }
                }
                refresh() {
                    let attribute = this.getAttribute('for'), selector = attribute && document.getElementById(attribute);
                    selector && $(this).find('input').prop('checked', selector.mode === 2);
                };
            };
            AFC.gui.registerElement("afc-gui-button", AfcGuiButton);
            AFC.gui.registerElement("afc-gui-selector-switch", AfcGuiSelectorSwitch);
        })();
 // </editor-fold>
 
        const _screen = Symbol(),
            _fragment = Symbol(),
            _activity = Symbol(),
            _application = _activity,
            _root = Symbol(),
            _layouts = Symbol(),
            _authorizationPolicy = Symbol(),
            _layoutEngine = Symbol(),
            _options = Symbol(),
            _positionWaitBar = Symbol(),
            _modalWindow = Symbol(),
            _progressBar = Symbol();
            
        let _screenIds = 0;
        
        function empty() {
            
        }
        
    
    class ModalWindow {
        constructor(divId, activity) {
            this._divId         = divId;
            this._itemValues    = {};
            this._isOpened      = false;
            this._activity      = activity;
        }
        
        setParent(parent) {
            if (!this.getElement()) {
                let div = document.createElement("afc-gui-div");
                div.setAttribute('id', this._divId);
                div.className = "ModalWindow";
                
                parent.appendChild(div);
            }
        }
        
        setTemplate(templateId, reset) {
            this.close();
            this._templateId = templateId;
            if (reset) {
                this._itemValues    = {};
                this._callBack      = null;
            }
        }
                
        setTextValue(textId, textValue) {
            this._itemValues[textId] = textValue;
        }
        
        setOnClick(callback) {
            this._callBack = callback;
        }
        
        open() {
            let div     = this.getElement();
            
            if (div) {
                let templateElement = $(div).find('#modalTemplateHolder').get(0);

                if (!templateElement) {
                    templateElement = new AFC.gui.AfcGuiTemplate();
                    templateElement.setAttribute('id', 'modalTemplateHolder');
                    div.appendChild(templateElement);
                }
                templateElement.setAttribute('content', this._templateId);

                for (let item in this._itemValues) {
                    let _thisElementId = item;

                    div.querySelectorAll('#' + item).forEach(element => {
                        element.style.whiteSpace   = 'pre';
                        element.textContent        = this._itemValues[_thisElementId] ? this._itemValues[_thisElementId].replace(/\n/g, "\r\n") : '';
                    });
                }

                div.querySelectorAll('.modalWindowButton').forEach(element => element.addEventListener('click', this._onClickButton.bind(this, element.getAttribute('id'))));
                AFC.gui.onRestoreViewState(this._activity, templateElement);
                if (this._callBack)
                    this._callBack("beforeShowing");
            }
            
            // dirty hack to blur main window - to be cleaned later
            {
                let element = this._activity.getWindow().getElement().firstChild;
                element.style.filter = 'blur(2px)';
            }
            
            this._isOpened          = true;
            div.style.visibility    = 'visible';
            div.hidden              = false;
        }
        
        close() {
            let div     = this.getElement();
            
            if (div) {
                // unblur main window - to be cleaned later
                {
                    let element = this._activity.getWindow().getElement().firstChild;
                    element.style.filter = '';
                }
            
                
                div.style.visibility    = 'hidden';
                div.hidden              = true;
                this._isOpened          = false;
            }
        }
        
        _onClickButton(actionId, e) {
            if (this._callBack)
                this._callBack(actionId);
            else
                this.close();
            e.stopPropagation();
        }
                
        getElement() {
            return document.getElementById(this._divId);
        }
        
        isOpened() {
            return this._isOpened;
        }
    };
    
    class ScreenFragment extends Application.Fragment {
            get tag() {
                let screen = this.getArguments().getValue('screen');
                return screen.constructor.id;
            }
        
            onCreate(savedInstanceState) {
                this[_screen] = this.getArguments().getValue('screen');
            }
            
            onCreateView(inflater, container, savedInstanceState) {
                let activity = this.getActivity(),
                    screen = this[_screen];
                return screen.onCreateView(activity[_layoutEngine], container, savedInstanceState);
            }
            
            onActivityCreated(savedInstanceState) {
                let activity = this.getActivity(),
                    screen = this[_screen];
                
                activity.positionWaitBar();
                savedInstanceState || screen.onLoad(empty);
                screen.connectedCallback();
                screen._isLoaded(()=> {
                    let root = activity.getWindow().getElement(),
                        context;
                    savedInstanceState && (context = savedInstanceState.getValue('context')) && screen.deserialize(context);
                    screen.prefetch(()=> {
                        screen.fetch(empty);
                    });
                });
            }

            onSaveInstanceState(savedInstanceState) {
                let context = {};
                this[_screen].serialize(context);
                savedInstanceState.putValue('context', context);
            }

            onDestroy() {
                this[_screen].onUnload();
            }
            
            onResize() {
                let activity = this.getActivity(),
                    layoutEngine = activity[_layoutEngine],
                    root = activity.getWindow().getElement();
                layoutEngine.generate(this[_screen], true);
                void(root.offsetWidth); // force redraw
                root.resize({ left: 0, top: 0, width: window.innerWidth, height: window.innerHeight });
            }
            
            onStateChange(fragmentManager) {
                let activity = this.getActivity(),
                    layoutEngine = activity[_layoutEngine],
                    root = activity.getWindow().getElement(),
                    savedInstanceState = new AFC.Application.Bundle();

                AFC.gui.onSaveInstanceState(activity, this.getView(), savedInstanceState);
                layoutEngine.generate(this[_screen], true);
                root.resize({ left: 0, top: 0, width: window.innerWidth, height: window.innerHeight });
                AFC.gui.onRestoreViewState(activity, this.getView(), fragmentManager, savedInstanceState);
            }            
        };

        class MainActivity extends Application.DashboardActivity {
            _onCreate(iCicle) {
                super._onCreate(iCicle);
                
                let rest = this.getRestModel();

                if (rest) {
                    rest.on(AFC.Tools.EventType.NetworkError, event => this._onNetworkError(event));
                    rest.on(AFC.Tools.EventType.IdentityError, event => this._onIdentityError(event));
                }
                this[_positionWaitBar] = empty;
                this.getBaseContext()[_activity] = this;
            }
            
            _onNetworkError(event) {
                this.getBaseContext().onNetworkError(event.data);
            }
            
            _onIdentityError(event) {
                this.getBaseContext().onIdentityError(event.data);
            }
            
            _onStart() {
                (this[_layoutEngine] = new Application.LayoutEngine()).initialize(this, document.body/*, {timeout: 100}*/).then(() => {
                    let window = this.getWindow(),
                        element = window && window.getElement();
                    
                    if (element) {
                        let root = this[_root] = document.createElement("afc-gui-fragmentholder"),
                            options = this.getIntent().getValue('waitBar'),
                            waitBar = document.createElement("afc-gui-wait-bar"),
                            fragment = this[_fragment];

                        element.setAttribute('style', 'width: 100%; height: 100%; margin: 0 auto; overflow: hidden;');
                        fragment && this.setFragment(fragment);
                        this.setContentView(root);
                        
                        // configure progress bar
                        waitBar.id = 'WaitBar';
                        if (options) {
                            waitBar.setOptions(options);
                            if (options.positionWaitBar) {
                                this[_positionWaitBar] = options.positionWaitBar.bind({isWaiting: ()=>true});   // for retro-compatibility
                            }
                        }
//                    waitAnimation = progressBar.initWaitBar('WaitBar', options);
// progressBar.initProgressBar('ProgressBar');
                        $(element).append(waitBar);
                        waitBar._onRestoreViewState(this, this.getSupportFragmentManager());
                    }
                });
            }
            
            positionWaitBar() {
                this.getBaseContext().initProgressBar();
                this[_positionWaitBar] && this[_positionWaitBar]();
            }
            
            _onStop() {
                this[_layoutEngine] && this[_layoutEngine].destroy();
                delete this[_layoutEngine];
            }
            
            onResize() {
                if (this[_fragment]) {
                    this[_fragment].onResize(screen);
                    this.positionWaitBar();
                }
            }
            
            onStateChange() {
                this[_fragment].onStateChange(this.getSupportFragmentManager());
            }
            
            onLayoutChange(oldLayout) {
                let fragmentManager = this.getSupportFragmentManager(),
                    fragment = this[_fragment],
                    root = this[_root];
            
                Application.FragmentManager.detachView(fragment);
                root.setContent(null);
                root.setContent(fragment, fragment.tag);
                this[_positionWaitBar]();
            }
            
            setFragment(fragment) {
                let options = this[_options];
                
                this[_fragment] = fragment;
                if (this[_root]) {
                    this[_root].setContent(fragment, fragment.tag);
                    this[_positionWaitBar]();
                }
            }
        };
        
        Application.AppDashboard = (function (_super) {
            __extends(AppDashboard, _super);

            function authorize(application, identity, serviceUrl, force) {
                if (force || (identity && identity.isAuthenticated)) {
                    application.startCompatibleActivity(serviceUrl, identity);
                    application.onAppAuthorized(identity);
                    return true;
                }
            }

            function AppDashboard(project, options) {
                let baseUrl,
                    provider,
                    providerUrl,
                    serviceUrl,
                    authorizationPolicy,
                    application,
                    intent;

                if (options) {
                    baseUrl = options.baseUrl;
                    provider = options.provider;
                    providerUrl = options.providerUrl;
                    serviceUrl = options.serviceUrl;
                    authorizationPolicy = options.authorizationPolicy;
                }
                providerUrl || (providerUrl = AFC.Rest.getServiceUrl(provider || project, baseUrl));
                serviceUrl || (serviceUrl = AFC.Rest.getServiceUrl(project, baseUrl));
                Application.instance = this;
                this.projectName = project;
                this[_options] = options;
                this[_layouts] = {};
                this._sink = new AFC.Tools.EventSink(this);
                this.registerScreenLayouts();
                this._sink.on(AFC.Tools.EventType.UserEvent, this[_screen], this);
                this.startCompatibleActivity(serviceUrl);
                this[_authorizationPolicy] = authorizationPolicy || (authorizationPolicy = new AFC.Rest.AuthorizationPolicy(providerUrl));
                AFC.Application.ShowWaitBar();
                authorizationPolicy.init().then(async authType => {
                    let force = authType !== AFC.Rest.AuthType.direct,
                        identity = force && await authorizationPolicy.getIdentity();
                    
                    AFC.Application.HideWaitBar();
                    authorize(this, identity, serviceUrl, force);
                });
            }

            Object.defineProperty(AppDashboard.prototype, "rest", {
                get: function () {
                    return this[_activity].getRestModel();
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(AppDashboard.prototype, "screen", {
                set: function(value) {
                    if (value && (this[_screen] = value.screenId ? value : this.createScreen(value))) {
                        this._sink.fireEvent(AFC.Tools.EventType.UserEvent);
                    }
                },
                get: function () {
                    return this[_screen];
                },
                enumerable: true,
                configurable: true
            });

            AppDashboard.prototype.startCompatibleActivity = function(serviceUrl, identity) {
                let intent = new AFC.Application.Intent(this, MainActivity);
                intent.putValue('serviceUrl', serviceUrl);
                intent.putValue('waitBar', this[_options].waitBar);
                identity && intent.putValue('identity', identity);
                if (this[_activity]) {
                    this[_activity].finish();
                }
                this.startActivity(intent);
            };

            AppDashboard.prototype[_screen] = function() {
                let fragment = new ScreenFragment(),
                    bundle = new Application.Bundle();
                bundle.putValue('screen', this[_screen]);
                fragment.setArguments(bundle);
                this[_activity].setFragment(fragment);
            };

            AppDashboard.prototype.getActivity = function() {
                return this[_activity];
            };

            AppDashboard.prototype.getOptions = function() {
                return this[_options];
            };

            AppDashboard.prototype.registerScreenLayout = function(layout) {
                let id = layout.id || _screenIds++;
                (this[_layouts] || (this[_layouts] = {}))[id] = layout;
            };
            
            AppDashboard.prototype.registerScreenLayouts = function() {
                // should be overridden
            };

            AppDashboard.prototype.createScreen = function(value, state) {
                let ctor = this[_layouts][value];
                return ctor && new ctor(this, state);
            };
            
            AppDashboard.prototype.refresh = function() {
                this.fireEvent(AFC.Tools.EventType.Refresh);
                return this[_activity].onStateChange();
            };
            
            AppDashboard.prototype.getModalWindow = function() {
                let modalWindow = this[_activity] && this[_modalWindow];
                       
                if (!modalWindow) {
                   modalWindow = this[_modalWindow] = new ModalWindow('appModalWindow', this[_activity]);
                   modalWindow.setParent(this[_activity].getWindow().getElement());
                }
                return modalWindow;
            };
            
            AppDashboard.prototype.closeModalWindow = function() {
                let modalWindow = this[_modalWindow];
                modalWindow && modalWindow.close();
            };
            
            AppDashboard.prototype.initProgressBar = function() {
                let element = document.getElementById('ProgressBar');
                if (element) {
                    let progressBar = this[_progressBar];
                    
                    (this[_progressBar] = new AFC.Globals.WaitAdapter({
                        progressBar: new AFC.Controls.ProgressBar(element)
                    })).register();
                    progressBar && progressBar.unregister();
                }            
            }
            
// <editor-fold defaultstate="collapsed" desc="Login section">
            AppDashboard.prototype.getAuthorizationPolicy = function() {
                return this[_authorizationPolicy];
            };
                
            AppDashboard.prototype.getIdentity = function() {
                return this.getAuthorizationPolicy().getIdentity();
            };
                
            AppDashboard.prototype.enterOnLogin = function(event) {
                let key = event.which || event.keyCode || 0;

                if (key === 13) {
                    this.checkCredentials();
                    return true;
                }
                return false;
            };
            
            AppDashboard.prototype.onNetworkError = function(errors) {
                alert(errors[0].textStatus + '\n' + errors[0].errorThrown);
            };
            
            AppDashboard.prototype.onIdentityError = function(errors) {
            };
            
            AppDashboard.prototype.onLoginDenied = function(identity) {
                document.getElementById('error').innerHTML = identity.status === AFC.Rest.ConnectionStatus.maxConnection ?
                    'Le nombre maximum de connexions simultanées est atteint' :
                    'Veuillez vérifier vos identifiants';
            };
            
            let loginProcessing;
            
            function _onAuthentication(application, identity, loadingCtrl) {
                let validateButton  = $('#loginValidateButton');

                if (!authorize(application, identity, application.getActivity().getIntent().getValue('serviceUrl'))) {
                    loadingCtrl && loadingCtrl.hide();
                    validateButton.removeClass('btn_ok_disabled');
                    application.onLoginDenied(identity);
                }
                Application.HideWaitBar();
            }
            
            AppDashboard.prototype.checkCredentials = function() {
                if (!loginProcessing) {
                    let user,
                        pwd,
                        waitCtrl,
                        validateButton,
                        loadingCtrl,
                        restModel = this.rest,
                        authorizationPolicy = this[_authorizationPolicy];

                    if (authorizationPolicy && restModel) {
                        user            = document.getElementById('username').value;
                        pwd             = document.getElementById('password').value;
                        
                        if (user && pwd) {
                            waitCtrl        = document.getElementById('loginWaitControl');
                            validateButton  = $('#loginValidateButton');

                            if (waitCtrl) {
                                validateButton.addClass('btn_ok_disabled');
                                loadingCtrl = new AFC.Controls.ControlLoadingState(waitCtrl, true);
                                loadingCtrl.show();
                            }
                            document.getElementById('error').innerHTML = '&nbsp;';
                            Application.ShowWaitBar();
                            loginProcessing = true;
                            authorizationPolicy.setDirectIdentity(user, pwd).then(identity => loginProcessing = _onAuthentication(this, identity, loadingCtrl));
                        }
                    }
                }                
            };
            
            AppDashboard.prototype.onAppAuthorized = function(identity) {
                // should be overridden
            };
            
            AppDashboard.prototype.logout = function() {
                let identity = this.getActivity().getIdentity(),
                    logoutUri = identity.logoutUri;
                    
                identity.invalidate();
                logoutUri ?
                    window.location.href = logoutUri:
                    location.reload();
            };
// </editor-fold>
            
            /*
            AppDashboard.prototype.getReport = function(format) {

            };
            */
// <editor-fold defaultstate="collapsed" desc="Dashboard wrapping section">
            AppDashboard.prototype.refreshStamps = /* async */ function() {
                return this[_activity].refreshStamps();
            };

            AppDashboard.prototype.getStoreSource = function(dbName, name, parcType, remote) {
                return this[_activity].getStoreSource(dbName, name, parcType, remote);
            };
        
            AppDashboard.prototype._pushContextModifiers = function(dashboard, storeSource, context) {
                this[_activity]._pushContextModifiers(dashboard, storeSource, context);
            };

            AppDashboard.prototype.getDashboards = function(descriptors, storeSource, store, project, context) {
                storeSource.init(project);
                return this[_activity].getDashboards.call(this, descriptors, storeSource, store, project, context);
            };
// </editor-fold>
            
// <editor-fold defaultstate="collapsed" desc="Report section">
            AppDashboard.prototype.generateExcelFile = function(command, file) {
                new AFC.Dashboards.DashboardsDescriptor(this.rest).getDashboards().then(() => this.generateExcelFileEx(command, file));
            };

            AppDashboard.prototype.generateExcelFileEx = function(command, file) {
                command && new AFC.Data.Queries(this.rest).createAjaxRequest([command], AFC.Rest.RestFormat.xlsx).then(request => {
                    if (request) {
                        Application.ShowWaitBar();
                        
                        var _this = this;
                        var xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = function() {
                            if (xhttp.readyState === 4) 
                            {
                                if (xhttp.status === 200)
                                {
                                    var blob = new Blob([xhttp.response], {type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"});
                                    saveAs(blob, file || 'rapport.xlsx');
                                }
                                else
                                    alert('Une erreur est survenue pendant la génération du fichier.');
                                Application.HideWaitBar();
                            }
                        };
                        xhttp.open("POST", request.uri, true);
                        xhttp.responseType = "blob";
                        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                        var body = request.getBody();
                        body && xhttp.send(body);
                    }
                });
            };
            
            AppDashboard.prototype.generateCompositeReport = function(report, options) {
                new AFC.Dashboards.DashboardsDescriptor(this.rest).getDashboards().then(() => this.generateCompositeReportEx(report, options));
            };
            AppDashboard.prototype.generateReport = function(report, options, /* deprecated: options.fileName */ file, /* deprecated: options.dpi */ dpi) {
                new AFC.Dashboards.DashboardsDescriptor(this.rest).getDashboards().then(() => this.generateReportEx(report, options, file, dpi));
            };
            
            AppDashboard.prototype.generateTemplate = function(template, options, /* deprecated: options.fileName */ file, /* deprecated: options.dpi */ dpi) {
                new AFC.Dashboards.DashboardsDescriptor(this.rest).getDashboards().then(() => this.generateReportEx(template, options, file, dpi));
            };

            function _convertSpreadsheetItems(items) {
                return items.map(cell => {
                    let item = {
                        className: cell.className,
                        format: cell.format,
                        image: cell.image,
                        value: cell.value
                    };
                    (cell.renderer !== AFC.Globals.GridRenderer.text) && (item.renderer = AFC.Globals.gridRender(cell.renderer));
                    cell.width && (item.width = cell.width);
                    cell.height && (item.height = cell.height);
                    return item;
                });
            }

            function _convertSpreadsheet(sheet) {
                return {
                    classes: sheet.classes,
                    columnHeaders: {
                        height: sheet.columnHeaders.height,
                        visibility: sheet.columnHeaders.visibility,
                        items: _convertSpreadsheetItems(sheet.columnHeaders.items)
                    },                        
                    rowHeaders: {
                        width: sheet.rowHeaders.width,
                        visibility: sheet.rowHeaders.visibility,
                        items: _convertSpreadsheetItems(sheet.rowHeaders.items)
                    },
                    items: sheet.items.map(row => _convertSpreadsheetItems(row))
                };
            }

            AppDashboard.prototype.generateCompositeReportEx = function(reportSettings, options) {
                if (reportSettings && reportSettings.report) {
                    let uri         = `asterop/script/${this.screen.app.projectName}/report`;
                    let opt         = $.extend({format: AFC.Rest.RestFormat.pdf, useProgressInfo: true}, options);                    
                    let method      = 'Run';
                    let plugin      = 'asterop.rest.plugin';
                    let parameters  = {};
                    let script      = new AFC.Globals.BBSScript(this.rest, uri, method, parameters, plugin);
                    let head        = reportSettings.getPropValue("head", "");
                    let mid         = reportSettings.getPropValue("mid", "");
                    let tail        = reportSettings.getPropValue("tail", "");
                    let reports     = [];

                    reports.push(reportSettings.report.id);
                    if (head) {
                        let report = AFC.Tools.findByIdOrName(head, reportSettings.dashboard.views, view => view.type === AFC.Dashboards.ViewType.report);
                        if (report)
                            reports.push(report.id);
                    }
                    if (mid) {
                        let report = AFC.Tools.findByIdOrName(mid, reportSettings.dashboard.views, view => view.type === AFC.Dashboards.ViewType.report);
                        if (report)
                            reports.push(report.id);
                    }
                    if (tail) {
                        let report = AFC.Tools.findByIdOrName(tail, reportSettings.dashboard.views, view => view.type === AFC.Dashboards.ViewType.report);
                        if (report)
                            reports.push(report.id);
                    }

                    parameters.dashboard      = script.createDashboardParameter(reportSettings.dashboard, reports);
                    
                    parameters.reportSettings   = reportSettings.report.id;
                    parameters.outputFormat     = "pdf";
                    if (opt.format === AFC.Rest.RestFormat.pptx) {
                        parameters.outputFormat = "ppt";
                    }
                    else if (opt.format === AFC.Rest.RestFormat.xlsx) {
                        parameters.outputFormat = "xls";
                    }
                    else if (opt.format === AFC.Rest.RestFormat.csv) {
                        parameters.outputFormat = "csv";
                    }

                    script.getRequest(opt).then(request => {
                        var blob;
                        
                        if (options.dpi)
                            request.options.data.dpi = options.dpi;
                        Application.ShowWaitBar(this.rest, request.progressId);
                        
                        var xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = () => {
                            if (xhttp.readyState === 4) {
                                if (xhttp.status === 200) {
                                    var fileName;
                                    var responseWarning = xhttp.getResponseHeader("Warning");
                                    var warningText     = "";
                                    if (responseWarning) {
                                        responseWarning = JSON.parse(`"${responseWarning}"`);
                                        var aWarnParts = responseWarning.match(/[0-9]{3}\s\S*\s"(.*)"/);
                                        if (aWarnParts && aWarnParts.length === 2)
                                            warningText = aWarnParts[1];
                                    }
                                    if (opt.format === AFC.Rest.RestFormat.pptx) {
                                        blob = new Blob([xhttp.response], {type: "application/vnd.openxmlformats-officedocument.presentationml.presentation"});
                                        fileName = options.fileName || 'rapport.pptx';
                                    }
                                    else if (opt.format === AFC.Rest.RestFormat.xlsx) {
                                        blob = new Blob([xhttp.response], {type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"});
                                        fileName = options.fileName || 'rapport.xlsx';
                                    }
                                    else if (opt.format === AFC.Rest.RestFormat.csv) {
                                        blob = new Blob([xhttp.response], {type: "text/plain"});
                                        fileName = options.fileName || 'rapport.csv';
                                    }
                                    else {
                                        blob = new Blob([xhttp.response], {type: "application/pdf"});
                                        fileName = options.fileName || 'rapport.pdf';
                                    }
                                    saveAs(blob, AFC.Tools.StringTools.normalizeString(fileName));
                                    if (warningText !== "")
                                        alert(warningText);
                                }
                                else
                                    alert('Une erreur est survenue pendant la génération du rapport.');
                                Application.HideWaitBar(this.rest, request.progressId);
                            }
                        };
                        xhttp.open("POST", request.uri, true);
                        xhttp.responseType = "blob";
                        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                        var body = request.getBody();
                        body && xhttp.send(body);
                    });
                }
            }

            AppDashboard.prototype.generateReportEx = function(report, options, file, dpi) {
                if (report) {
                    let opt = $.extend({format: AFC.Rest.RestFormat.pdf, useProgressInfo: true}, options);                    
                    report.getRequest(opt).then(request => {
                        var blob;
                        
                        (dpi || (dpi = options.dpi))&&(request.options.data.dpi = dpi);
                        options.views && (request.options.data.context.views = options.views.map(view => ({
                            id: view.id,
                            content: _convertSpreadsheet(view.content)
                        })));
                        
                        Application.ShowWaitBar(this.rest, request.progressId);
                        
                        var xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = () => {
                            if (xhttp.readyState === 4) {
                                if (xhttp.status === 200) {
                                    var fileName;
                                    var responseWarning = xhttp.getResponseHeader("Warning");
                                    var warningText     = "";
                                    if (responseWarning) {
                                        responseWarning = JSON.parse(`"${responseWarning}"`);
                                        var aWarnParts = responseWarning.match(/[0-9]{3}\s\S*\s"(.*)"/);
                                        if (aWarnParts && aWarnParts.length === 2)
                                            warningText = aWarnParts[1];
                                    }
                                    if (opt.format === AFC.Rest.RestFormat.pptx) {
                                        blob = new Blob([xhttp.response], {type: "application/vnd.openxmlformats-officedocument.presentationml.presentation"});
                                        fileName = file || options.fileName || 'rapport.pptx';
                                    }
                                    else if (opt.format === AFC.Rest.RestFormat.xlsx) {
                                        blob = new Blob([xhttp.response], {type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"});
                                        fileName = file || options.fileName || 'rapport.xlsx';
                                    }
                                    else if (opt.format === AFC.Rest.RestFormat.csv) {
                                        blob = new Blob([xhttp.response], {type: "text/plain"});
                                        fileName = file || options.fileName || 'rapport.csv';
                                    }
                                    else {
                                        blob = new Blob([xhttp.response], {type: "application/pdf"});
                                        fileName = file || options.fileName || 'rapport.pdf';
                                    }
                                    saveAs(blob, AFC.Tools.StringTools.normalizeString(fileName));
                                    if (warningText !== "")
                                        alert(warningText);
                                }
                                else
                                    alert('Une erreur est survenue pendant la génération du rapport.');
                                Application.HideWaitBar(this.rest, request.progressId);
                            }
                        };
                        xhttp.open("POST", request.uri, true);
                        xhttp.responseType = "blob";
                        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                        var body = request.getBody();
                        body && xhttp.send(body);
                    });
                }
            };
// </editor-fold>

// <editor-fold defaultstate="collapsed" desc="static data and storage section">
            let _grabber;

            AppDashboard.prototype.getStaticData = function(url, callback) {
                (_grabber || (_grabber = new Application.DataGrabber())).getData(url).then(callback);
            };
            
            AppDashboard.prototype.getDataStorage = function() {
                return this[_activity].getDataStorage();
            };
// </editor-fold>

// <editor-fold defaultstate="collapsed" desc="EventSink">
            AppDashboard.prototype.on = function(type, callback, context) {
                this._sink.on(type, callback, context);
            };
            
            AppDashboard.prototype.off = function(type, callback, context) {
                this._sink.off(type, callback, context);
            };

            AppDashboard.prototype.once = function(type, callback, callbackref, context) {
                this._sink.once(type, callback, callbackref, context);
            };
            
            AppDashboard.prototype.notify = function(type, callback) {
                this._sink.notify(type, callback);
            };
            
            AppDashboard.prototype.fireEvent = function(type, data) {
                this._sink.fireEvent(type, data);
            };
// </editor-fold>
            return AppDashboard;
        })(Application.Application);
        
        function ZoomHandler(map) {
            var h = (function(e) {
                var map = e.target;
                
                var layers = map.model.layers;
                if (layers && layers.length) {
                    map.smartZoom();
                    map.removeEventListener('dataReady', h);
                }
            });
            map.addEventListener('dataReady', h);
        }
        Application.ZoomHandler = ZoomHandler;
    })(Application = AFC.Application || (AFC.Application = {}));
})(AFC);
