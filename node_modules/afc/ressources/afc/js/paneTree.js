/* global AFC */
/* global Application */
/* global HTMLElement */
(function(AFC) {
    "use strict";
    var Application;
    (function(Application) {
        let TreeNode = (function () {
            const _domId = Symbol('domId'),
                _tagName = Symbol('tagName');

            function TreeNode(id, level, parent)
            {
                this._id = id;
                this._level = level;
                this._parent = parent;
                this._iPosition = null; // 1=left, 2=top, 3=right, 4=bottom
                this._rules = null;
                this._html = null;
                this._script = null;
                this._css = null;
                this._divId = null;
                this._tileWidth = 0;
                this._tileHeight = 0;
                this._firstChild = null;
                this._secondChild = null;

                this.__defineGetter__("id", function(){
                    return this._id;
                });

                this.__defineGetter__("level", function(){
                    return this._level;
                });

                this.__defineGetter__("parent", function(){
                    return this._parent;
                });

                this.__defineGetter__("position", function(){
                    return this._iPosition;
                });

                this.__defineSetter__("position", function(iPosition){
                    this._iPosition = iPosition;
                });

                this.__defineGetter__("rules", function(){
                    return this._rules;
                });

                this.__defineSetter__("rules", function(rules){
                    this._rules = rules;
                });

                this.__defineGetter__("HTML", function(){
                    return this._html;
                });

                this.__defineSetter__("HTML", function(src){
                    this._html = src;
                }); 

                this.__defineGetter__("script", function(){
                    return this._script;
                });

                this.__defineSetter__("script", function(script){
                    this._script = script;
                });

                this.__defineGetter__("css", function(){
                    return this._css;
                });

                this.__defineSetter__("divId", function(divId){
                    this._divId = divId;
                });

                this.__defineGetter__("tileWidth", function(){
                    return this._tileWidth;
                });

                this.__defineSetter__("tileWidth", function(width){
                    this._tileWidth = width;
                });

                this.__defineGetter__("tileHeight", function(){
                    return this._tileHeight;
                });

                this.__defineSetter__("tileHeight", function(height){
                    this._tileHeight = height;
                });

                this.__defineGetter__("divId", function(){
                    return this._divId;
                });

                this.__defineSetter__("css", function(css){
                    this._css = css;
                });

                this.__defineGetter__("LTChild", function(){
                    return this._firstChild;
                });
                this.__defineGetter__("RBChild", function(){
                    return this._secondChild;
                });

                this.__defineGetter__("isHorizontal", function(){
                    return ((this.position===1) || (this.position===3));
                });
            }

            Object.defineProperty(TreeNode.prototype, "domId", {
                get: function () {
                    return this[_domId];
                },
                set: function (value) {
                    this[_domId] = value;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(TreeNode.prototype, "tagName", {
                get: function () {
                    return this[_tagName];
                },
                set: function (value) {
                    this[_tagName] = value;
                },
                enumerable: true,
                configurable: true
            });

            TreeNode.prototype.child = function(childId)
            {
                var oRes = null;

                if (this._firstChild && (this._firstChild.id === childId))
                    oRes = this._firstChild;
                else if (this._secondChild && (this._secondChild.id === childId))
                    oRes = this._secondChild;
                return oRes;
            };

            TreeNode.prototype.AddVerticalSplit = function(idTop, idBottom)
            {
                this._firstChild = new TreeNode(idTop, this.level+1, this);
                this._firstChild.position = 2;
                this._secondChild = new TreeNode(idBottom, this.level+1, this);
                this._secondChild.position = 4;
                return [this._firstChild, this._secondChild];
            };

            TreeNode.prototype.AddHorizontalSplit = function(idLeft, idRight)
            {
                this._firstChild = new TreeNode(idLeft, this.level+1, this);
                this._firstChild.position = 1;
                this._secondChild = new TreeNode(idRight, this.level+1, this);
                this._secondChild.position = 3;
                return [this._firstChild, this._secondChild];
            };    
            return TreeNode;
        })();

        let _root = Symbol(),
            _resizeHandler = Symbol();
        Application.PaneTree = class PaneTree {
            constructor(rootName) {
                this[_root] = new TreeNode(rootName, 0);
            }

            getRoot() {
                return this[_root];
            }
        };

        var LayoutEngine = (function() {
            let _mobileDiag2 = (7 * 2.54) * (7 * 2.54),  // max diagonal to get mobile layout
                _tabletDiag2 = (13 * 2.54) * (13 * 2.54);  // max diagonal to get tablet layout

            function _makeDivId(id) {
                return `__${id}__`;
            }

            function _makeDivIdEx(node) {
                return node.domId || _makeDivId(node.id);
            }

            function _nodeVisibleInState(oNode, strState) {
                let bRes = true;

                if (oNode && oNode.rules && oNode.rules.invisibleIn)
                    bRes = !(oNode.rules.invisibleIn.indexOf(strState)>=0);
                else if (oNode && oNode.rules && oNode.rules.visibleIn)
                    bRes = oNode.rules.visibleIn.indexOf(strState)>=0;
                return bRes;    
            }

            function _setNodeSize(oParentNode, oBaseNode, oCompNode) {
                if (oBaseNode.isHorizontal) {
                    oCompNode.tileWidth = Math.max(oParentNode.tileWidth - oBaseNode.tileWidth, 0);
                    oCompNode.tileHeight = oParentNode.tileHeight;
                }
                else {
                    oCompNode.tileWidth = oParentNode.tileWidth;
                    oCompNode.tileHeight = Math.max(oParentNode.tileHeight - oBaseNode.tileHeight, 0);
                }
            }

            function LayoutEngine() {
            }

            LayoutEngine.prototype._onResize = function(width, height) {
                let dx = width / this.dpiX,
                    dy = height / this.dpiY,
                    diag2 = (dx * dx) + (dy * dy),
                    layout;

                if (diag2 <= _mobileDiag2) {
                    layout = width < height ? Layouts.mobilePortrait : Layouts.mobileLandscape;
                }
                else if (diag2 <= _tabletDiag2) {
                    layout = width < height ? Layouts.tabletPortrait : Layouts.tabletLandscape;
                }
                else {
                    layout = width < height ? Layouts.desktopPortrait : Layouts.desktopLandscape;
                }
                this.width = width;
                this.height = height;
                return this.layout = layout;
            };
            
            LayoutEngine.prototype._fixNodesSize = function(oParentNode, oFirstNode, oSecondNode) {
                var totalSize;
                var firstNodeSize;
                var secondNodeSize;

                if (oFirstNode.isHorizontal) {
                    totalSize = oParentNode.tileWidth;
                    firstNodeSize = oFirstNode.tileWidth;
                    secondNodeSize = oSecondNode.tileWidth;
                }
                else {
                    totalSize = oParentNode.tileHeight;
                    firstNodeSize = oFirstNode.tileHeight;
                    secondNodeSize = oSecondNode.tileHeight;
                }
                if ((firstNodeSize+secondNodeSize) < totalSize) {
                    if (firstNodeSize===0)
                        secondNodeSize = totalSize;
                    else if (secondNodeSize===0)
                        firstNodeSize = totalSize;
                    else if (oFirstNode.rules.maxSize) {
                        if (!oSecondNode.rules.maxSize)
                            secondNodeSize = totalSize-firstNodeSize;
                    }
                    else
                        firstNodeSize = totalSize - secondNodeSize;
                } else if ((firstNodeSize+secondNodeSize) > totalSize) {
                    if (oFirstNode.rules.minSize)
                        secondNodeSize = totalSize-firstNodeSize;
                    else
                        firstNodeSize = totalSize - secondNodeSize;
                }
                if (oFirstNode.isHorizontal) {
                    oFirstNode.tileWidth = firstNodeSize;
                    oSecondNode.tileWidth = secondNodeSize;
                }
                else {
                    oFirstNode.tileHeight = firstNodeSize;
                    oSecondNode.tileHeight = secondNodeSize;
                }
                /* Layout rules cannot be bound to application variables anymore */
                /*if (oFirstNode.tileWidth && oFirstNode.rules.hideUnconditional && this[oFirstNode.rules.hideUnconditional]) {
                    oFirstNode.tileWidth = 0;
                    oFirstNode.tileHeight = 0;
                    oSecondNode.tileWidth = oParentNode.tileWidth;
                    oSecondNode.tileHeight = oParentNode.tileHeight;
                }
                else if (oSecondNode.tileWidth && oSecondNode.rules.hideUnconditional && this[oSecondNode.rules.hideUnconditional]) {
                    oFirstNode.tileWidth = oParentNode.tileWidth;
                    oFirstNode.tileHeight = oParentNode.tileHeight;
                    oSecondNode.tileWidth = 0;
                    oSecondNode.tileHeight = 0;
                }
                if (!oFirstNode.tileWidth && oFirstNode.rules.showUnconditional && this[oFirstNode.rules.showUnconditional]) {
                    oFirstNode.tileWidth = oSecondNode.tileWidth;
                    oFirstNode.tileHeight = oSecondNode.tileHeight;
                    oSecondNode.tileWidth = 0;
                    oSecondNode.tileHeight = 0;
                }
                else if (!oSecondNode.tileWidth && oSecondNode.rules.showUnconditional && this[oSecondNode.rules.showUnconditional]) {
                    oSecondNode.tileWidth = oFirstNode.tileWidth;
                    oSecondNode.tileHeight = oFirstNode.tileHeight;
                    oFirstNode.tileWidth = 0;
                    oFirstNode.tileHeight = 0;
                }*/
            };

            LayoutEngine.prototype._applyNodeRules = function(oNode, curState, width, height) {
                let bRes = true,
                    dpi,
                    iSize,
                    iDivSize = 0,
                    iMinSize,
                    iMaxSize;

                if (oNode.rules) {
                    if (_nodeVisibleInState(oNode, curState)) {
                        if (oNode.isHorizontal) {
                            iSize = width;
                            dpi = this.dpiX;
                        }
                        else {
                            iSize = height;
                            dpi = this.dpiY;
                        }
                        if (oNode.rules.unit === 'px') {
                            iMinSize = oNode.rules.minSize;
                            iMaxSize = oNode.rules.maxSize;
                        }
                        else {
                            iMinSize = Math.round(oNode.rules.minSize * dpi);
                            iMaxSize = Math.round(oNode.rules.maxSize * dpi);
                        }
                        if (oNode.rules.frame)
                            iSize = iSize - (2 * oNode.rules.frame);
                        if (oNode.rules.ratio) {
                            if (oNode.isHorizontal)
                                iDivSize = Math.round(height * oNode.rules.ratio);
                            else
                                iDivSize = Math.round(width * oNode.rules.ratio);
                        }
                        else if (oNode.rules.percent)
                            iDivSize = Math.round(iSize * oNode.rules.percent / 100);
                        else
                            iDivSize = iSize;
                        if (iMaxSize)
                            iDivSize = Math.min(iDivSize, iMaxSize);
                        if (iMinSize && iDivSize<iMinSize) {
                            if (oNode.rules.hideUnderMin)
                                iDivSize = 0;
                            else
                                iDivSize = iMinSize;
                        }
                    }
                    if (iDivSize) {
                        if (oNode.isHorizontal) {
                            oNode.tileWidth = iDivSize;
                            oNode.tileHeight = height;
                        }
                        else {
                            oNode.tileWidth = width;
                            oNode.tileHeight = iDivSize;
                        }
                    }
                    else {
                        oNode.tileWidth = 0;
                        oNode.tileHeight = 0;
                    }
                }
                return bRes;
            };

            var Layouts;
            (function (Layouts) {
                Layouts[Layouts["mobileLandscape"] = 1] = "_mobileLandscape_";
                Layouts[Layouts["mobilePortrait"] = 2] = "_mobilePortrait_";
                Layouts[Layouts["tabletLandscape"] = 3] = "_tabletLandscape_";
                Layouts[Layouts["tabletPortrait"] = 4] = "_tabletPortrait_";
                Layouts[Layouts["desktop"] = 5] = "_desktop_";
                Layouts[Layouts["desktopLandscape"] = 6] = "_desktopLandscape_";
                Layouts[Layouts["desktopPortrait"] = 7] = "_desktopPortrait_";
            })(Layouts = {});
            LayoutEngine.Layouts = Layouts;

            const _layoutAffinity = {
                [Layouts.mobilePortrait]: [Layouts.mobilePortrait, Layouts.mobileLandscape, Layouts.tabletPortrait, Layouts.tabletLandscape, Layouts.desktopPortrait, Layouts.desktopLandscape, Layouts.desktop],
                [Layouts.mobileLandscape]: [Layouts.mobileLandscape, Layouts.mobilePortrait, Layouts.tabletLandscape, Layouts.desktopLandscape, Layouts.desktop],
                [Layouts.tabletPortrait]: [Layouts.tabletPortrait, Layouts.tabletLandscape, Layouts.desktopPortrait, Layouts.desktopLandscape, Layouts.desktop],
                [Layouts.tabletLandscape]: [Layouts.tabletLandscape, Layouts.tabletPortrait, Layouts.desktopLandscape, Layouts.desktopPortrait, Layouts.desktop],
                [Layouts.desktopPortrait]: [Layouts.desktopPortrait, Layouts.desktopLandscape, Layouts.desktop],
                [Layouts.desktopLandscape]: [Layouts.desktopLandscape, Layouts.desktopPortrait, Layouts.desktop]
            };

            LayoutEngine.prototype._getRootForScreen = function(screen) {
                let aLayouts = _layoutAffinity[this.layout],
                    oTree;

                for (let i = 0; i < aLayouts.length; ++i) {
                    oTree = screen.getRootNodeForLayout(aLayouts[i]);
                    if (oTree) {
                        return oTree.getRoot();
                    }
                }
            };

            LayoutEngine.prototype._setNodesTiles = function(oNode, state) {
                var oNode1;
                var oNode2;

                if (oNode && oNode.LTChild && oNode.RBChild) {
                    oNode1 = oNode.LTChild;
                    oNode2 = oNode.RBChild;

                    if (oNode2.rules) {
                        if (oNode1.rules) {
                            this._applyNodeRules(oNode1, state, oNode.tileWidth, oNode.tileHeight);
                            this._applyNodeRules(oNode2, state, oNode.tileWidth, oNode.tileHeight);
                            this._fixNodesSize(oNode, oNode1, oNode2);
                        }
                        else {
                            this._applyNodeRules(oNode2, state, oNode.tileWidth, oNode.tileHeight);
                            _setNodeSize(oNode, oNode2, oNode1);
                        }
                    }
                    else {
                        if (oNode1.rules)
                            this._applyNodeRules(oNode1, state, oNode.tileWidth, oNode.tileHeight);
                        else {
                            if (oNode1.isHorizontal) {
                                oNode1.tileWidth = oNode.tileWidth/2;
                                oNode1.tileHeight = oNode.tileHeight;
                            }
                            else {
                                oNode1.tileWidth = oNode.tileWidth;
                                oNode1.tileHeight = oNode.tileHeight/2;
                            }
                        }
                        _setNodeSize(oNode, oNode1, oNode2);
                    }
                }
            };

            LayoutEngine.prototype._createTilesLayout = function(screen)
            {
                let root,
                    aNodes = [],
                    aTmpNodes,
                    state = screen.state;

                root = this._getRootForScreen(screen);
                if (root) {
                    root.tileWidth = this.width;
                    root.tileHeight = this.height;
                    aNodes.push(root);
                    while (aNodes.length) {
                        aTmpNodes = [];
                        for (let i=0; i < aNodes.length; i++) {
                            this._setNodesTiles(aNodes[i], state);
                            if (aNodes[i].LTChild) {
                                aTmpNodes.push(aNodes[i].LTChild);
                                aTmpNodes.push(aNodes[i].RBChild);
                            }
                        }
                        aNodes = aTmpNodes;
                    }
                }
                return root;
            };
            
            LayoutEngine.prototype._attachResizeHandler = function(activity, body, options) {
                if (!this[_resizeHandler]) {
                    let delta = (options && options.timeOut) || 100,
                        handle = 0, stamp;

                    this._onResize(body.offsetWidth, body.offsetHeight);
                    window.addEventListener('resize', this[_resizeHandler] = () => {
                        stamp = new Date();
                        handle || (handle = setInterval(() => {
                            if (new Date() - stamp > delta) {
                                let oldLayout = this.layout;

                                clearInterval(handle);
                                handle = 0;
                                this._onResize(body.offsetWidth, body.offsetHeight) !== oldLayout ?
                                    activity.onLayoutChange(oldLayout):
                                    activity.onResize();
                            }
                        }, delta));
                    });
                    return true;
                }
            };

            LayoutEngine.prototype.initialize = function(activity, body, options) {
                if (this._attachResizeHandler(activity, body, options)) {
                    let DPIDiv = document.createElement("div");

                    DPIDiv.style.width = '10cm';
                    DPIDiv.style.height = '10cm';
                    body.appendChild(DPIDiv);
                    return new Promise(resolve => {
                        setTimeout(() => {
                            this.dpiX = DPIDiv.offsetWidth / 10;
                            this.dpiY = DPIDiv.offsetHeight / 10;
                            body.removeChild(DPIDiv);
                            resolve();
                        }, 0);
                    });
                }
            };
            
            LayoutEngine.prototype.destroy = function() {
                if (this[_resizeHandler]) {
                    window.removeEventListener('resize', this[_resizeHandler]);
                    delete this[_resizeHandler];
                }
            };

            LayoutEngine.prototype.generate = function(screen, resize) {
                let root,
                    id,
                    layoutDiv;

                root = this._createTilesLayout(screen);
                id = screen.uid;
                layoutDiv = resize && document.getElementById(id);
                if (!layoutDiv) {
                    layoutDiv = document.createElement("afc-gui-div");
                    layoutDiv.id = id;
                    layoutDiv.style.width = '100%';
                    layoutDiv.style.height = '100%';
                }

                if (root) {
                    let aNodes = [{node: root, parentNode: layoutDiv}],
                        aTmpNodes,
                        created = [];

                    while (aNodes.length) {
                        aTmpNodes = [];
                        aNodes.forEach(item => {
                            let bAppend,
                                newDiv,
                                show,
                                parentDiv,
                                oNode = item.node,
                                id = _makeDivIdEx(oNode);

                            newDiv = resize && document.getElementById(id);
                            if ((bAppend = !newDiv)) {
                                newDiv = document.createElement(oNode.tagName || "afc-gui-div");
                                oNode.tagName && ((newDiv instanceof AFC.gui.AfcGuiDiv) || console.log('Warning: node does not inherit afc-gui-div'));
                                newDiv.id = id;
                            }
                            newDiv.style.width = oNode.tileWidth+'px';
                            newDiv.style.height = oNode.tileHeight+'px';
                            if (bAppend) {
                                parentDiv = item.parentNode;
                                newDiv.style.float = oNode.isHorizontal ? 'left' : 'none';
                                if (oNode.HTML)
                                    newDiv.innerHTML = oNode.HTML;
                                if (oNode.className)
                                    newDiv.className = oNode.className;
                                parentDiv.appendChild(newDiv);
                            }
                            show = (oNode.tileWidth && oNode.tileHeight);
                            created.push({div: newDiv, hidden: !show});
                            if (/*show &&*/ oNode.LTChild) {
                                aTmpNodes.push({node: oNode.LTChild, parentNode: newDiv});
                                aTmpNodes.push({node: oNode.RBChild, parentNode: newDiv});
                            }
                        });
                        aNodes = aTmpNodes;
                    }

                    created && created.forEach(item => {
                        item.div.hidden = item.hidden;
                    });
                }
                layoutDiv.hidden = false;        
                return layoutDiv;
            };
            return LayoutEngine;
        })();
        Application.LayoutEngine = LayoutEngine;
    })(Application = AFC.Application || (AFC.Application = {}));
})(AFC);