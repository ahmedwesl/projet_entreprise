/* global AFC */
(function(AFC) {
    "use strict";
    var Application;
    (function(Application) {
        var Screens;
        (function (Screens) {
            Screens[Screens["Base"] = 0xFFFFFFFF] = "Base";
        })(Screens = Application.Screens || (Application.Screens = {}));
        
        var States;
        (function (States) {
            States[States["default"] = 0xFFFFFFFF] = "default";
        })(States = Application.States || (Application.States = {}));        
        
        var ScreenBase = (function () {
            const _app = Symbol("app"),
                _loaded = Symbol("loaded"),
                _sink = Symbol("sink"),
                _view = Symbol();
            
            function ScreenBase(app, state) {
                this._state = state || States.default;
                this[_app] = app;
                this[_loaded] = false;
                this[_sink] = new AFC.Tools.EventSink(this);
                this.uid = `uid${AFC.Tools.Data.generateRndString(20)}`;
                return this;
            }
            
            ScreenBase.id = Application.Screens.Base;

            Object.defineProperty(ScreenBase.prototype, "app", {
                get: function () {
                    return this[_app];
                },
                enumerable: true
            });
                
            Object.defineProperty(ScreenBase.prototype, "sink", {
                get: function () {
                    return this[_sink];
                },
                enumerable: true
            });
                
            Object.defineProperty(ScreenBase.prototype, "state", {
                get: function () {
                    return this._state;
                },
                set: function (value) {
                    if (this._state !== value) {
                        this._state = value;
                        this.app.refresh();
                    }
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(ScreenBase.prototype, "screenId", {
                get: function () {
                    return this.constructor.id;
                },
                enumerable: true,
                configurable: true
            });
            
            ScreenBase.prototype.getRootNodeForLayout = function(layout) {
                return null;
            };

            ScreenBase.prototype.onLoad = function(callback) {
                this[_sink].fireEvent(AFC.Tools.EventType.Attach);
                this[_loaded] = true;
                callback();
            };

            ScreenBase.prototype.prefetch = function(callback) {
                callback();
            };
                                
            ScreenBase.prototype.fetch = function(callback) {
                callback();
            };
                    
            ScreenBase.prototype._isLoaded = function(callback) {
                var h = callback.bind(this);
                this[_loaded] ? h() : this[_sink].once(AFC.Tools.EventType.Attach, h, callback);
            };
            
            ScreenBase.prototype.onUnload = function() {};
            
            ScreenBase.prototype.connectedCallback = function() {};
            
            ScreenBase.prototype.serialize = function(context) {};

            ScreenBase.prototype.deserialize = function(context) {};
            
            ScreenBase.prototype.onCreateView = function(layoutEngine, container, savedInstanceState) {
                return this[_view] = layoutEngine.generate(this);
            };
            
            ScreenBase.prototype.getView = function() {
                return this[_view];
            };
            
            ScreenBase.prototype.getActivity = function() {
                return this.app.getActivity();
            };
            return ScreenBase;
        })();
        Application.ScreenBase = ScreenBase;
    })(Application = AFC.Application || (AFC.Application = {}));
})(AFC);
